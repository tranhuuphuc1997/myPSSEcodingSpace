# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'giaodien.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
sys.path.append(r'C:\Program Files\PTI\PSSE35\35.4\PSSPY39')
from PyQt5.QtWidgets import QGridLayout
from openpyxl import load_workbook
from PyQt5.QtWidgets import QApplication, QVBoxLayout, QWidget, QLineEdit, QTableWidget, QTableWidgetItem, QPushButton, QDialog, QLabel
import xlsxwriter

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QGuiApplication
import psse3504
from PyQt5 import QtCore, QtGui, QtWidgets
import os
import pandas as pd
import psspy
import cmath 
import numpy 
import numpy as np
import math
import matplotlib.pyplot as plt
import time
from PyQt5.QtCore import QAbstractTableModel, Qt, QModelIndex, QPoint
from PyQt5.QtWidgets import QApplication, QWidget, QTableView, QMainWindow, QVBoxLayout, QLineEdit, QMessageBox, QMenu, QAction
from PyQt5.QtCore import Qt, QSortFilterProxyModel, QAbstractTableModel
from PyQt5.QtGui import QMovie
import pssras
from pathlib import Path
from datetime import datetime
from PyQt5.QtGui import QColor
import pssras
from PyQt5.QtGui import QKeySequence
from PyQt5.QtWidgets import QApplication, QTableWidget, QTableWidgetItem, QShortcut
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QAction, QTableWidget, QTableWidgetItem, 
    QLineEdit, QVBoxLayout, QHBoxLayout, QDialog, QPushButton, QLabel, 
    QFileDialog, QHeaderView
)
from PyQt5.QtGui import QStandardItemModel, QStandardItem
import pssarrays
# -----------------Đưa dataframe ra table view------------------------
class pandasModel(QAbstractTableModel):

    def __init__(self, data):
        QAbstractTableModel.__init__(self)
        self._data = data
    #Tạo đếm hàng
    def rowCount(self, parent=None):
        return self._data.shape[0]
    #Tạo đếm cột
    def columnCount(self, parnet=None):
        return self._data.shape[1]
    # Tạo dữ liệu 
    def data(self, index, role=Qt.DisplayRole):
        if index.isValid():
            if role == Qt.DisplayRole:
                return str(self._data.iloc[index.row(), index.column()])
        return None
    # Tạo header data
    def headerData(self, col, orientation, role):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return self._data.columns[col]
        return None

# Tìm kiếm phần tử sau đó đưa bảng rút gọn lên màn hình 
class TableModel(QAbstractTableModel):
    def __init__(self, data):
        super().__init__()
        self._data = data
        
    def is_nan(self, value):
        """Kiểm tra giá trị có phải NaN không."""
        try:
            # Dùng math.isnan để kiểm tra NaN
            return math.isnan(float(value))
        except (ValueError, TypeError):
            return False

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            return self._data[index.row()][index.column()]

        if role == Qt.ForegroundRole:
            # Kiểm tra giá trị tại cột thứ 14 (index 13) và 15 (index 14)
            row = index.row()
            col_14 = self._data[row][13]
            col_15 = self._data[row][14]

            # Nếu giá trị tại cột 14 hoặc 15 khác '-' hoặc NaN, đổi màu xanh
            if col_14 != '-' and not self.is_nan(col_14):
                return QColor(Qt.blue)
            if col_15 != '-' and not self.is_nan(col_15):
                return QColor(Qt.blue)

            # Mặc định màu đen
            return QColor(Qt.black)

    def rowCount(self, index):
        # The length of the outer list.
        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return len(self._data[0])


# Tìm kiếm phần tử sau đó đưa bảng rút gọn lên màn hình 
class TableModel_2(QAbstractTableModel):
    def __init__(self, data):
        super().__init__()
        self._data = data
        
    def is_nan(self, value):
        """Kiểm tra giá trị có phải NaN không."""
        try:
            # Dùng math.isnan để kiểm tra NaN
            return math.isnan(float(value))
        except (ValueError, TypeError):
            return False

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            return self._data[index.row()][index.column()]


    def rowCount(self, index):
        # The length of the outer list.
        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return len(self._data[0])

# -----------------Thay đổi giao diện ở đây------------------------
# Tạo giao diện bằng phần mềm Pyqt5 sau đó phần mềm sẽ xuất ra đoạn code như dưới đây
class Ui_MainWindow(object):
    
    #Chương trình chính quyết định giao diện của Tool
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1400, 1020)
        icon = QtGui.QIcon.fromTheme("Dark")
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(280, 0, 851, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 250, 301, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.Chedo2h = QtWidgets.QToolButton(self.centralwidget)
        self.Chedo2h.setGeometry(QtCore.QRect(90, 80, 211, 31))
        self.Chedo2h.setObjectName("Chedo2h")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(30, 940, 1311, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.Chedo10h = QtWidgets.QToolButton(self.centralwidget)
        self.Chedo10h.setGeometry(QtCore.QRect(90, 120, 211, 31))
        self.Chedo10h.setObjectName("Chedo10h")
        self.Chedo12h = QtWidgets.QToolButton(self.centralwidget)
        self.Chedo12h.setGeometry(QtCore.QRect(440, 80, 211, 31))
        self.Chedo12h.setObjectName("Chedo12h")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(340, 40, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(10, 80, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(10, 120, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(350, 80, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(350, 120, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.chedo15h = QtWidgets.QToolButton(self.centralwidget)
        self.chedo15h.setGeometry(QtCore.QRect(440, 120, 211, 31))
        self.chedo15h.setObjectName("chedo15h")
        self.RunPythontoPSSE = QtWidgets.QPushButton(self.centralwidget)
        self.RunPythontoPSSE.setGeometry(QtCore.QRect(610, 220, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.RunPythontoPSSE.setFont(font)
        self.RunPythontoPSSE.setAccessibleDescription("")
        self.RunPythontoPSSE.setObjectName("RunPythontoPSSE")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(700, 120, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.chedo18h = QtWidgets.QToolButton(self.centralwidget)
        self.chedo18h.setGeometry(QtCore.QRect(780, 80, 211, 31))
        self.chedo18h.setObjectName("chedo18h")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(1040, 120, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(1040, 80, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.CNmax = QtWidgets.QToolButton(self.centralwidget)
        self.CNmax.setGeometry(QtCore.QRect(1100, 120, 211, 31))
        self.CNmax.setObjectName("CNmax")
        self.CNmin = QtWidgets.QToolButton(self.centralwidget)
        self.CNmin.setGeometry(QtCore.QRect(1100, 80, 211, 31))
        self.CNmin.setObjectName("CNmin")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(300, 250, 201, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(780, 300, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.tabWidget_1 = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget_1.setGeometry(QtCore.QRect(20, 300, 761, 641))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.tabWidget_1.setFont(font)
        self.tabWidget_1.setLocale(QtCore.QLocale(QtCore.QLocale.Vietnamese, QtCore.QLocale.Vietnam))
        self.tabWidget_1.setObjectName("tabWidget_1")
        self.cacphantu = QtWidgets.QWidget()
        self.cacphantu.setObjectName("cacphantu")
        self.text_cacphantu_daytai = QtWidgets.QTextBrowser(self.cacphantu)
        self.text_cacphantu_daytai.setGeometry(QtCore.QRect(0, 0, 761, 611))
        self.text_cacphantu_daytai.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.text_cacphantu_daytai.setObjectName("text_cacphantu_daytai")
        self.tabWidget_1.addTab(self.cacphantu, "")
        self.dotanggiam = QtWidgets.QWidget()
        self.dotanggiam.setLocale(QtCore.QLocale(QtCore.QLocale.Vietnamese, QtCore.QLocale.Vietnam))
        self.dotanggiam.setObjectName("dotanggiam")
        self.text_dotanggiam_tlcs = QtWidgets.QTextBrowser(self.dotanggiam)
        self.text_dotanggiam_tlcs.setGeometry(QtCore.QRect(0, 0, 761, 611))
        self.text_dotanggiam_tlcs.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.text_dotanggiam_tlcs.setObjectName("text_dotanggiam_tlcs")
        self.tabWidget_1.addTab(self.dotanggiam, "")
        self.Tonthat = QtWidgets.QWidget()
        self.Tonthat.setObjectName("Tonthat")
        self.text_tonthat_tlcs = QtWidgets.QTextBrowser(self.Tonthat)
        self.text_tonthat_tlcs.setGeometry(QtCore.QRect(0, 0, 761, 611))
        self.text_tonthat_tlcs.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.text_tonthat_tlcs.setObjectName("text_tonthat_tlcs")
        self.tabWidget_1.addTab(self.Tonthat, "")
        self.Outputbar = QtWidgets.QWidget()
        self.Outputbar.setObjectName("Outputbar")
        self.text_outputbar = QtWidgets.QTextBrowser(self.Outputbar)
        self.text_outputbar.setGeometry(QtCore.QRect(0, 0, 761, 611))
        self.text_outputbar.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.text_outputbar.setObjectName("text_outputbar")
        self.tabWidget_1.addTab(self.Outputbar, "")
        self.Canhbao_dienap = QtWidgets.QWidget()
        self.Canhbao_dienap.setObjectName("Canhbao_dienap")
        self.text_voltage_warning = QtWidgets.QTextBrowser(self.Canhbao_dienap)
        self.text_voltage_warning.setGeometry(QtCore.QRect(0, 0, 761, 611))
        self.text_voltage_warning.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.text_voltage_warning.setObjectName("text_voltage_warning")
        self.tabWidget_1.addTab(self.Canhbao_dienap, "")
        self.Python_Out = QtWidgets.QWidget()
        self.Python_Out.setObjectName("Python_Out")
        self.Python_to_run_PSSE = QtWidgets.QTextEdit(self.Python_Out)
        self.Python_to_run_PSSE.setGeometry(QtCore.QRect(0, 0, 761, 611))
        self.Python_to_run_PSSE.setObjectName("Python_to_run_PSSE")
        self.tabWidget_1.addTab(self.Python_Out, "")
        self.chedo21h = QtWidgets.QToolButton(self.centralwidget)
        self.chedo21h.setGeometry(QtCore.QRect(780, 120, 211, 31))
        self.chedo21h.setObjectName("chedo21h")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(700, 80, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.checkBox_18h = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_18h.setGeometry(QtCore.QRect(1000, 90, 41, 17))
        self.checkBox_18h.setChecked(True)
        self.checkBox_18h.setObjectName("checkBox_18h")
        self.checkBox_15h = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_15h.setGeometry(QtCore.QRect(660, 130, 41, 17))
        self.checkBox_15h.setChecked(True)
        self.checkBox_15h.setObjectName("checkBox_15h")
        self.checkBox_12h = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_12h.setGeometry(QtCore.QRect(660, 90, 41, 17))
        self.checkBox_12h.setChecked(True)
        self.checkBox_12h.setObjectName("checkBox_12h")
        self.checkBox_10h = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_10h.setGeometry(QtCore.QRect(310, 130, 41, 17))
        self.checkBox_10h.setChecked(True)
        self.checkBox_10h.setObjectName("checkBox_10h")
        self.checkBox_2h = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2h.setGeometry(QtCore.QRect(310, 90, 41, 17))
        self.checkBox_2h.setChecked(True)
        self.checkBox_2h.setObjectName("checkBox_2h")
        self.checkBox_21h = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_21h.setGeometry(QtCore.QRect(1000, 130, 41, 17))
        self.checkBox_21h.setChecked(True)
        self.checkBox_21h.setObjectName("checkBox_21h")
        self.Timkiem_phantu = QtWidgets.QLineEdit(self.centralwidget)
        self.Timkiem_phantu.setGeometry(QtCore.QRect(920, 300, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.Timkiem_phantu.setFont(font)
        self.Timkiem_phantu.setObjectName("Timkiem_phantu")
        self.checkBox_CNma = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_CNma.setGeometry(QtCore.QRect(1320, 130, 61, 17))
        self.checkBox_CNma.setChecked(True)
        self.checkBox_CNma.setAutoRepeat(False)
        self.checkBox_CNma.setObjectName("checkBox_CNma")
        self.checkBox_CNmi = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_CNmi.setGeometry(QtCore.QRect(1320, 90, 61, 17))
        self.checkBox_CNmi.setChecked(True)
        self.checkBox_CNmi.setObjectName("checkBox_CNmi")
        self.Loadfilepython = QtWidgets.QToolButton(self.centralwidget)
        self.Loadfilepython.setGeometry(QtCore.QRect(460, 180, 221, 31))
        self.Loadfilepython.setObjectName("Loadfilepython")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(10, 180, 291, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.Tatcachedo1tuan = QtWidgets.QToolButton(self.centralwidget)
        self.Tatcachedo1tuan.setGeometry(QtCore.QRect(600, 40, 231, 31))
        self.Tatcachedo1tuan.setObjectName("Tatcachedo1tuan")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(20, 40, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.Run_Trip_Branch = QtWidgets.QPushButton(self.centralwidget)
        self.Run_Trip_Branch.setGeometry(QtCore.QRect(1140, 260, 241, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.Run_Trip_Branch.setFont(font)
        self.Run_Trip_Branch.setObjectName("Run_Trip_Branch")
        self.Run_Power_Losses = QtWidgets.QPushButton(self.centralwidget)
        self.Run_Power_Losses.setGeometry(QtCore.QRect(850, 40, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.Run_Power_Losses.setFont(font)
        self.Run_Power_Losses.setObjectName("Run_Power_Losses")
        self.do_nhay_tanggiam = QtWidgets.QSpinBox(self.centralwidget)
        self.do_nhay_tanggiam.setGeometry(QtCore.QRect(150, 210, 41, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.do_nhay_tanggiam.setFont(font)
        self.do_nhay_tanggiam.setMaximum(300)
        self.do_nhay_tanggiam.setProperty("value", 5)
        self.do_nhay_tanggiam.setObjectName("do_nhay_tanggiam")
        self.label_20 = QtWidgets.QLabel(self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(20, 210, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.centralwidget)
        self.label_21.setGeometry(QtCore.QRect(200, 210, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.checkBox_vietsub = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_vietsub.setGeometry(QtCore.QRect(290, 220, 81, 17))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.checkBox_vietsub.setFont(font)
        self.checkBox_vietsub.setChecked(True)
        self.checkBox_vietsub.setObjectName("checkBox_vietsub")
        self.checkBox_Canhbaodienap = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_Canhbaodienap.setGeometry(QtCore.QRect(370, 220, 141, 17))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.checkBox_Canhbaodienap.setFont(font)
        self.checkBox_Canhbaodienap.setChecked(True)
        self.checkBox_Canhbaodienap.setObjectName("checkBox_Canhbaodienap")
        self.label_22 = QtWidgets.QLabel(self.centralwidget)
        self.label_22.setGeometry(QtCore.QRect(320, 180, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.centralwidget)
        self.label_23.setGeometry(QtCore.QRect(690, 180, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.label_23.setFont(font)
        self.label_23.setObjectName("label_23")
        self.Loadmultiple_python = QtWidgets.QToolButton(self.centralwidget)
        self.Loadmultiple_python.setGeometry(QtCore.QRect(870, 180, 481, 31))
        self.Loadmultiple_python.setObjectName("Loadmultiple_python")
        self.Chon_Phan_Tu_Cat = QtWidgets.QPushButton(self.centralwidget)
        self.Chon_Phan_Tu_Cat.setGeometry(QtCore.QRect(1140, 300, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.Chon_Phan_Tu_Cat.setFont(font)
        self.Chon_Phan_Tu_Cat.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Chon_Phan_Tu_Cat.setAutoFillBackground(False)
        self.Chon_Phan_Tu_Cat.setDefault(False)
        self.Chon_Phan_Tu_Cat.setFlat(False)
        self.Chon_Phan_Tu_Cat.setObjectName("Chon_Phan_Tu_Cat")
        self.Chon_Phan_Tu_Dong = QtWidgets.QPushButton(self.centralwidget)
        self.Chon_Phan_Tu_Dong.setGeometry(QtCore.QRect(1240, 300, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.Chon_Phan_Tu_Dong.setFont(font)
        self.Chon_Phan_Tu_Dong.setObjectName("Chon_Phan_Tu_Dong")
        self.chaydonfilepython = QtWidgets.QRadioButton(self.centralwidget)
        self.chaydonfilepython.setGeometry(QtCore.QRect(870, 230, 82, 17))
        self.chaydonfilepython.setChecked(False)
        self.chaydonfilepython.setObjectName("chaydonfilepython")
        self.chaydafilepython = QtWidgets.QRadioButton(self.centralwidget)
        self.chaydafilepython.setGeometry(QtCore.QRect(960, 230, 82, 17))
        self.chaydafilepython.setChecked(False)
        self.chaydafilepython.setObjectName("chaydafilepython")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(10, 160, 1361, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.chaytructieptuphantu = QtWidgets.QRadioButton(self.centralwidget)
        self.chaytructieptuphantu.setGeometry(QtCore.QRect(1040, 230, 201, 17))
        self.chaytructieptuphantu.setChecked(True)
        self.chaytructieptuphantu.setObjectName("chaytructieptuphantu")
        self.Nap_Thong_So_A0 = QtWidgets.QPushButton(self.centralwidget)
        self.Nap_Thong_So_A0.setGeometry(QtCore.QRect(1010, 40, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.Nap_Thong_So_A0.setFont(font)
        self.Nap_Thong_So_A0.setObjectName("Nap_Thong_So_A0")
        self.ChongnayxemthsA0 = QtWidgets.QComboBox(self.centralwidget)
        self.ChongnayxemthsA0.setGeometry(QtCore.QRect(1030, 260, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.ChongnayxemthsA0.setFont(font)
        self.ChongnayxemthsA0.setObjectName("ChongnayxemthsA0")
        self.ChongnayxemthsA0.addItem("")
        self.ChongnayxemthsA0.addItem("")
        self.ChongnayxemthsA0.addItem("")
        self.ChongnayxemthsA0.addItem("")
        self.ChongnayxemthsA0.addItem("")
        self.ChongnayxemthsA0.addItem("")
        self.ChongnayxemthsA0.addItem("")
        self.Ve_DoThi_thongsoA0 = QtWidgets.QPushButton(self.centralwidget)
        self.Ve_DoThi_thongsoA0.setGeometry(QtCore.QRect(580, 260, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.Ve_DoThi_thongsoA0.setFont(font)
        self.Ve_DoThi_thongsoA0.setObjectName("Ve_DoThi_thongsoA0")
        self.checkBox_phantram = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_phantram.setGeometry(QtCore.QRect(920, 270, 41, 17))
        self.checkBox_phantram.setChecked(True)
        self.checkBox_phantram.setObjectName("checkBox_phantram")
        self.checkBox_VethgsoPSSE = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_VethgsoPSSE.setGeometry(QtCore.QRect(970, 270, 51, 17))
        self.checkBox_VethgsoPSSE.setChecked(True)
        self.checkBox_VethgsoPSSE.setObjectName("checkBox_VethgsoPSSE")
        self.PickFromTo = QtWidgets.QComboBox(self.centralwidget)
        self.PickFromTo.setGeometry(QtCore.QRect(770, 260, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.PickFromTo.setFont(font)
        self.PickFromTo.setObjectName("PickFromTo")
        self.PickFromTo.addItem("")
        self.PickFromTo.addItem("")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(850, 260, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.Calculate_Short_Circuit = QtWidgets.QPushButton(self.centralwidget)
        self.Calculate_Short_Circuit.setGeometry(QtCore.QRect(1220, 220, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.Calculate_Short_Circuit.setFont(font)
        self.Calculate_Short_Circuit.setObjectName("Calculate_Short_Circuit")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(790, 340, 591, 581))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.tabWidget.setFont(font)
        self.tabWidget.setObjectName("tabWidget")
        self.Grid = QtWidgets.QWidget()
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.Grid.setFont(font)
        self.Grid.setObjectName("Grid")
        self.bangcacphantu = QtWidgets.QTableView(self.Grid)
        self.bangcacphantu.setGeometry(QtCore.QRect(0, 0, 591, 551))
        self.bangcacphantu.setAutoFillBackground(False)
        self.bangcacphantu.setLocale(QtCore.QLocale(QtCore.QLocale.Vietnamese, QtCore.QLocale.Vietnam))
        self.bangcacphantu.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.bangcacphantu.setLineWidth(1)
        self.bangcacphantu.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.bangcacphantu.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.bangcacphantu.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.bangcacphantu.setAlternatingRowColors(True)
        self.bangcacphantu.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.bangcacphantu.setGridStyle(QtCore.Qt.SolidLine)
        self.bangcacphantu.setSortingEnabled(True)
        self.bangcacphantu.setObjectName("bangcacphantu")
        self.tabWidget.addTab(self.Grid, "")
        self.Source = QtWidgets.QWidget()
        self.Source.setObjectName("Source")
        self.bangcacphantu_nguon = QtWidgets.QTableView(self.Source)
        self.bangcacphantu_nguon.setGeometry(QtCore.QRect(0, 0, 591, 551))
        self.bangcacphantu_nguon.setAutoFillBackground(False)
        self.bangcacphantu_nguon.setLocale(QtCore.QLocale(QtCore.QLocale.Vietnamese, QtCore.QLocale.Vietnam))
        self.bangcacphantu_nguon.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.bangcacphantu_nguon.setLineWidth(1)
        self.bangcacphantu_nguon.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.bangcacphantu_nguon.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.bangcacphantu_nguon.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.bangcacphantu_nguon.setAlternatingRowColors(True)
        self.bangcacphantu_nguon.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.bangcacphantu_nguon.setGridStyle(QtCore.Qt.SolidLine)
        self.bangcacphantu_nguon.setSortingEnabled(True)
        self.bangcacphantu_nguon.setObjectName("bangcacphantu_nguon")
        self.tabWidget.addTab(self.Source, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1400, 21))
        self.menubar.setObjectName("menubar")
        self.menufILE = QtWidgets.QMenu(self.menubar)
        self.menufILE.setObjectName("menufILE")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuChucnangkhac= QtWidgets.QMenu(self.menubar)
        self.menuChucnangkhac.setObjectName("menuChucnangkhac")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave_to_excel = QtWidgets.QAction(MainWindow)
        self.actionSave_to_excel.setObjectName("actionSave_to_excel")
        self.actionVersion = QtWidgets.QAction(MainWindow)
        self.actionVersion.setObjectName("actionVersion")
        self.actionOPF_Calclulation = QtWidgets.QAction(MainWindow)
        self.actionOPF_Calclulation.setObjectName("actionOPF_Calclulation")
        self.actionSensetive_Calculation = QtWidgets.QAction(MainWindow)
        self.actionSensetive_Calculation.setObjectName("actionSensetive_Calculation")
        self.actionDynamic_Calculation = QtWidgets.QAction(MainWindow)
        self.actionDynamic_Calculation.setObjectName("actionDynamic_Calculation")
        self.actionPower_Flow_To_Cad = QtWidgets.QAction(MainWindow)
        self.actionPower_Flow_To_Cad.setObjectName("actionPower_Flow_To_Cad")
        self.actionSave_ShortCircuit_To_Excel = QtWidgets.QAction(MainWindow)
        self.actionSave_ShortCircuit_To_Excel.setObjectName("actionSave_ShortCircuit_To_Excel")
        self.actionSave_Voltage_To_Excel = QtWidgets.QAction(MainWindow)
        self.actionSave_Voltage_To_Excel.setObjectName("actionSave_Voltage_To_Excel")
        self.menufILE.addAction(self.actionOpen)
        self.menufILE.addAction(self.actionSave_to_excel)
        self.menufILE.addAction(self.actionSave_ShortCircuit_To_Excel)
        self.menufILE.addAction(self.actionSave_Voltage_To_Excel)
        self.menuAbout.addAction(self.actionVersion)
        self.menuChucnangkhac.addAction(self.actionOPF_Calclulation)
        self.menuChucnangkhac.addAction(self.actionSensetive_Calculation)
        self.menuChucnangkhac.addAction(self.actionDynamic_Calculation)
        self.menuChucnangkhac.addAction(self.actionPower_Flow_To_Cad)
        self.menubar.addAction(self.menufILE.menuAction())
        self.menubar.addAction(self.menuChucnangkhac.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget_1.setCurrentIndex(5)
        self.tabWidget.setCurrentIndex(0)
        
        self.loading = QtWidgets.QLabel(self.centralwidget)
        self.loading.setGeometry(QtCore.QRect(0, 0, 50, 50))
        movie = QMovie("Loading.gif")
        icon = QtGui.QIcon.fromTheme("Dark")
        icon.addPixmap(QtGui.QPixmap("conveyorbelt_117804.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)

        #------------------------------------------Đoạn này nối giữa nút nhấn và chức năng nút (def-function) thực hiện ----------------------
        #Nút hiện version
        self.actionVersion.triggered.connect(self.version_of_the_tool)
        #Nút chức năng chọn file PSS/E
        self.Chedo2h.clicked.connect(self.chonfilepsse2h)
        self.Chedo10h.clicked.connect(self.chonfilepsse10h)
        self.Chedo12h.clicked.connect(self.chonfilepsse12h)
        self.chedo15h.clicked.connect(self.chonfilepsse15h)
        self.chedo18h.clicked.connect(self.chonfilepsse18h)
        self.chedo21h.clicked.connect(self.chonfilepsse21h)
        self.CNmax.clicked.connect(self.chonfilepsseCNmax)
        self.CNmin.clicked.connect(self.chonfilepsseCNmin)
        self.Tatcachedo1tuan.clicked.connect(self.chon_tat_ca_cac_che_do_1_tuan)

        #Nút chức năng chọn nhiều file python 1 lúc
        self.Loadmultiple_python.clicked.connect(self.chon_nhieu_file_py_mot_luc)
        #Nút chức năng chọn file python đóng cắt thiết bị
        self.Loadfilepython.clicked.connect(self.chonfilepython)
        #Nút chức năng này tính tổn thất trên từng file
        self.Run_Power_Losses.clicked.connect(self.tinh_toan_ton_that)
        #Nút chức năng chạy file python này trên tất cả các file sav
        self.RunPythontoPSSE.clicked.connect(self.chayfile_python_trentatcacfile_sav)
        #Chọn phần tử đóng 
        self.Chon_Phan_Tu_Dong.clicked.connect(self.Chon_phantu_donglai)
        #Chọn phần tử cắt
        self.Chon_Phan_Tu_Cat.clicked.connect(self.Chon_phantu_cat)
        #Xuất các công tác thành file .py 
        self.Run_Trip_Branch.clicked.connect(self.Xuat__thanh_file_py)
        #Nạp thông số A0 (>28 ngày)
        self.Nap_Thong_So_A0.clicked.connect(self.Nap_28_ngay_Thong_So_A0)
        #Vẽ đồ thị từ thông số A0
        self.Ve_DoThi_thongsoA0.clicked.connect(self.ve_do_thi_tu_thong_so_A0)
        #Kết nối với menu chuột phải
        self.bangcacphantu.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)  # Kích hoạt menu ngữ cảnh tùy chỉnh
        self.bangcacphantu.customContextMenuRequested.connect(self.contextMenuEvent_grid)
        self.bangcacphantu_nguon.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)  # Kích hoạt menu ngữ cảnh tùy chỉnh
        self.bangcacphantu_nguon.customContextMenuRequested.connect(self.contextMenuEvent_source)
        self.actionSave_to_excel.triggered.connect(self.xuat_ket_qua_cong_tac_ra_excel_tu_cac_phantu_duoc_chon)
        self.actionSave_ShortCircuit_To_Excel.triggered.connect(self.xuat_ket_qua_ngan_mach_cac_nut_duoc_chon_ra_excel) #Xuất kết quả ngắn mạch của nút được chọn 
        self.actionSave_Voltage_To_Excel.triggered.connect(self.xuat_ket_qua_dien_ap_cac_nut_duoc_chon_ra_excel) # Xuất kết quả điện áp nút được chọn ra Excel
        
        
    #Chương trình này sẽ thực hiện menu popup sau khi nhấp chuột phải vào bảng phần tử lưới điện
    def contextMenuEvent_grid(self, pos: QPoint):
        # Lấy chỉ số của hàng mà người dùng nhấp chuột phải vào
        index = self.bangcacphantu.indexAt(pos)
        if not index.isValid():
            return  # Nếu không có hàng nào được chọn, không làm gì cả
        #Tạo menu khi click vào bảng các phần tử
        menu = QMenu(self.bangcacphantu)

        # Tạo các hành động cho menu
        Open_Branch_action = QAction("Cắt phần tử", self.bangcacphantu)
        Close_Branch_action = QAction("Đóng phần tử", self.bangcacphantu)
        Checking_Open_Close_action = QAction("Kiểm tra đóng/mở", self.bangcacphantu)
        Draw_Graph_From_A0_Data = QAction("Vẽ đồ thị từ thông số A0", self.bangcacphantu)
        Move_Branch_To_Another_Bus = QAction("Định vị lại trên thanh cái", self.bangcacphantu)
        Move_Load_To_Another_Bus = QAction("Chuyển phụ tải", self.bangcacphantu)
        Scale_Load_From_Bus = QAction("Scale phụ tải", self.bangcacphantu)

        # Thêm hành động vào menu
        menu.addAction(Open_Branch_action)
        menu.addAction(Close_Branch_action)
        menu.addAction(Checking_Open_Close_action)
        menu.addAction(Draw_Graph_From_A0_Data)
        menu.addAction(Move_Branch_To_Another_Bus)
        menu.addAction(Move_Load_To_Another_Bus)
        menu.addAction(Scale_Load_From_Bus)

        # Kết nối hành động với các phương thức/ hàm xử lý
        Open_Branch_action.triggered.connect(self.Chon_phantu_cat)
        Close_Branch_action.triggered.connect(self.Chon_phantu_donglai)
        Checking_Open_Close_action.triggered.connect(self.Kiemtra_dong_mo_cua_phantu_duoc_chon)
        Draw_Graph_From_A0_Data.triggered.connect(self.ve_do_thi_tu_thong_so_A0)
        Move_Branch_To_Another_Bus.triggered.connect(self.chuyen_dinh_vi_tren_thanh_cai)
        Move_Load_To_Another_Bus.triggered.connect(self.chuyen_phu_tai_qua_mba_khac)
        Scale_Load_From_Bus.triggered.connect(self.scale_phu_tai_cua_mot_MBA) 
        
        # Hiển thị menu ngữ cảnh tại vị trí chuột
        menu.exec_(self.bangcacphantu.viewport().mapToGlobal(pos))


    #Chương trình này sẽ thực hiện menu popup sau khi nhấp chuột phải vào bảng phần tử nguồn điện
    def contextMenuEvent_source(self, pos: QPoint):
        # Lấy chỉ số của hàng mà người dùng nhấp chuột phải vào
        index = self.bangcacphantu_nguon.indexAt(pos)
        if not index.isValid():
            return  # Nếu không có hàng nào được chọn, không làm gì cả
        #Tạo menu khi click vào bảng các phần tử
        menu = QMenu(self.bangcacphantu_nguon)

        # Tạo các hành động cho menu
        Open_Branch_action = QAction("Cắt tổ máy", self.bangcacphantu_nguon)
        Close_Branch_action = QAction("Đóng tổ máy", self.bangcacphantu_nguon)
        Checking_Open_Close_action = QAction("Kiểm tra Pgen", self.bangcacphantu_nguon)
        Draw_Graph_From_A0_Data = QAction("Vẽ đồ thị từ thông số A0", self.bangcacphantu_nguon)
        Scale_Load_From_Bus = QAction("Scale nguồn", self.bangcacphantu_nguon)

        # Thêm hành động vào menu
        menu.addAction(Open_Branch_action)
        menu.addAction(Close_Branch_action)
        menu.addAction(Checking_Open_Close_action)
        menu.addAction(Draw_Graph_From_A0_Data)
        menu.addAction(Scale_Load_From_Bus)

        # Kết nối hành động với các phương thức/ hàm xử lý
        Open_Branch_action.triggered.connect(self.Chon_phantu_cat)
        Close_Branch_action.triggered.connect(self.Chon_phantu_donglai)
        Checking_Open_Close_action.triggered.connect(self.Kiemtra_dong_mo_cua_phantu_duoc_chon)
        Draw_Graph_From_A0_Data.triggered.connect(self.ve_do_thi_tu_thong_so_A0)
        Scale_Load_From_Bus.triggered.connect(self.scale_phu_tai_cua_mot_MBA) 
        
        # Hiển thị menu ngữ cảnh tại vị trí chuột
        menu.exec_(self.bangcacphantu_nguon.viewport().mapToGlobal(pos))


    #Copy đoạn code từ phần mềm tạo giao diện PYQT5 dùng để dịch cấu hình này sang dạng giao diện 
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Phần mềm hỗ trợ duyệt công tác"))
        self.label.setText(_translate("MainWindow", "CÔNG CỤ HỖ TRỢ SỬ DỤNG PHẦN MỀM PSS/E (KẾT LƯỚI/ DUYỆT CÔNG TÁC)"))
        self.label_5.setText(_translate("MainWindow", "Kết quả tính toán trào lưu công suất"))
        self.Chedo2h.setText(_translate("MainWindow", "..."))
        self.label_7.setText(_translate("MainWindow", "Copyright © all rights reserved by Trần Hữu Phúc & Cố vấn: Huỳnh Ngọc Nhiên - P.Phương Thức - A2 - Góp ý A.Minh Hoàng - Testing by Mẩn + Hùng"))
        self.Chedo10h.setText(_translate("MainWindow", "..."))
        self.Chedo12h.setText(_translate("MainWindow", "..."))
        self.label_8.setText(_translate("MainWindow", "Load hàng loạt file PSS/E của 1 tuần"))
        self.label_9.setText(_translate("MainWindow", "Chế độ 2h"))
        self.label_10.setText(_translate("MainWindow", "Chế độ 10h"))
        self.label_11.setText(_translate("MainWindow", "Chế độ 12h"))
        self.label_12.setText(_translate("MainWindow", "Chế độ 15h"))
        self.chedo15h.setText(_translate("MainWindow", "..."))
        self.RunPythontoPSSE.setText(_translate("MainWindow", "Chạy công tác này vô PSS/E"))
        self.label_14.setText(_translate("MainWindow", "Chế độ 21h"))
        self.chedo18h.setText(_translate("MainWindow", "..."))
        self.label_15.setText(_translate("MainWindow", "CN_Max"))
        self.label_16.setText(_translate("MainWindow", "CN_Min"))
        self.CNmax.setText(_translate("MainWindow", "..."))
        self.CNmin.setText(_translate("MainWindow", "..."))
        self.label_17.setText(_translate("MainWindow", "Tìm kiếm phần tử"))
        self.tabWidget_1.setTabText(self.tabWidget_1.indexOf(self.cacphantu), _translate("MainWindow", "Các phần tử đầy quá tải mới"))
        self.tabWidget_1.setTabText(self.tabWidget_1.indexOf(self.dotanggiam), _translate("MainWindow", "Độ tăng/ giảm TLCS"))
        self.tabWidget_1.setTabText(self.tabWidget_1.indexOf(self.Tonthat), _translate("MainWindow", "Tổn thất"))
        self.tabWidget_1.setTabText(self.tabWidget_1.indexOf(self.Outputbar), _translate("MainWindow", "Output"))
        self.tabWidget_1.setTabText(self.tabWidget_1.indexOf(self.Canhbao_dienap), _translate("MainWindow", "Điện áp"))
        self.tabWidget_1.setTabText(self.tabWidget_1.indexOf(self.Python_Out), _translate("MainWindow", "Python (.py)"))
        self.chedo21h.setText(_translate("MainWindow", "..."))
        self.label_18.setText(_translate("MainWindow", "Chế độ 18h"))
        self.checkBox_18h.setText(_translate("MainWindow", "18h"))
        self.checkBox_15h.setText(_translate("MainWindow", "15h"))
        self.checkBox_12h.setText(_translate("MainWindow", "12h"))
        self.checkBox_10h.setText(_translate("MainWindow", "10h"))
        self.checkBox_2h.setText(_translate("MainWindow", "2h"))
        self.checkBox_21h.setText(_translate("MainWindow", "21h"))
        self.checkBox_CNma.setText(_translate("MainWindow", "CN_max"))
        self.checkBox_CNmi.setText(_translate("MainWindow", "CN_Min"))
        self.Loadfilepython.setText(_translate("MainWindow", "..."))
        self.label_19.setText(_translate("MainWindow", "Load file Python công tác/ kết lưới có sẵn"))
        self.Tatcachedo1tuan.setText(_translate("MainWindow", "..."))
        self.label_13.setText(_translate("MainWindow", "Load từng file PSS/E của 1 tuần"))
        self.Run_Trip_Branch.setText(_translate("MainWindow", "Xuất .py đóng/cắt phần tử đã chọn"))
        self.Run_Power_Losses.setText(_translate("MainWindow", "Tính toán tổn thất"))
        self.label_20.setText(_translate("MainWindow", "Độ nhạy tăng/giảm"))
        self.label_21.setText(_translate("MainWindow", "% mang tải"))
        self.checkBox_vietsub.setText(_translate("MainWindow", "Vietsub"))
        self.checkBox_Canhbaodienap.setText(_translate("MainWindow", "Cảnh báo điện áp"))
        self.label_22.setText(_translate("MainWindow", "Chạy đơn 1 file .py:"))
        self.label_23.setText(_translate("MainWindow", "Chạy chế độ nhiều file .py:"))
        self.Loadmultiple_python.setText(_translate("MainWindow", "..."))
        self.Chon_Phan_Tu_Cat.setText(_translate("MainWindow", "Cắt phần tử"))
        self.Chon_Phan_Tu_Dong.setText(_translate("MainWindow", "Đóng phần tử"))
        self.chaydonfilepython.setText(_translate("MainWindow", "Đơn file .py"))
        self.chaydafilepython.setText(_translate("MainWindow", "Đa file .py"))
        self.chaytructieptuphantu.setText(_translate("MainWindow", "Trực tiếp từ các phần tử đã chọn"))
        self.Nap_Thong_So_A0.setText(_translate("MainWindow", "Nạp thông số A0 (> 28 ngày)"))
        self.ChongnayxemthsA0.setItemText(0, _translate("MainWindow", "Thứ 2"))
        self.ChongnayxemthsA0.setItemText(1, _translate("MainWindow", "Thứ 3"))
        self.ChongnayxemthsA0.setItemText(2, _translate("MainWindow", "Thứ 4"))
        self.ChongnayxemthsA0.setItemText(3, _translate("MainWindow", "Thứ 5"))
        self.ChongnayxemthsA0.setItemText(4, _translate("MainWindow", "Thứ 6"))
        self.ChongnayxemthsA0.setItemText(5, _translate("MainWindow", "Thứ 7"))
        self.ChongnayxemthsA0.setItemText(6, _translate("MainWindow", "Chủ Nhật"))
        self.Ve_DoThi_thongsoA0.setText(_translate("MainWindow", "Vẽ đồ thị từ thông số A0"))
        self.checkBox_phantram.setText(_translate("MainWindow", "% P"))
        self.checkBox_VethgsoPSSE.setText(_translate("MainWindow", "PSS/E"))
        self.PickFromTo.setItemText(0, _translate("MainWindow", "From"))
        self.PickFromTo.setItemText(1, _translate("MainWindow", "To"))
        self.comboBox.setItemText(0, _translate("MainWindow", "P"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Q"))
        self.comboBox.setItemText(2, _translate("MainWindow", "U"))
        self.comboBox.setItemText(3, _translate("MainWindow", "I"))
        self.comboBox.setItemText(4, _translate("MainWindow", "TAP"))
        self.Calculate_Short_Circuit.setText(_translate("MainWindow", "Tính toán ngắn mạch"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Grid), _translate("MainWindow", "Lưới điện"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Source), _translate("MainWindow", "Nguồn điện"))
        self.menufILE.setTitle(_translate("MainWindow", "File"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.menuChucnangkhac.setTitle(_translate("MainWindow", "Chức năng khác"))
        self.actionOpen.setText(_translate("MainWindow", "Mở sơ đồ lưới mới nhất"))
        self.actionSave_to_excel.setText(_translate("MainWindow", "Lưu kết quả TLCS ra file excel"))
        self.actionVersion.setText(_translate("MainWindow", "Version"))
        self.actionOPF_Calclulation.setText(_translate("MainWindow", "Tính toán OPF"))
        self.actionSensetive_Calculation.setText(_translate("MainWindow", "Tính toán độ nhạy"))
        self.actionDynamic_Calculation.setText(_translate("MainWindow", "Tính ổn định động"))
        self.actionPower_Flow_To_Cad.setText(_translate("MainWindow", "Xuất TLCS ra file CAD"))
        self.actionSave_ShortCircuit_To_Excel.setText(_translate("MainWindow", "Lưu kết quả tính toán ngắn mạch"))
        self.actionSave_Voltage_To_Excel.setText(_translate("MainWindow", "Lưu kết quả tính toán điện áp"))

#---------------BẮT ĐẦU TỪ ĐÂY LÀ NHỮNG CHỨC NĂNG CHÍNH CỦA PHẦN MỀM, CÁC DEF THỂ HIỆN TỪNG CHỨC NĂNG-------------------
        #Đọc dữ liệu từ file excel Vietsub với sheet name là branch
        data_grid = pd.read_excel("Vietsub.xlsx",sheet_name="Branch")
        data_grid = data_grid.values.tolist()
        #Đưa bảng lên GUI
        self.model = TableModel(data_grid)
        self.proxy_model = QSortFilterProxyModel()
        #Tìm kiếm dựa trên từ khóa nhập trên thanh tìm kiếm
        self.proxy_model.setFilterKeyColumn(-1) # Search all columns.
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)  # Không phân biệt chữ hoa chữ thường
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.sort(0, Qt.AscendingOrder) #Lọc ra các phần tử có chứa từ ứng với thanh tìm kiếm 
        self.bangcacphantu.setModel(self.proxy_model) 
        self.bangcacphantu.setColumnWidth(1, 150) 
        self.bangcacphantu.setColumnWidth(2, 150) 
        self.Timkiem_phantu.textChanged.connect(self.proxy_model.setFilterFixedString) #Đọc dữ liệu từ thanh tìm kiếm

        #Đọc dữ liệu từ file excel Vietsub với sheet name là branch
        data_source = pd.read_excel("Vietsub.xlsx",sheet_name="Source")
        data_source = data_source.values.tolist()
        #Đưa bảng lên GUI
        self.model = TableModel_2(data_source)
        self.proxy_model = QSortFilterProxyModel()
        #Tìm kiếm dựa trên từ khóa nhập trên thanh tìm kiếm
        self.proxy_model.setFilterKeyColumn(-1) # Search all columns.
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)  # Không phân biệt chữ hoa chữ thường
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.sort(0, Qt.AscendingOrder) #Lọc ra các phần tử có chứa từ ứng với thanh tìm kiếm 
        self.bangcacphantu_nguon.setModel(self.proxy_model) 
        self.bangcacphantu_nguon.setColumnWidth(1, 150) 
        self.bangcacphantu_nguon.setColumnWidth(3, 150) 
        self.Timkiem_phantu.textChanged.connect(self.proxy_model.setFilterFixedString) #Đọc dữ liệu từ thanh tìm kiếm        

    #------Chương trình chọn file sav chế độ 2h-----------------------
    def chonfilepsse2h(self):
        global psse_files_path_name_2h
        global psse_files_name_2h
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Sav file (*.sav *.raw)")
        dialog.exec()
        psse_files_path_name_2h = dialog.selectedFiles()
        if psse_files_path_name_2h:
            psse_files_name_2h = os.path.basename(psse_files_path_name_2h[0])
            psse_files_path_name_2h = psse_files_path_name_2h[0]
            str(psse_files_name_2h)
            self.Chedo2h.setText(_translate("MainWindow", psse_files_name_2h))
            self.text_outputbar.append(psse_files_path_name_2h[0])
        

   #-----------------------Chọn file 10h----------------------------------
    def chonfilepsse10h(self):
        global psse_files_path_name_10h
        global psse_files_name_10h
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Sav file (*.sav *.raw)")
        dialog.exec()
        psse_files_path_name_10h = dialog.selectedFiles()
        if psse_files_path_name_10h:
            psse_files_name_10h = os.path.basename(psse_files_path_name_10h[0])
            psse_files_path_name_10h = psse_files_path_name_10h[0]
            str(psse_files_name_10h)
            self.Chedo10h.setText(_translate("MainWindow", psse_files_name_10h))
    #-----------------------Chọn file psse 12h----------------------------------
    def chonfilepsse12h(self):
        global psse_files_path_name_12h
        global psse_files_name_12h
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Sav file (*.sav *.raw)")
        dialog.exec()
        psse_files_path_name_12h = dialog.selectedFiles()
        if psse_files_path_name_12h:
            psse_files_name_12h = os.path.basename(psse_files_path_name_12h[0])
            psse_files_path_name_12h = psse_files_path_name_12h[0]
            str(psse_files_name_12h)
            self.Chedo12h.setText(_translate("MainWindow", psse_files_name_12h))

    #----------------------Chọn file psse 15h -----------------------------------
    def chonfilepsse15h(self):
        global psse_files_path_name_15h
        global psse_files_name_15h
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Sav file (*.sav *.raw)")
        dialog.exec()
        psse_files_path_name_15h = dialog.selectedFiles()
        if psse_files_path_name_15h:
            psse_files_name_15h = os.path.basename(psse_files_path_name_15h[0])
            psse_files_path_name_15h = psse_files_path_name_15h[0]
            str(psse_files_name_15h)
            self.chedo15h.setText(_translate("MainWindow", psse_files_name_15h))
    
    #-------------------Chọn file sav psse 18h--------------------------------------
    def chonfilepsse18h(self):
        global psse_files_path_name_18h
        global psse_files_name_18h
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Sav file (*.sav *.raw)")
        dialog.exec()
        psse_files_path_name_18h = dialog.selectedFiles()
        if psse_files_path_name_18h:
            psse_files_name_18h = os.path.basename(psse_files_path_name_18h[0])
            psse_files_path_name_18h = psse_files_path_name_18h[0]
            str(psse_files_name_18h)
            self.chedo18h.setText(_translate("MainWindow", psse_files_name_18h))

    #--------------------------Chọn file psse 21h-------------------------------
    def chonfilepsse21h(self):
        global psse_files_path_name_21h
        global psse_files_name_21h
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Sav file (*.sav *.raw)")
        dialog.exec()
        psse_files_path_name_21h = dialog.selectedFiles()
        if psse_files_path_name_21h:
            psse_files_name_21h = os.path.basename(psse_files_path_name_21h[0])
            psse_files_path_name_21h = psse_files_path_name_21h[0]
            str(psse_files_name_21h)
            self.chedo21h.setText(_translate("MainWindow", psse_files_name_21h))

    #-------------------------------Chọn file PSSE CN Max--------------------------
    def chonfilepsseCNmax(self):
        global psse_files_path_name_CNMax
        global psse_files_name_CNMax
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Sav file (*.sav *.raw)")
        dialog.exec()
        psse_files_path_name_CNMax = dialog.selectedFiles()
        if psse_files_path_name_CNMax:
            psse_files_name_CNMax = os.path.basename(psse_files_path_name_CNMax[0])
            psse_files_path_name_CNMax = psse_files_path_name_CNMax[0]
            str(psse_files_name_CNMax)
            self.CNmax.setText(_translate("MainWindow", psse_files_name_CNMax))      

    #-------------------------------Chọn file psse CN min--------------------------
    def chonfilepsseCNmin(self):
        global psse_files_path_name_CNMin
        global psse_files_name_CNMin
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Sav file (*.sav *.raw)")
        dialog.exec()
        psse_files_path_name_CNMin = dialog.selectedFiles()
        if psse_files_path_name_CNMin:
            psse_files_name_CNMin = os.path.basename(psse_files_path_name_CNMin[0])
            psse_files_path_name_CNMin = psse_files_path_name_CNMin[0]
            str(psse_files_name_CNMin)
            self.CNmin.setText(_translate("MainWindow", psse_files_name_CNMin)) 

      #-------------------------------Chọn file python-------------------------
    
    #--------------------Chương trình chọn 1 file python để chạy vô 8 file này ------ 
    def chonfilepython(self):
        global psse_files_path_name_python
        global psse_files_name_python
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Python file (*.py *.idv)")
        dialog.exec()
        psse_files_path_name_python = dialog.selectedFiles()
        if psse_files_path_name_python:
            psse_files_name_python = os.path.basename(psse_files_path_name_python[0])
            psse_files_path_name_python = psse_files_path_name_python[0]
            str(psse_files_path_name_python)
            self.Loadfilepython.setText(_translate("MainWindow", psse_files_name_python)) 

    #-------------------------------Chạy file python trên tất cả các file psse-------------------------
    def chon_tat_ca_cac_che_do_1_tuan(self):
        #-------Định nghĩa các biến
        
        global psse_sav_multiple_files_path_name
        global psse_files_path_name_2h
        global psse_files_path_name_10h
        global psse_files_path_name_12h
        global psse_files_path_name_15h
        global psse_files_path_name_18h
        global psse_files_path_name_21h
        global psse_files_path_name_CNMax
        global psse_files_path_name_CNMin
        global psse_files_name_2h
        global psse_files_name_10h
        global psse_files_name_12h
        global psse_files_name_15h
        global psse_files_name_18h
        global psse_files_name_21h
        global psse_files_name_CNMax
        global psse_files_name_CNMin
        
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Sav file (*.sav *.raw)")
        dialog.setFileMode(QtWidgets.QFileDialog.ExistingFiles)
        dialog.exec()
        psse_sav_multiple_files_path_name = dialog.selectedFiles()
        if psse_sav_multiple_files_path_name:
            self.text_outputbar.append("-----------CÁC FILE .SAV CHỌN------------")  #Ghi tên file lên output bar
            
            #-------------2h-----------------

            psse_files_path_name_2h = (psse_sav_multiple_files_path_name[0]) #Lấy tên đường dẫn file .sav lúc 2h 
            psse_files_name_2h = os.path.basename(psse_sav_multiple_files_path_name[0])  #Tách tên file ra khỏi đường dẫn 
            str(psse_files_name_2h) #Đổi sang kiểu string
            self.Chedo2h.setText(_translate("MainWindow", psse_files_name_2h))  #Thay đổi tên khe chứa file .sav
            self.text_outputbar.append(psse_files_path_name_2h)  #Ghi tên file lên output bar

            #-------------10h-----------------
            psse_files_path_name_10h = (psse_sav_multiple_files_path_name[1])
            psse_files_name_10h = os.path.basename(psse_sav_multiple_files_path_name[1])
            str(psse_files_name_10h)
            self.Chedo10h.setText(_translate("MainWindow", psse_files_name_10h)) 
            self.text_outputbar.append(psse_files_path_name_10h)
            self.text_outputbar.append(psse_files_path_name_10h)  #Ghi tên file lên output bar

            #-------------12h-----------------
            psse_files_path_name_12h = (psse_sav_multiple_files_path_name[2])
            psse_files_name_12h = os.path.basename(psse_sav_multiple_files_path_name[2])
            str(psse_files_name_12h)
            self.Chedo12h.setText(_translate("MainWindow", psse_files_name_12h))
            self.text_outputbar.append(psse_files_path_name_12h)  #Ghi tên file lên output bar 

            #-------------15h-----------------
            psse_files_path_name_15h = (psse_sav_multiple_files_path_name[3])
            psse_files_name_15h = os.path.basename(psse_sav_multiple_files_path_name[3])
            str(psse_files_name_15h)
            self.chedo15h.setText(_translate("MainWindow", psse_files_name_15h))
            self.text_outputbar.append(psse_files_path_name_15h)  #Ghi tên file lên output bar  

            #-------------18h-----------------
            psse_files_path_name_18h = (psse_sav_multiple_files_path_name[4])  
            psse_files_name_18h = os.path.basename(psse_sav_multiple_files_path_name[4])
            str(psse_files_name_18h)
            self.chedo18h.setText(_translate("MainWindow", psse_files_name_18h))  #Thay đổi tên khay chứa file .sav
            self.text_outputbar.append(psse_files_path_name_18h)  #Ghi tên file lên output bar  

            #-------------21h-----------------
            psse_files_path_name_21h = (psse_sav_multiple_files_path_name[5])
            psse_files_name_21h = os.path.basename(psse_sav_multiple_files_path_name[5])
            str(psse_files_name_21h)
            self.chedo21h.setText(_translate("MainWindow", psse_files_name_21h))
            self.text_outputbar.append(psse_files_path_name_21h)  #Ghi tên file lên output bar   

            #-------------CNMax-----------------
            psse_files_path_name_CNMax = (psse_sav_multiple_files_path_name[6])
            psse_files_name_CNMax = os.path.basename(psse_sav_multiple_files_path_name[6])
            str(psse_files_name_CNMax)
            self.CNmax.setText(_translate("MainWindow", psse_files_name_CNMax))
            self.text_outputbar.append(psse_files_path_name_CNMax)  #Ghi tên file lên output bar    

            #-------------CNMax-----------------
            psse_files_path_name_CNMin = (psse_sav_multiple_files_path_name[7])
            psse_files_name_CNMin = os.path.basename(psse_sav_multiple_files_path_name[7])
            str(psse_files_name_CNMin)
            self.CNmin.setText(_translate("MainWindow", psse_files_name_CNMin))
            self.Tatcachedo1tuan.setText(_translate("MainWindow", psse_files_name_2h))
            self.text_outputbar.append(psse_files_path_name_CNMin)  #Ghi tên file lên output bar
        else:
            self.text_outputbar.append("-----------No file selected------------")  #Ghi tên file lên output bar

    #---------------------Nạp 28 ngày thông số A0 --------------------
    def Nap_28_ngay_Thong_So_A0(self):
        #Tạo 1 dataframe chứa đường dẫn của các file thông số A0 và thứ của các file này
        global scada_multiple_files
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Excel Scada file (*.xlsx *.xls)")
        dialog.setFileMode(QtWidgets.QFileDialog.ExistingFiles)
        dialog.exec()
        # Lấy đường dẫn của tất cả các fie 
        scada_multiple_files_path = dialog.selectedFiles()
        scada_multiple_files = pd.DataFrame(scada_multiple_files_path,columns=["Path"])
        # Lấy tên file 
        scada_multiple_file_name =  [Path(x).name for x in scada_multiple_files_path]
        scada_week_day =[]
        #Dò thứ của file là thứ mấy ?
        for i in range(len(scada_multiple_file_name)):
            date_str = scada_multiple_file_name[i][-14:-4]
            date_obj = datetime.strptime(date_str, '%d-%m-%Y')
            weekday = date_obj.strftime('%A')
            if weekday == "Monday":
                weekday = "Thứ 2"
            if weekday == "Tuesday":
                weekday = "Thứ 3"     
            if weekday == "Wednesday":
                weekday = "Thứ 4"    
            if weekday == "Thursday":
                weekday = "Thứ 5"
            if weekday == "Friday":
                weekday = "Thứ 6"
            if weekday == "Saturday":
                weekday = "Thứ 7"             
            if weekday == "Sunday":
                weekday = "Chủ Nhật"
            scada_week_day.append(weekday)              
        scada_week_day = pd.DataFrame(scada_week_day, columns=['Thứ'])
        scada_multiple_files = pd.concat([scada_multiple_files,scada_week_day],axis = 1 )
        self.Nap_Thong_So_A0.setStyleSheet("background-color : yellow")
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Hoàn thành")
        msg.setIcon(QMessageBox.Information)
        msg.setInformativeText("Đã lấy các file thông số A0")
        msg.exec()

    #------Chương trình này xuất excel ra với định dạng đẹp đẽ -------------------
    def export_to_excel_with_formatting(self,data, output_file):
        """
        Xuất dữ liệu ra file Excel với:
        - Auto scale cột theo nội dung thực tế
        - Tô màu xanh nhạt hàng đầu tiên
        - Tăng chiều cao hàng đầu lên 68.2 và bật wrap text
        """
        with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
            df = pd.DataFrame(data)
            df.to_excel(writer, index=False, sheet_name="Kết quả")
            
            workbook = writer.book
            worksheet = writer.sheets["Kết quả"]
            
            # Định dạng chung
            border_format = workbook.add_format({
                'border': 1,
                'font_name': 'Times New Roman'
            })
            header_format = workbook.add_format({
                'bg_color': '#D0F0C0',
                'border': 1,
                'bold': True,
                'font_name': 'Times New Roman',
                'text_wrap': True,  # Bật wrap text
                'align': 'center',  # Căn giữa nội dung
                'valign': 'vcenter'  # Căn giữa theo chiều dọc
            })
            
            # Tăng chiều cao hàng đầu tiên lên 68.2
            worksheet.set_row(0, 68.2)

            # Kẻ ô (border) và định dạng các ô
            for row_idx in range(len(df) + 1):  # +1 vì có header
                for col_idx in range(len(df.columns)):
                    fmt = header_format if row_idx == 0 else border_format
                    worksheet.write(row_idx, col_idx, df.iloc[row_idx - 1, col_idx] if row_idx > 0 else df.columns[col_idx], fmt)

            # Auto scale các cột theo nội dung thực tế
            for idx, col in enumerate(df.columns):
                max_len = max(df[col].astype(str).map(len).max(), len(col)) + 2
                worksheet.set_column(idx, idx, max_len)

            print(f"Dữ liệu đã được lưu tại '{output_file}' với định dạng.")


    #------------Chương trình này xuất dòng ngắn mạch ra bảng excel -------------------------
    def xuat_ket_qua_ngan_mach_cac_nut_duoc_chon_ra_excel(self):
        data = pd.read_excel("Vietsub.xlsx", sheet_name="Lib_Bus")
        data = data.values.tolist() 
        class ShortCircuitApp(QDialog):
            def __init__(self,data):
                super().__init__()
                self.setWindowTitle("Chọn Nút Tính Ngắn Mạch - Tính toán tại khe file 2h")
                self.setGeometry(200, 200, 900, 500)

                # Layout chính
                main_layout = QVBoxLayout()
                self.data = data
                self.selected_excel_data = []
                # Thanh tìm kiếm
                self.search_bar = QLineEdit(self)
                self.search_bar.setPlaceholderText("🔍 Nhập để tìm kiếm nút...")
                main_layout.addWidget(self.search_bar)

                # Model và Proxy Model
                self.model = QStandardItemModel()
                
                self.proxy_model = QSortFilterProxyModel()
                self.proxy_model.setSourceModel(self.model)
                self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)
                self.proxy_model.setFilterKeyColumn(-1)  # Search all columns.
                self.model.setHorizontalHeaderLabels(["Số nút", "Tên nút", "Điện áp", "Tỉnh thành"])


                # Layout chứa bảng và nút điều khiển
                table_layout = QHBoxLayout()

                # Điền dữ liệu vào model
                for row_data in data:
                    items = [QStandardItem(str(value)) for value in row_data]
                    self.model.appendRow(items)

                # Bảng chứa danh sách các nút đọc từ file
                self.table_available = QTableView(self)  # Dùng QTableView thay vì QTableWidget
                self.table_available.setModel(self.proxy_model)  # Đúng cú pháp
                self.table_available.setSortingEnabled(True)  # Cho phép sắp xếp                
                self.table_available.setSelectionBehavior(QTableWidget.SelectRows)
                table_layout.addWidget(self.table_available)
                self.table_available.setColumnWidth(2, 70)  # Cột "Điện áp" ngắn lại
                self.table_available.setColumnWidth(0, 70)  # Cột "Số nút" ngắn lại

                # Kết nối tìm kiếm tổng
                self.search_bar.textChanged.connect(self.proxy_model.setFilterFixedString)
                
                # Nút chuyển giữa các bảng
                button_layout = QVBoxLayout()
                self.btn_select = QPushButton(">> Chọn >>")
                self.btn_remove = QPushButton("<< Xóa <<")
                self.btn_execute = QPushButton("⚡ Thực thi tính toán")

                button_layout.addWidget(self.btn_select)
                button_layout.addWidget(self.btn_remove)
                button_layout.addStretch()
                button_layout.addWidget(self.btn_execute)

                table_layout.addLayout(button_layout)

                # Bảng chứa danh sách các nút đã chọn
                self.table_selected = QTableWidget(self)
                self.table_selected.setColumnCount(4)
                self.table_selected.setHorizontalHeaderLabels(["Số nút", "Tên nút", "Điện áp", "Tỉnh thành"])
                
                self.table_selected.setSortingEnabled(True)  # Cho phép sắp xếp                
                self.table_selected.setSelectionBehavior(QTableWidget.SelectRows)
                table_layout.addWidget(self.table_selected)
                self.table_selected.setColumnWidth(2, 70)  # Cột "Điện áp" ngắn lại
                self.table_selected.setColumnWidth(0, 70)  # Cột "Số nút" ngắn lại
                
                main_layout.addLayout(table_layout)
                self.setLayout(main_layout)

                main_layout.addWidget(self.create_filter_row())  # Thêm hàng filter
                # Kết nối sự kiện nút bấm
                self.btn_select.clicked.connect(self.move_to_selected)
                self.btn_remove.clicked.connect(self.remove_from_selected)
                self.btn_execute.clicked.connect(self.save_results)


            def apply_filters(self):
                voltage_filter = self.filter_voltage.currentText()
                location_filter = self.filter_location.currentText()

                self.proxy_model.setFilterFixedString("")
                
                def custom_filter(index):
                    voltage_match = (voltage_filter == "Tất cả" or self.model.item(index.row(), 2).text() == voltage_filter)
                    location_match = (location_filter == "Tất cả" or self.model.item(index.row(), 3).text() == location_filter)
                    return voltage_match and location_match

                self.proxy_model.setFilterAcceptsRow(custom_filter)


            def filter_nodes(self):
                """Lọc danh sách nút theo từ khóa nhập vào thanh tìm kiếm."""
                keyword = self.search_bar.text().strip().lower()
                filtered_nodes = [node for node in self.nodes if keyword in str(node).lower()]
                self.populate_table(self.table_available, filtered_nodes)

            def move_to_selected(self):
                """Di chuyển mục được chọn từ bảng nguồn sang bảng đích."""
                selected_indexes = self.table_available.selectionModel().selectedRows()
                if not selected_indexes:
                    return  # Không có dòng nào được chọn

                for index in selected_indexes:
                    row_position = self.table_selected.rowCount()
                    self.table_selected.insertRow(row_position)

                    # Lấy dữ liệu từ tất cả các cột
                    for col in range(self.model.columnCount()):
                        cell_value = self.proxy_model.data(self.proxy_model.index(index.row(), col))
                        self.table_selected.setItem(row_position, col, QTableWidgetItem(cell_value))


                # Xóa khỏi bảng nguồn (có thể cần logic để cập nhật lại model)
            def remove_from_selected(self):
                """Di chuyển mục được chọn từ bảng đích về bảng nguồn."""
                selected_indexes = self.table_selected.selectionModel().selectedRows()
                if not selected_indexes:
                    return

                for index in sorted(selected_indexes, key=lambda x: x.row(), reverse=True):
                    row_data = [self.table_selected.item(index.row(), col).text() for col in range(self.table_selected.columnCount())]

                    # Thêm lại vào bảng nguồn
                    row_position = self.model.rowCount()
                    self.model.insertRow(row_position)
                    for col, text in enumerate(row_data):
                        self.model.setItem(row_position, col, QStandardItem(text))

                    # Xóa khỏi bảng đích
                    self.table_selected.removeRow(index.row())

            def create_filter_row(self):
                """Tạo hàng filter bằng các QLineEdit cho các cột chỉ định."""
                filter_widget = QWidget()
                filter_layout = QGridLayout(filter_widget)
                self.column_filters = {}

                # Danh sách các cột cần filter (đánh số từ 0)
                filter_columns = {0:"Số nút",
                                  1: "Tên nút", 2: "Điện áp", 3: "Tỉnh thành"}

                for col, name in filter_columns.items():
                    line_edit = QLineEdit()
                    line_edit.setPlaceholderText(f"Filter {name}")
                    line_edit.textChanged.connect(lambda text, c=col: self.filter_column(c, text))
                    self.column_filters[col] = line_edit
                    filter_layout.addWidget(line_edit, 0, col)

                return filter_widget

            def save_results(self):
                # Lưu dữ liệu từ bảng bên phải
                self.selected_excel_data = []
                for row in range(self.table_selected.rowCount()):
                    row_data = [
                        self.table_selected.item(row, col).text()
                        for col in range(self.table_selected.columnCount())
                    ]
                    self.selected_excel_data.append(row_data)

                # Đóng popup
                self.accept()


            def filter_column(self, column, text):
                """Cập nhật bộ lọc cho từng cột."""
                self.proxy_model.setFilterKeyColumn(column)
                self.proxy_model.setFilterFixedString(text)
        dialog = ShortCircuitApp(data)
        if dialog.exec_() == ShortCircuitApp.Accepted:
            # Lấy dữ liệu từ popup
            selected_excel_data = dialog.selected_excel_data
            selected_excel_data = pd.DataFrame(selected_excel_data)
            # Mở hộp thoại để chọn đường dẫn và tên file
            file_excel_path, file_excel_name = QFileDialog.getSaveFileName(None, "Lưu File Excel", "", "Excel Files (*.xlsx)")
            
            if not file_excel_path:
                QMessageBox.warning(None, "Cảnh báo", "Bạn chưa chọn đường dẫn để lưu file.")
                return
            
            # Kiểm tra nếu người dùng chưa thêm đuôi file .xlsx
            if not file_excel_path.endswith(".xlsx"):
                file_excel_path += ".xlsx"
            
            # Danh sách để lưu dữ liệu
            data_to_export_to_excel = []

            # Duyệt qua từng hàng trong bảng phải
            for row in range(selected_excel_data.shape[0]):
                # Lấy dữ liệu từ các cột cần thiết (giả sử cột 0 là Loại, cột 1 là FROM, cột 2 là TO)
                bus_number = selected_excel_data.iloc[row, 0] 
                bus_name = selected_excel_data.iloc[row, 1] 
                voltage_of_bus = selected_excel_data.iloc[row, 2]
                zone_of_bus = selected_excel_data.iloc[row, 3] 

                # Thêm dữ liệu vào danh sách
                data_to_export_to_excel.append({
                    "Nút số": bus_number,
                    "Tên nút": bus_name,
                    "Điện áp": voltage_of_bus,
                    "Tỉnh thành": zone_of_bus,
                    
                })
            data_to_export_to_excel = pd.DataFrame(data_to_export_to_excel)
            data_to_export_to_excel.fillna(0,inplace=True)
            psspy.psseinit(500000)
            #Đoạn này load file GIF xoay vòng vòng
            movie = QMovie("Loading.gif")
            self.loading.setMovie(movie)
            movie.start()
            QGuiApplication.processEvents() 
            #Đặt thanh progress bar về giá trị 0
            self.progressBar.setValue(0)

            #Đếm số file sav cần chạy và số file sav đã chạy 
            so_file_sav_can_chay= self.checkBox_2h.isChecked() + self.checkBox_10h.isChecked() + self.checkBox_12h.isChecked() +self.checkBox_15h.isChecked() +self.checkBox_18h.isChecked() +self.checkBox_21h.isChecked() +self.checkBox_CNma.isChecked() + self.checkBox_CNmi.isChecked()
            so_file_sav_da_chay = 0
            so_nut_can_tinh_toan = len(data_to_export_to_excel)
            so_nut_da_tinh_toan = 0
            #Chạy file 2h
            if self.checkBox_2h.isChecked() == 1:
                psspy.psseinit(50000) 
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                psspy.case(psse_files_path_name_2h)
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    bus_number = int(data_to_export_to_excel.loc[row,"Nút số"])
                    ierr = psspy.bsys(1, 0, [0.0, 0.0], 0, [], 5, [bus_number], 0, [], 0, []) #Gom các nút tính toán vô
                    sid = 1        #Các nút tính toán chung 1 system
                    all = 0         
                    flt3ph  = 1     # Tính toán ngắn mạch 3 pha
                    fltlg   = 1     # Tính toán ngắn mạch 1 pha
                    fltllg  = 0       #Tính toán ngắn mạch 2 pha
                    fltll   = 0       #Tính toán ngán mạch 1 pha
                    linout  = 0       #
                    linend  = 0       #
                    voltop  = 0       #
                    genxop  = 0       #
                    tpunty  = 0       #
                    dcload  = 0       #
                    zcorec  = 0       #
                    lnchrg  = 0       #
                    shntop  = 0       #
                    loadop  = 0       #
                    machpq  = 0       #
                    volts   = 1.0     #Điện áp khi tính toán
                    relfile = ""
                    fcdfile = ""
                    scfile  = ""        # call pssarrays
                    #Dòng này thực hiện các tính toán ngắn mạch
                    rlst = pssarrays.ascc_currents(sid=sid, all=all, flt3ph=flt3ph, fltlg=fltlg, fltllg=fltllg,
                                                fltll=fltll, linout=linout, linend=linend, voltop=voltop,
                                                genxop=genxop, tpunty=tpunty, dcload=dcload, zcorec=zcorec,
                                                lnchrg=lnchrg, shntop=shntop, loadop=loadop, machpq=machpq,
                                                volts=volts, relfile=relfile, fcdfile=fcdfile, scfile=scfile)
                    #Lấy dòng ngắn mạch 3 pha rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Inm 3 pha(kA)'] = round(rlst.flt3ph[0].ia.real / 1000, 2)
                    #Lấy dòng ngắn mạch 1 pha rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Inm 1 pha(kA)']= round((rlst.fltlg[0].ia.real)/1000,2)
                    so_nut_da_tinh_toan = so_nut_da_tinh_toan + 1
                    self.progressBar.setValue((so_nut_da_tinh_toan/so_nut_can_tinh_toan)*100) 
                    QGuiApplication.processEvents()  
                
                QGuiApplication.processEvents()  
            #Xuất kết quả này ra excel
            data_to_export_to_excel = data_to_export_to_excel.replace([float('inf'), float('-inf')], pd.NA)  # Thay Inf thành NaN
            data_to_export_to_excel = data_to_export_to_excel.fillna('')  # Thay NaN thành chuỗi rỗng
            self.export_to_excel_with_formatting(data_to_export_to_excel, file_excel_path) #Sử dụng hàm xuất dataframe ra excel
            movie.stop()
            QGuiApplication.processEvents()
            self.text_outputbar.append("-----------Đã lưu file tại {}------------".format(file_excel_path)) # Thêm vô outputbar 
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Đã xuất file excel")
            msg.setInformativeText("Đã lưu file tại {}".format(file_excel_path))
            msg.exec()
            
    #------------Chương trình này xuất điện áp các nút được chọn ra file excel
    def xuat_ket_qua_dien_ap_cac_nut_duoc_chon_ra_excel(self):
        data = pd.read_excel("Vietsub.xlsx", sheet_name="Lib_Bus")
        data = data.values.tolist() 
        class VoltageExportApp(QDialog):
            def __init__(self,data):
                super().__init__()
                self.setWindowTitle("Chọn Nút Tính toán Điện áp")
                self.setGeometry(200, 200, 900, 500)

                # Layout chính
                main_layout = QVBoxLayout()
                self.data = data
                self.selected_excel_data = []
                # Thanh tìm kiếm
                self.search_bar = QLineEdit(self)
                self.search_bar.setPlaceholderText("🔍 Nhập để tìm kiếm nút...")
                main_layout.addWidget(self.search_bar)

                # Model và Proxy Model
                self.model = QStandardItemModel()
                
                self.proxy_model = QSortFilterProxyModel()
                self.proxy_model.setSourceModel(self.model)
                self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)
                self.proxy_model.setFilterKeyColumn(-1)  # Search all columns.
                self.model.setHorizontalHeaderLabels(["Số nút", "Tên nút", "Điện áp", "Tỉnh thành"])


                # Layout chứa bảng và nút điều khiển
                table_layout = QHBoxLayout()

                # Điền dữ liệu vào model
                for row_data in data:
                    items = [QStandardItem(str(value)) for value in row_data]
                    self.model.appendRow(items)

                # Bảng chứa danh sách các nút đọc từ file
                self.table_available = QTableView(self)  # Dùng QTableView thay vì QTableWidget
                self.table_available.setModel(self.proxy_model)  # Đúng cú pháp
                self.table_available.setSortingEnabled(True)  # Cho phép sắp xếp                
                self.table_available.setSelectionBehavior(QTableWidget.SelectRows)
                table_layout.addWidget(self.table_available)
                self.table_available.setColumnWidth(2, 70)  # Cột "Điện áp" ngắn lại
                self.table_available.setColumnWidth(0, 70)  # Cột "Số nút" ngắn lại

                # Kết nối tìm kiếm tổng
                self.search_bar.textChanged.connect(self.proxy_model.setFilterFixedString)
                
                # Nút chuyển giữa các bảng
                button_layout = QVBoxLayout()
                self.btn_select = QPushButton(">> Chọn >>")
                self.btn_remove = QPushButton("<< Xóa <<")
                self.btn_execute = QPushButton("⚡ Thực thi tính toán")

                button_layout.addWidget(self.btn_select)
                button_layout.addWidget(self.btn_remove)
                button_layout.addStretch()
                button_layout.addWidget(self.btn_execute)

                table_layout.addLayout(button_layout)

                # Bảng chứa danh sách các nút đã chọn
                self.table_selected = QTableWidget(self)
                self.table_selected.setColumnCount(4)
                self.table_selected.setHorizontalHeaderLabels(["Số nút", "Tên nút", "Điện áp", "Tỉnh thành"])
                
                self.table_selected.setSortingEnabled(True)  # Cho phép sắp xếp                
                self.table_selected.setSelectionBehavior(QTableWidget.SelectRows)
                table_layout.addWidget(self.table_selected)
                self.table_selected.setColumnWidth(2, 70)  # Cột "Điện áp" ngắn lại
                self.table_selected.setColumnWidth(0, 70)  # Cột "Số nút" ngắn lại
                
                main_layout.addLayout(table_layout)
                self.setLayout(main_layout)

                main_layout.addWidget(self.create_filter_row())  # Thêm hàng filter
                # Kết nối sự kiện nút bấm
                self.btn_select.clicked.connect(self.move_to_selected)
                self.btn_remove.clicked.connect(self.remove_from_selected)
                self.btn_execute.clicked.connect(self.save_results)


            def apply_filters(self):
                voltage_filter = self.filter_voltage.currentText()
                location_filter = self.filter_location.currentText()

                self.proxy_model.setFilterFixedString("")
                
                def custom_filter(index):
                    voltage_match = (voltage_filter == "Tất cả" or self.model.item(index.row(), 2).text() == voltage_filter)
                    location_match = (location_filter == "Tất cả" or self.model.item(index.row(), 3).text() == location_filter)
                    return voltage_match and location_match

                self.proxy_model.setFilterAcceptsRow(custom_filter)


            def filter_nodes(self):
                """Lọc danh sách nút theo từ khóa nhập vào thanh tìm kiếm."""
                keyword = self.search_bar.text().strip().lower()
                filtered_nodes = [node for node in self.nodes if keyword in str(node).lower()]
                self.populate_table(self.table_available, filtered_nodes)

            def move_to_selected(self):
                """Di chuyển mục được chọn từ bảng nguồn sang bảng đích."""
                selected_indexes = self.table_available.selectionModel().selectedRows()
                if not selected_indexes:
                    return  # Không có dòng nào được chọn

                for index in selected_indexes:
                    row_position = self.table_selected.rowCount()
                    self.table_selected.insertRow(row_position)

                    # Lấy dữ liệu từ tất cả các cột
                    for col in range(self.model.columnCount()):
                        cell_value = self.proxy_model.data(self.proxy_model.index(index.row(), col))
                        self.table_selected.setItem(row_position, col, QTableWidgetItem(cell_value))


                # Xóa khỏi bảng nguồn (có thể cần logic để cập nhật lại model)
            def remove_from_selected(self):
                """Di chuyển mục được chọn từ bảng đích về bảng nguồn."""
                selected_indexes = self.table_selected.selectionModel().selectedRows()
                if not selected_indexes:
                    return

                for index in sorted(selected_indexes, key=lambda x: x.row(), reverse=True):
                    row_data = [self.table_selected.item(index.row(), col).text() for col in range(self.table_selected.columnCount())]

                    # Thêm lại vào bảng nguồn
                    row_position = self.model.rowCount()
                    self.model.insertRow(row_position)
                    for col, text in enumerate(row_data):
                        self.model.setItem(row_position, col, QStandardItem(text))

                    # Xóa khỏi bảng đích
                    self.table_selected.removeRow(index.row())

            def create_filter_row(self):
                """Tạo hàng filter bằng các QLineEdit cho các cột chỉ định."""
                filter_widget = QWidget()
                filter_layout = QGridLayout(filter_widget)
                self.column_filters = {}

                # Danh sách các cột cần filter (đánh số từ 0)
                filter_columns = {0:"Số nút",
                                  1: "Tên nút", 2: "Điện áp", 3: "Tỉnh thành"}

                for col, name in filter_columns.items():
                    line_edit = QLineEdit()
                    line_edit.setPlaceholderText(f"Filter {name}")
                    line_edit.textChanged.connect(lambda text, c=col: self.filter_column(c, text))
                    self.column_filters[col] = line_edit
                    filter_layout.addWidget(line_edit, 0, col)

                return filter_widget

            def save_results(self):
                # Lưu dữ liệu từ bảng bên phải
                self.selected_excel_data = []
                for row in range(self.table_selected.rowCount()):
                    row_data = [
                        self.table_selected.item(row, col).text()
                        for col in range(self.table_selected.columnCount())
                    ]
                    self.selected_excel_data.append(row_data)

                # Đóng popup
                self.accept()


            def filter_column(self, column, text):
                """Cập nhật bộ lọc cho từng cột."""
                self.proxy_model.setFilterKeyColumn(column)
                self.proxy_model.setFilterFixedString(text)
        dialog = VoltageExportApp(data)
        if dialog.exec_() == VoltageExportApp.Accepted:
            # Lấy dữ liệu từ popup
            selected_excel_data = dialog.selected_excel_data
            selected_excel_data = pd.DataFrame(selected_excel_data)
            # Mở hộp thoại để chọn đường dẫn và tên file
            file_excel_path, file_excel_name = QFileDialog.getSaveFileName(None, "Lưu File Excel", "", "Excel Files (*.xlsx)")
            
            if not file_excel_path:
                QMessageBox.warning(None, "Cảnh báo", "Bạn chưa chọn đường dẫn để lưu file.")
                return
            
            # Kiểm tra nếu người dùng chưa thêm đuôi file .xlsx
            if not file_excel_path.endswith(".xlsx"):
                file_excel_path += ".xlsx"
            
            # Danh sách để lưu dữ liệu
            data_to_export_to_excel = []

            # Duyệt qua từng hàng trong bảng phải
            for row in range(selected_excel_data.shape[0]):
                # Lấy dữ liệu từ các cột cần thiết (giả sử cột 0 là Loại, cột 1 là FROM, cột 2 là TO)
                bus_number = selected_excel_data.iloc[row, 0] 
                bus_name = selected_excel_data.iloc[row, 1] 
                voltage_of_bus = selected_excel_data.iloc[row, 2]
                zone_of_bus = selected_excel_data.iloc[row, 3] 

                # Thêm dữ liệu vào danh sách
                data_to_export_to_excel.append({
                    "Nút số": bus_number,
                    "Tên nút": bus_name,
                    "Điện áp": voltage_of_bus,
                    "Tỉnh thành": zone_of_bus,
                    
                })
            data_to_export_to_excel = pd.DataFrame(data_to_export_to_excel)
            data_to_export_to_excel.fillna(0,inplace=True)
            psspy.psseinit(500000)
            #Đoạn này load file GIF xoay vòng vòng
            movie = QMovie("Loading.gif")
            self.loading.setMovie(movie)
            movie.start()
            QGuiApplication.processEvents() 
            #Đặt thanh progress bar về giá trị 0
            self.progressBar.setValue(0)

            #Đếm số file sav cần chạy và số file sav đã chạy 
            so_file_sav_can_chay= self.checkBox_2h.isChecked() + self.checkBox_10h.isChecked() + self.checkBox_12h.isChecked() +self.checkBox_15h.isChecked() +self.checkBox_18h.isChecked() +self.checkBox_21h.isChecked() +self.checkBox_CNma.isChecked() + self.checkBox_CNmi.isChecked()
            so_file_sav_da_chay = 0

            #Chạy file 2h
            if self.checkBox_2h.isChecked() == 1:
                psspy.psseinit(50000) 
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                psspy.case(psse_files_path_name_2h)
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    bus_number = int(data_to_export_to_excel.loc[row,"Nút số"])
                    bus_voltage = round(pssras.bus_kv(bus_number),1)
                    #Lấy điện áp rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Điện áp nút(2h)-kV'] =  bus_voltage
                    so_file_sav_da_chay = so_file_sav_da_chay + 1
                self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100) 
                QGuiApplication.processEvents()  
            #Chạy file 10h
            if self.checkBox_10h.isChecked() == 1:
                psspy.psseinit(50000) 
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                psspy.case(psse_files_path_name_10h)
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    bus_number = int(data_to_export_to_excel.loc[row,"Nút số"])
                    bus_voltage = round(pssras.bus_kv(bus_number),1)
                    #Lấy điện áp rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Điện áp nút(10h)-kV'] =  bus_voltage
                so_file_sav_da_chay = so_file_sav_da_chay + 1
                self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100) 
                QGuiApplication.processEvents()  
            #Chạy file 12h             
            if self.checkBox_12h.isChecked() == 1:
                psspy.psseinit(50000) 
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                psspy.case(psse_files_path_name_12h)
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    bus_number = int(data_to_export_to_excel.loc[row,"Nút số"])
                    bus_voltage = round(pssras.bus_kv(bus_number),1)
                    #Lấy điện áp rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Điện áp nút(12h)-kV'] =  bus_voltage
                so_file_sav_da_chay = so_file_sav_da_chay + 1
                self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100) 
                QGuiApplication.processEvents()      
            #Chạy file 15h  
            if self.checkBox_15h.isChecked() == 1:
                psspy.psseinit(50000) 
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                psspy.case(psse_files_path_name_15h)
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    bus_number = int(data_to_export_to_excel.loc[row,"Nút số"])
                    bus_voltage = round(pssras.bus_kv(bus_number),1)
                    #Lấy điện áp rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Điện áp nút(15h)-kV'] =  bus_voltage
                so_file_sav_da_chay = so_file_sav_da_chay + 1
                self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100) 
                QGuiApplication.processEvents()  
            #Chạy file 18h  
            if self.checkBox_18h.isChecked() == 1:
                psspy.psseinit(50000) 
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                psspy.case(psse_files_path_name_18h)
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    bus_number = int(data_to_export_to_excel.loc[row,"Nút số"])
                    bus_voltage = round(pssras.bus_kv(bus_number),1)
                    #Lấy điện áp rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Điện áp nút(18h)-kV'] =  bus_voltage
                so_file_sav_da_chay = so_file_sav_da_chay + 1
                self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100) 
                QGuiApplication.processEvents()  
            #Chạy file 21h  
            if self.checkBox_21h.isChecked() == 1:
                psspy.psseinit(50000) 
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                psspy.case(psse_files_path_name_21h)
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    bus_number = int(data_to_export_to_excel.loc[row,"Nút số"])
                    bus_voltage = round(pssras.bus_kv(bus_number),1)
                    #Lấy điện áp rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Điện áp nút(21h)-kV'] =  bus_voltage
                so_file_sav_da_chay = so_file_sav_da_chay + 1
                self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100) 
                QGuiApplication.processEvents()  
            #Chạy file CNMax 
            if self.checkBox_CNma.isChecked() == 1:
                psspy.psseinit(50000) 
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                psspy.case(psse_files_path_name_CNMax)
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    bus_number = int(data_to_export_to_excel.loc[row,"Nút số"])
                    bus_voltage = round(pssras.bus_kv(bus_number),1)
                    #Lấy điện áp rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Điện áp nút(CNMax)-kV'] =  bus_voltage
                so_file_sav_da_chay = so_file_sav_da_chay + 1
                self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100) 
                QGuiApplication.processEvents()  
            #Chạy file CNMin 
            if self.checkBox_CNmi.isChecked() == 1:
                psspy.psseinit(50000) 
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                psspy.case(psse_files_path_name_CNMin)
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    bus_number = int(data_to_export_to_excel.loc[row,"Nút số"])
                    bus_voltage = round(pssras.bus_kv(bus_number),1)
                    #Lấy điện áp rồi thêm vào bảng
                    data_to_export_to_excel.loc[row,'Điện áp nút(CNMin)-kV'] =  bus_voltage
                so_file_sav_da_chay = so_file_sav_da_chay + 1
                self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100) 
                QGuiApplication.processEvents()                             
            #Xuất kết quả này ra excel
            data_to_export_to_excel = data_to_export_to_excel.replace([float('inf'), float('-inf')], pd.NA)  # Thay Inf thành NaN
            data_to_export_to_excel = data_to_export_to_excel.fillna('')  # Thay NaN thành chuỗi rỗng
            self.export_to_excel_with_formatting(data_to_export_to_excel, file_excel_path) #Sử dụng hàm xuất dataframe ra excel
            movie.stop()
            QGuiApplication.processEvents()
            self.text_outputbar.append("-----------Đã lưu file tại {}------------".format(file_excel_path)) # Thêm vô outputbar 
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Đã xuất file excel")
            msg.setInformativeText("Đã lưu file tại {}".format(file_excel_path))
            msg.exec()


    #---------Chương trình xuất kết quả trào lưu công suất các phần tử được chọn ra Excel từ PSS/E---------------
    def xuat_ket_qua_cong_tac_ra_excel_tu_cac_phantu_duoc_chon(self):
        # Đọc dữ liệu từ file Excel
        data = pd.read_excel("Vietsub.xlsx", sheet_name="Branch")
        data = data.values.tolist() 
        class DataSelectionPopup(QDialog):
            def __init__(self, data):
                super().__init__()
                self.setWindowTitle("Chọn các phần tử quan sát")
                self.setFixedSize(1200, 700)

                self.data = data
                self.selected_excel_data = []

                # Layout chính
                main_layout = QVBoxLayout(self)

                # Thanh tìm kiếm tổng
                self.search_bar = QLineEdit()
                self.search_bar.setPlaceholderText("Tìm kiếm tổng...")
                main_layout.addWidget(self.search_bar)

                # Model và Proxy Model
                self.model = QStandardItemModel()
                self.proxy_model = QSortFilterProxyModel()
                self.proxy_model.setSourceModel(self.model)
                self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)
                self.proxy_model.setFilterKeyColumn(-1)  # Search all columns.

                # Điền dữ liệu vào model
                for row_data in data:
                    items = [QStandardItem(str(value)) for value in row_data]
                    self.model.appendRow(items)

                # Bảng dữ liệu
                self.left_table_view = QTableView(self)
                self.left_table_view.setModel(self.proxy_model)
                self.left_table_view.setSortingEnabled(True)
                self.left_table_view.setSelectionBehavior(QTableView.SelectRows)

                main_layout.addWidget(self.create_filter_row())  # Thêm hàng filter
                main_layout.addWidget(self.left_table_view)

                # Kết nối tìm kiếm tổng
                self.search_bar.textChanged.connect(self.proxy_model.setFilterFixedString)

                # Nút chọn và xóa
                button_layout = QHBoxLayout()
                select_button = QPushButton("Chọn >>")
                select_button.clicked.connect(self.add_selected_rows)
                button_layout.addWidget(select_button)

                remove_button = QPushButton("<< Xóa")
                remove_button.clicked.connect(self.remove_selected_rows)
                button_layout.addWidget(remove_button)

                main_layout.addLayout(button_layout)

                # Bảng kết quả
                self.right_table_view = QTableView(self)
                self.right_table_model = QStandardItemModel()
                self.right_table_view.setModel(self.right_table_model)
                self.right_table_model.setHorizontalHeaderLabels([
                    "Loại(chọn)", "From(Chọn)", "To(Chọn)", "From Bus(Chọn)",
                    "Fr-BusName", "To Bus(Chọn)", "To-Busname", "3rd Bus (chọn)",
                    "ID(Chọn)", "Điện áp(Chọn)"
                ])
                self.right_table_view.setSelectionBehavior(QTableView.SelectRows)
                main_layout.addWidget(self.right_table_view)

                # Nút lưu kết quả
                save_button = QPushButton("Chạy công tác và lưu kết quả ra 1 file excel")
                save_button.clicked.connect(self.save_results)
                main_layout.addWidget(save_button)


            def create_filter_row(self):
                """Tạo hàng filter bằng các QLineEdit cho các cột chỉ định."""
                filter_widget = QWidget()
                filter_layout = QGridLayout(filter_widget)
                self.column_filters = {}

                # Danh sách các cột cần filter (đánh số từ 0)
                filter_columns = {0:"Loại",
                                  1: "From", 2: "To", 3: "From Bus", 4: "To Bus", 9: "ID", 10: "Điện áp", 15: "Tỉnh"}

                for col, name in filter_columns.items():
                    line_edit = QLineEdit()
                    line_edit.setPlaceholderText(f"Filter {name}")
                    line_edit.textChanged.connect(lambda text, c=col: self.filter_column(c, text))
                    self.column_filters[col] = line_edit
                    filter_layout.addWidget(line_edit, 0, col)

                return filter_widget

            def filter_column(self, column, text):
                """Cập nhật bộ lọc cho từng cột."""
                self.proxy_model.setFilterKeyColumn(column)
                self.proxy_model.setFilterFixedString(text)


            #Chương trình này add các dòng được chọn vô bảng phía dưới
            def add_selected_rows(self):
                selected_indexes = self.left_table_view.selectionModel().selectedRows()
                for index in selected_indexes:
                    row_data = [
                        self.proxy_model.data(self.proxy_model.index(index.row(), col))
                        for col in range(self.proxy_model.columnCount())
                    ]
                    self.right_table_model.appendRow([QStandardItem(str(value)) for value in row_data])
            #Chương trình này xóa các dòng được chọn
            def remove_selected_rows(self):
                selected_indexes = self.right_table_view.selectionModel().selectedRows()
                for index in sorted(selected_indexes, reverse=True):
                    self.right_table_model.removeRow(index.row())

            def init_shortcuts(self):
                # Phím tắt Ctrl+C để sao chép
                copy_shortcut = QShortcut(QKeySequence("Ctrl+C"), self)
                copy_shortcut.activated.connect(self.copy_selection_to_clipboard)

                # Phím tắt Ctrl+V để dán
                paste_shortcut = QShortcut(QKeySequence("Ctrl+V"), self)
                paste_shortcut.activated.connect(self.paste_from_clipboard)

            #Chương trình này dùng để copy các ô
            def copy_selection_to_clipboard(self):
                # Lấy các ô được chọn
                selected_ranges = self.right_table_model.selectedRanges()
                if not selected_ranges:
                    return
                #Tạo clipboard data
                clipboard_data = []
                for selected_range in selected_ranges: #Vòng lặp để lấy dữ liệu copy
                    for row in range(selected_range.topRow(), selected_range.bottomRow() + 1):
                        row_data = []
                        for column in range(selected_range.leftColumn(), selected_range.rightColumn() + 1):
                            item = self.table_widget.item(row, column)
                            row_data.append(item.text() if item else "")
                        clipboard_data.append("\t".join(row_data))  # Sử dụng tab để phân cách các cột
                QApplication.clipboard().setText("\n".join(clipboard_data))  # Copy vào clipboard
            #Chương trình này dùng để dán các phần tử 
            def paste_from_clipboard(self):
                # Lấy dữ liệu từ clipboard
                clipboard = QApplication.clipboard()
                clipboard_data = clipboard.text()

                if not clipboard_data:
                    return

                # Chia dữ liệu theo dòng và cột
                rows = clipboard_data.split("\n")
                rows = [row.split("\t") for row in rows if row]

                # Lấy ô được chọn đầu tiên
                selected_range = self.right_table_model.selectedRanges()[0] if self.right_table_model.selectedRanges() else None
                start_row = selected_range.topRow() if selected_range else 0
                start_column = selected_range.leftColumn() if selected_range else 0

                # Dán dữ liệu vào bảng
                for i, row_data in enumerate(rows):
                    for j, value in enumerate(row_data):
                        row = start_row + i
                        column = start_column + j
                        if row < self.right_table_model.rowCount() and column < self.right_table_model.columnCount():
                            self.right_table_model.setItem(row, column, QTableWidgetItem(value))
            #Chương trình này đem các phần tử đã chọn ra 1 dataframe
            def save_results(self):
                # Lưu dữ liệu từ bảng bên phải
                self.selected_excel_data = []
                for row in range(self.right_table_model.rowCount()):
                    row_data = [
                        self.right_table_model.item(row, col).text()
                        for col in range(self.right_table_model.columnCount())
                    ]
                    self.selected_excel_data.append(row_data)

                # Đóng popup
                self.accept()

            # Chương trình này xuất excel từ dataframe với dữ liệu mong muốn
  

        dialog = DataSelectionPopup(data)
        if dialog.exec_() == DataSelectionPopup.Accepted:
            
            # Lấy dữ liệu từ popup
            selected_excel_data = dialog.selected_excel_data
            selected_excel_data = pd.DataFrame(selected_excel_data)
            # Mở hộp thoại để chọn đường dẫn và tên file
            file_excel_path, file_excel_name = QFileDialog.getSaveFileName(None, "Lưu File Excel", "", "Excel Files (*.xlsx)")
            
            if not file_excel_path:
                QMessageBox.warning(None, "Cảnh báo", "Bạn chưa chọn đường dẫn để lưu file.")
                return
            
            # Kiểm tra nếu người dùng chưa thêm đuôi file .xlsx
            if not file_excel_path.endswith(".xlsx"):
                file_excel_path += ".xlsx"
            
            # Danh sách để lưu dữ liệu
            data_to_export_to_excel = []

            # Duyệt qua từng hàng trong bảng phải
            for row in range(selected_excel_data.shape[0]):
                # Lấy dữ liệu từ các cột cần thiết
                item_type = selected_excel_data.iloc[row, 0]  # Loại
                from_bus_name = selected_excel_data.iloc[row, 1]  # Điểm đầu
                to_bus_name_or_mba_name = selected_excel_data.iloc[row, 2]  # Điểm cuối hoặc MBA
                from_bus = selected_excel_data.iloc[row, 3]  # Nút đầu
                to_bus = selected_excel_data.iloc[row, 5]  # Nút cuối
                mid_bus = selected_excel_data.iloc[row, 7]  # Cuộn trung
                id_of_item = selected_excel_data.iloc[row, 9]  # ID phần tử
                voltage_of_item = selected_excel_data.iloc[row, 10]  # Điện áp (kV)
                rating_of_item = selected_excel_data.iloc[row, 16]  # Công suất/ Dòng định mức

                # Xử lý dữ liệu theo loại phần tử
                if item_type == "Đường dây":
                    element_name = f"ĐD {from_bus_name} - {to_bus_name_or_mba_name}"
                    idm_value = rating_of_item  # Iđm(A)
                    sdm_value = " "  # Không có Sđm(MVA) cho Đường dây
                elif item_type == "MBA":
                    element_name = to_bus_name_or_mba_name # lấy tên MBA 
                    sdm_value = rating_of_item  # Sđm(MVA)
                    idm_value = " "  # Không có Iđm(A) cho MBA
                else:
                    continue  # Bỏ qua các loại khác nếu có

                # Thêm dữ liệu vào danh sách
                data_to_export_to_excel.append({
                    "Loại": item_type,
                    "Phần tử": element_name,
                    "Nút đầu": from_bus,
                    "Nút cuối": to_bus,
                    "Cuộn trung": mid_bus,
                    "ID": id_of_item,
                    "Điện áp (kV)": voltage_of_item,
                    "Sđm(MVA)": sdm_value,
                    "Iđm(A)": idm_value,
                })
            data_to_export_to_excel = pd.DataFrame(data_to_export_to_excel)
            data_to_export_to_excel.fillna(0,inplace=True)
            psspy.psseinit(500000)
            #Đoạn này load file GIF xoay vòng vòng
            movie = QMovie("Loading.gif")
            self.loading.setMovie(movie)
            movie.start()
            QGuiApplication.processEvents() 
            #Đặt thanh progress bar về giá trị 0
            self.progressBar.setValue(0)

            #Đếm số file sav cần chạy và số file sav đã chạy 
            so_file_sav_can_chay= self.checkBox_2h.isChecked() + self.checkBox_10h.isChecked() + self.checkBox_12h.isChecked() +self.checkBox_15h.isChecked() +self.checkBox_18h.isChecked() +self.checkBox_21h.isChecked() +self.checkBox_CNma.isChecked() + self.checkBox_CNmi.isChecked()
            so_file_sav_da_chay = 0
             
            #Chạy file 2h
            if self.checkBox_2h.isChecked() == 1:
                #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                try:
                    psse_files_path_name_2h
                #Báo chưa chọn đường dẫn đến file 
                except NameError:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Cảnh báo")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setInformativeText("Chưa chọn file 2h")
                    msg.exec()
                    return
                #Lấy tải của các đường dây/ mba trước khi có công tác
                psspy.case(psse_files_path_name_2h)
                #Đoạn này sẽ lấy mang tải các phần tử trước khi thực hiện công tác
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_2h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_2h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_2h_line,2)
                            q_mvar= round(q_mvar_2h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_2h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_2h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                            if q_mvar == 0 :
                                p_jq_phantu_2h_before = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 2h -Trước công tác']= p_jq_phantu_2h_before  #Add vô bảng kết quả                          
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 2h -Trước công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 2h -Trước công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 2h -Trước công tác']= "0.0 +j0.0"
                        
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_2h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_2h_line),1) # Làm tròn
                            phantram_mangtai_2h_before = str(pct_load) + "%" #Chuyển ra dạng chuỗi 
                            data_to_export_to_excel.loc[row,'Mang tải 2h(%)-Trước công tác']= phantram_mangtai_2h_before 
                        if ierr_pct ==3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 2h(%)-Trước công tác']= "0.0%"
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_2h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_2h = pq_mba_2h.real
                                q_mvar_2h = pq_mba_2h.imag
                                p_mw = round(p_mw_2h,2)
                                q_mvar = round(q_mvar_2h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_2h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_2h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_2h_before = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 2h -Trước công tác']= p_jq_phantu_2h_before # Thêm dữ liệu vào dataframe     

                            if ierr_p == 7:
                                data_to_export_to_excel.loc[row,'Mang tải 2h -Trước công tác']= "0.0 +j0.0"
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_2h_before = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 2h(%)-Trước công tác']= phantram_mangtai_2h_before  # Thêm dữ liệu vào dataframe                         
                            if ierr_pct ==7 : #Mba đang mở 
                                data_to_export_to_excel.loc[row,'Mang tải 2h(%)-Trước công tác']= "0.0%"  # Thêm dữ liệu vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                #Thực thi từng lệnh trong file python đã đọc 
                if self.chaydonfilepython.isChecked() == 1:
                    with open(psse_files_path_name_python) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu 

                #Thực hiện nhiều file .py đã chọn
                if self.chaydafilepython.isChecked() == 1:
                    for i in range(len(python_multiple_files_path_name)):
                        with open(python_multiple_files_path_name[i]) as f:
                            _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                            _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                            _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                            exec(f.read()) # Thực thi từng dòng trong file đã đọc
                            psspy.fdns()  # Chạy lại trào lưu   

                #Chạy trực tiếp từ file python tạo trên cửa sổ window
                if self.chaytructieptuphantu.isChecked() == 1:
                    Text = self.Python_to_run_PSSE.toPlainText()
                    _i = psspy.getdefaultint()
                    _f = psspy.getdefaultreal()
                    _s = psspy.getdefaultchar()
                    exec(Text)
                    psspy.fdns()                
                # Sau đó lấy mang tải và phần trăm mang tải sau công tác gộp vô bảng rồi xuất ra
                for row in range(len(data_to_export_to_excel)):
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_2h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_2h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_2h_line,2) #Làm tròn 2 chữ số
                            q_mvar= round(q_mvar_2h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_2h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_2h_after = str(p_mw) + " -j" + str(abs(q_mvar))                            
                            if q_mvar == 0 :
                                p_jq_phantu_2h_after = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 2h -Sau công tác']= p_jq_phantu_2h_after #Thêm vô bảng kết quả
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 2h -Sau công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 2h -Sau công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 2h -Sau công tác']= "0.0 +j0.0"
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_2h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_2h_line),1) # Làm tròn
                            phantram_mangtai_2h_after = str(pct_load) + "%"
                            data_to_export_to_excel.loc[row,'Mang tải 2h(%)-Sau công tác']= phantram_mangtai_2h_after   #Thêm dữ liệu mang tải vào dataframe         
                        if ierr_pct == 3:
                             data_to_export_to_excel.loc[row,'Mang tải 2h(%)-Sau công tác']= "0.0%"  # Thêm dữ liệu vào dataframe                            
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_2h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_2h = pq_mba_2h.real # Lấy phần tải thực của máy biến áp
                                q_mvar_2h = pq_mba_2h.imag #Lấy phần tải phản kháng của máy biến áp
                                p_mw = round(p_mw_2h,2)
                                q_mvar = round(q_mvar_2h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_2h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_2h_after = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_2h_after = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 2h -Sau công tác']= p_jq_phantu_2h_after
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_2h_after = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 2h(%)-Sau công tác']= phantram_mangtai_2h_after   #Thêm dữ liệu mang tải vào dataframe                              
                            if  ierr_pct ==7 :
                                data_to_export_to_excel.loc[row,'Mang tải 2h(%)-Sau công tác']= "0.0%"   #Thêm dữ liệu mang tải vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                    so_file_sav_da_chay = so_file_sav_da_chay +1
                    self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
                    QGuiApplication.processEvents() 

            #Chạy file 10h
            if self.checkBox_10h.isChecked() == 1:
                #Đoạn này để kiểm tra xem đã chọn file 10h hay chưa 
                try:
                    psse_files_path_name_10h
                #Báo chưa chọn đường dẫn đến file 
                except NameError:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Cảnh báo")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setInformativeText("Chưa chọn file 10h")
                    msg.exec()
                    return
                #Lấy tải của các đường dây/ mba trước khi có công tác
                psspy.case(psse_files_path_name_10h)
                #Đoạn này sẽ lấy mang tải các phần tử trước khi thực hiện công tác
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_10h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_10h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_10h_line,2)
                            q_mvar= round(q_mvar_10h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_10h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_10h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                            if q_mvar == 0 :
                                p_jq_phantu_10h_before = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 10h -Trước công tác']= p_jq_phantu_10h_before  #Add vô bảng kết quả                          
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 10h -Trước công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 10h -Trước công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 10h -Trước công tác']= "0.0 +j0.0"
                        
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_10h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_10h_line),1) # Làm tròn
                            phantram_mangtai_10h_before = str(pct_load) + "%" #Chuyển ra dạng chuỗi 
                            data_to_export_to_excel.loc[row,'Mang tải 10h(%)-Trước công tác']= phantram_mangtai_10h_before 
                        if ierr_pct ==3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 10h(%)-Trước công tác']= "0.0%"
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_10h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_10h = pq_mba_10h.real
                                q_mvar_10h = pq_mba_10h.imag
                                p_mw = round(p_mw_10h,2)
                                q_mvar = round(q_mvar_10h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_10h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_10h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_10h_before = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 10h -Trước công tác']= p_jq_phantu_10h_before # Thêm dữ liệu vào dataframe     

                            if ierr_p == 7:
                                data_to_export_to_excel.loc[row,'Mang tải 10h -Trước công tác']= "0.0 +j0.0"
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_10h_before = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 10h(%)-Trước công tác']= phantram_mangtai_10h_before  # Thêm dữ liệu vào dataframe                         
                            if ierr_pct ==7 : #Mba đang mở 
                                data_to_export_to_excel.loc[row,'Mang tải 10h(%)-Trước công tác']= "0.0%"  # Thêm dữ liệu vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                #Thực thi từng lệnh trong file python đã đọc 
                if self.chaydonfilepython.isChecked() == 1:
                    with open(psse_files_path_name_python) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu 

                #Thực hiện nhiều file .py đã chọn
                if self.chaydafilepython.isChecked() == 1:
                    for i in range(len(python_multiple_files_path_name)):
                        with open(python_multiple_files_path_name[i]) as f:
                            _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                            _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                            _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                            exec(f.read()) # Thực thi từng dòng trong file đã đọc
                            psspy.fdns()  # Chạy lại trào lưu   

                #Chạy trực tiếp từ file python tạo trên cửa sổ window
                if self.chaytructieptuphantu.isChecked() == 1:
                    Text = self.Python_to_run_PSSE.toPlainText()
                    _i = psspy.getdefaultint()
                    _f = psspy.getdefaultreal()
                    _s = psspy.getdefaultchar()
                    exec(Text)
                    psspy.fdns()                
                # Sau đó lấy mang tải và phần trăm mang tải sau công tác gộp vô bảng rồi xuất ra
                for row in range(len(data_to_export_to_excel)):
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_10h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_10h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_10h_line,2) #Làm tròn 2 chữ số
                            q_mvar= round(q_mvar_10h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_10h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_10h_after = str(p_mw) + " -j" + str(abs(q_mvar))                            
                            if q_mvar == 0 :
                                p_jq_phantu_10h_after = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 10h -Sau công tác']= p_jq_phantu_10h_after #Thêm vô bảng kết quả
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 10h -Sau công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 10h -Sau công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 10h -Sau công tác']= "0.0 +j0.0"
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_10h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_10h_line),1) # Làm tròn
                            phantram_mangtai_10h_after = str(pct_load) + "%"
                            data_to_export_to_excel.loc[row,'Mang tải 10h(%)-Sau công tác']= phantram_mangtai_10h_after   #Thêm dữ liệu mang tải vào dataframe         
                        if ierr_pct == 3:
                             data_to_export_to_excel.loc[row,'Mang tải 10h(%)-Sau công tác']= "0.0%"  # Thêm dữ liệu vào dataframe                            
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_10h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_10h = pq_mba_10h.real # Lấy phần tải thực của máy biến áp
                                q_mvar_10h = pq_mba_10h.imag #Lấy phần tải phản kháng của máy biến áp
                                p_mw = round(p_mw_10h,2)
                                q_mvar = round(q_mvar_10h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_10h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_10h_after = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_10h_after = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 10h -Sau công tác']= p_jq_phantu_10h_after
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_10h_after = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 10h(%)-Sau công tác']= phantram_mangtai_10h_after   #Thêm dữ liệu mang tải vào dataframe                              
                            if  ierr_pct ==7 :
                                data_to_export_to_excel.loc[row,'Mang tải 10h(%)-Sau công tác']= "0.0%"   #Thêm dữ liệu mang tải vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                    so_file_sav_da_chay = so_file_sav_da_chay +1
                    self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
                    QGuiApplication.processEvents() 

            #Chạy file 12h
            if self.checkBox_12h.isChecked() == 1:
                #Đoạn này để kiểm tra xem đã chọn file 12h hay chưa 
                try:
                    psse_files_path_name_12h
                #Báo chưa chọn đường dẫn đến file 
                except NameError:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Cảnh báo")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setInformativeText("Chưa chọn file 12h")
                    msg.exec()
                    return
                #Lấy tải của các đường dây/ mba trước khi có công tác
                psspy.case(psse_files_path_name_12h)
                #Đoạn này sẽ lấy mang tải các phần tử trước khi thực hiện công tác
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_12h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_12h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_12h_line,2)
                            q_mvar= round(q_mvar_12h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_12h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_12h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                            if q_mvar == 0 :
                                p_jq_phantu_12h_before = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 12h -Trước công tác']= p_jq_phantu_12h_before  #Add vô bảng kết quả                          
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 12h -Trước công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 12h -Trước công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 12h -Trước công tác']= "0.0 +j0.0"
                        
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_12h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_12h_line),1) # Làm tròn
                            phantram_mangtai_12h_before = str(pct_load) + "%" #Chuyển ra dạng chuỗi 
                            data_to_export_to_excel.loc[row,'Mang tải 12h(%)-Trước công tác']= phantram_mangtai_12h_before 
                        if ierr_pct ==3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 12h(%)-Trước công tác']= "0.0%"
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_12h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_12h = pq_mba_12h.real
                                q_mvar_12h = pq_mba_12h.imag
                                p_mw = round(p_mw_12h,2)
                                q_mvar = round(q_mvar_12h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_12h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_12h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_12h_before = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 12h -Trước công tác']= p_jq_phantu_12h_before # Thêm dữ liệu vào dataframe     

                            if ierr_p == 7:
                                data_to_export_to_excel.loc[row,'Mang tải 12h -Trước công tác']= "0.0 +j0.0"
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_12h_before = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 12h(%)-Trước công tác']= phantram_mangtai_12h_before  # Thêm dữ liệu vào dataframe                         
                            if ierr_pct ==7 : #Mba đang mở 
                                data_to_export_to_excel.loc[row,'Mang tải 12h(%)-Trước công tác']= "0.0%"  # Thêm dữ liệu vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                #Thực thi từng lệnh trong file python đã đọc 
                if self.chaydonfilepython.isChecked() == 1:
                    with open(psse_files_path_name_python) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu 

                #Thực hiện nhiều file .py đã chọn
                if self.chaydafilepython.isChecked() == 1:
                    for i in range(len(python_multiple_files_path_name)):
                        with open(python_multiple_files_path_name[i]) as f:
                            _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                            _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                            _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                            exec(f.read()) # Thực thi từng dòng trong file đã đọc
                            psspy.fdns()  # Chạy lại trào lưu   

                #Chạy trực tiếp từ file python tạo trên cửa sổ window
                if self.chaytructieptuphantu.isChecked() == 1:
                    Text = self.Python_to_run_PSSE.toPlainText()
                    _i = psspy.getdefaultint()
                    _f = psspy.getdefaultreal()
                    _s = psspy.getdefaultchar()
                    exec(Text)
                    psspy.fdns()                
                # Sau đó lấy mang tải và phần trăm mang tải sau công tác gộp vô bảng rồi xuất ra
                for row in range(len(data_to_export_to_excel)):
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_12h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_12h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_12h_line,2) #Làm tròn 2 chữ số
                            q_mvar= round(q_mvar_12h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_12h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_12h_after = str(p_mw) + " -j" + str(abs(q_mvar))                            
                            if q_mvar == 0 :
                                p_jq_phantu_12h_after = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 12h -Sau công tác']= p_jq_phantu_12h_after #Thêm vô bảng kết quả
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 12h -Sau công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 12h -Sau công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 12h -Sau công tác']= "0.0 +j0.0"
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_12h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_12h_line),1) # Làm tròn
                            phantram_mangtai_12h_after = str(pct_load) + "%"
                            data_to_export_to_excel.loc[row,'Mang tải 12h(%)-Sau công tác']= phantram_mangtai_12h_after   #Thêm dữ liệu mang tải vào dataframe         
                        if ierr_pct == 3:
                             data_to_export_to_excel.loc[row,'Mang tải 12h(%)-Sau công tác']= "0.0%"  # Thêm dữ liệu vào dataframe                            
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_12h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_12h = pq_mba_12h.real # Lấy phần tải thực của máy biến áp
                                q_mvar_12h = pq_mba_12h.imag #Lấy phần tải phản kháng của máy biến áp
                                p_mw = round(p_mw_12h,2)
                                q_mvar = round(q_mvar_12h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_12h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_12h_after = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_12h_after = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 12h -Sau công tác']= p_jq_phantu_12h_after
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_12h_after = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 12h(%)-Sau công tác']= phantram_mangtai_12h_after   #Thêm dữ liệu mang tải vào dataframe                              
                            if  ierr_pct ==7 :
                                data_to_export_to_excel.loc[row,'Mang tải 12h(%)-Sau công tác']= "0.0%"   #Thêm dữ liệu mang tải vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                    so_file_sav_da_chay = so_file_sav_da_chay +1
                    self.progressBar.setValue ((so_file_sav_da_chay/so_file_sav_can_chay)*100)
                    QGuiApplication.processEvents() 

            #Chạy file 15h
            if self.checkBox_15h.isChecked() == 1:
                #Đoạn này để kiểm tra xem đã chọn file 15h hay chưa 
                try:
                    psse_files_path_name_15h
                #Báo chưa chọn đường dẫn đến file 
                except NameError:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Cảnh báo")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setInformativeText("Chưa chọn file 15h")
                    msg.exec()
                    return
                #Lấy tải của các đường dây/ mba trước khi có công tác
                psspy.case(psse_files_path_name_15h)
                #Đoạn này sẽ lấy mang tải các phần tử trước khi thực hiện công tác
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_15h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_15h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_15h_line,2)
                            q_mvar= round(q_mvar_15h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_15h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_15h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                            if q_mvar == 0 :
                                p_jq_phantu_15h_before = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 15h -Trước công tác']= p_jq_phantu_15h_before  #Add vô bảng kết quả                          
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 15h -Trước công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 15h -Trước công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 15h -Trước công tác']= "0.0 +j0.0"
                        
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_15h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_15h_line),1) # Làm tròn
                            phantram_mangtai_15h_before = str(pct_load) + "%" #Chuyển ra dạng chuỗi 
                            data_to_export_to_excel.loc[row,'Mang tải 15h(%)-Trước công tác']= phantram_mangtai_15h_before 
                        if ierr_pct ==3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 15h(%)-Trước công tác']= "0.0%"
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_15h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_15h = pq_mba_15h.real
                                q_mvar_15h = pq_mba_15h.imag
                                p_mw = round(p_mw_15h,2)
                                q_mvar = round(q_mvar_15h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_15h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_15h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_15h_before = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 15h -Trước công tác']= p_jq_phantu_15h_before # Thêm dữ liệu vào dataframe     

                            if ierr_p == 7:
                                data_to_export_to_excel.loc[row,'Mang tải 15h -Trước công tác']= "0.0 +j0.0"
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_15h_before = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 15h(%)-Trước công tác']= phantram_mangtai_15h_before  # Thêm dữ liệu vào dataframe                         
                            if ierr_pct ==7 : #Mba đang mở 
                                data_to_export_to_excel.loc[row,'Mang tải 15h(%)-Trước công tác']= "0.0%"  # Thêm dữ liệu vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                #Thực thi từng lệnh trong file python đã đọc 
                if self.chaydonfilepython.isChecked() == 1:
                    with open(psse_files_path_name_python) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu 

                #Thực hiện nhiều file .py đã chọn
                if self.chaydafilepython.isChecked() == 1:
                    for i in range(len(python_multiple_files_path_name)):
                        with open(python_multiple_files_path_name[i]) as f:
                            _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                            _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                            _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                            exec(f.read()) # Thực thi từng dòng trong file đã đọc
                            psspy.fdns()  # Chạy lại trào lưu   

                #Chạy trực tiếp từ file python tạo trên cửa sổ window
                if self.chaytructieptuphantu.isChecked() == 1:
                    Text = self.Python_to_run_PSSE.toPlainText()
                    _i = psspy.getdefaultint()
                    _f = psspy.getdefaultreal()
                    _s = psspy.getdefaultchar()
                    exec(Text)
                    psspy.fdns()                
                # Sau đó lấy mang tải và phần trăm mang tải sau công tác gộp vô bảng rồi xuất ra
                for row in range(len(data_to_export_to_excel)):
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_15h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_15h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_15h_line,2) #Làm tròn 2 chữ số
                            q_mvar= round(q_mvar_15h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_15h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_15h_after = str(p_mw) + " -j" + str(abs(q_mvar))                            
                            if q_mvar == 0 :
                                p_jq_phantu_15h_after = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 15h -Sau công tác']= p_jq_phantu_15h_after #Thêm vô bảng kết quả
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 15h -Sau công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 15h -Sau công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 15h -Sau công tác']= "0.0 +j0.0"
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_15h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_15h_line),1) # Làm tròn
                            phantram_mangtai_15h_after = str(pct_load) + "%"
                            data_to_export_to_excel.loc[row,'Mang tải 15h(%)-Sau công tác']= phantram_mangtai_15h_after   #Thêm dữ liệu mang tải vào dataframe         
                        if ierr_pct == 3:
                             data_to_export_to_excel.loc[row,'Mang tải 15h(%)-Sau công tác']= "0.0%"  # Thêm dữ liệu vào dataframe                            
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_15h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_15h = pq_mba_15h.real # Lấy phần tải thực của máy biến áp
                                q_mvar_15h = pq_mba_15h.imag #Lấy phần tải phản kháng của máy biến áp
                                p_mw = round(p_mw_15h,2)
                                q_mvar = round(q_mvar_15h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_15h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_15h_after = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_15h_after = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 15h -Sau công tác']= p_jq_phantu_15h_after
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_15h_after = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 15h(%)-Sau công tác']= phantram_mangtai_15h_after   #Thêm dữ liệu mang tải vào dataframe                              
                            if  ierr_pct ==7 :
                                data_to_export_to_excel.loc[row,'Mang tải 15h(%)-Sau công tác']= "0.0%"   #Thêm dữ liệu mang tải vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                    so_file_sav_da_chay = so_file_sav_da_chay +1
                    self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
                    QGuiApplication.processEvents() 

            #Chạy file 18h
            if self.checkBox_18h.isChecked() == 1:
                #Đoạn này để kiểm tra xem đã chọn file 18h hay chưa 
                try:
                    psse_files_path_name_18h
                #Báo chưa chọn đường dẫn đến file 
                except NameError:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Cảnh báo")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setInformativeText("Chưa chọn file 18h")
                    msg.exec()
                    return
                #Lấy tải của các đường dây/ mba trước khi có công tác
                psspy.case(psse_files_path_name_18h)
                #Đoạn này sẽ lấy mang tải các phần tử trước khi thực hiện công tác
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_18h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_18h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_18h_line,2)
                            q_mvar= round(q_mvar_18h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_18h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_18h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                            if q_mvar == 0 :
                                p_jq_phantu_18h_before = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 18h -Trước công tác']= p_jq_phantu_18h_before  #Add vô bảng kết quả                          
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 18h -Trước công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 18h -Trước công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 18h -Trước công tác']= "0.0 +j0.0"
                        
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_18h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_18h_line),1) # Làm tròn
                            phantram_mangtai_18h_before = str(pct_load) + "%" #Chuyển ra dạng chuỗi 
                            data_to_export_to_excel.loc[row,'Mang tải 18h(%)-Trước công tác']= phantram_mangtai_18h_before 
                        if ierr_pct ==3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 18h(%)-Trước công tác']= "0.0%"
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_18h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_18h = pq_mba_18h.real
                                q_mvar_18h = pq_mba_18h.imag
                                p_mw = round(p_mw_18h,2)
                                q_mvar = round(q_mvar_18h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_18h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_18h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_18h_before = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 18h -Trước công tác']= p_jq_phantu_18h_before # Thêm dữ liệu vào dataframe     

                            if ierr_p == 7:
                                data_to_export_to_excel.loc[row,'Mang tải 18h -Trước công tác']= "0.0 +j0.0"
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_18h_before = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 18h(%)-Trước công tác']= phantram_mangtai_18h_before  # Thêm dữ liệu vào dataframe                         
                            if ierr_pct ==7 : #Mba đang mở 
                                data_to_export_to_excel.loc[row,'Mang tải 18h(%)-Trước công tác']= "0.0%"  # Thêm dữ liệu vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                #Thực thi từng lệnh trong file python đã đọc 
                if self.chaydonfilepython.isChecked() == 1:
                    with open(psse_files_path_name_python) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu 

                #Thực hiện nhiều file .py đã chọn
                if self.chaydafilepython.isChecked() == 1:
                    for i in range(len(python_multiple_files_path_name)):
                        with open(python_multiple_files_path_name[i]) as f:
                            _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                            _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                            _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                            exec(f.read()) # Thực thi từng dòng trong file đã đọc
                            psspy.fdns()  # Chạy lại trào lưu   

                #Chạy trực tiếp từ file python tạo trên cửa sổ window
                if self.chaytructieptuphantu.isChecked() == 1:
                    Text = self.Python_to_run_PSSE.toPlainText()
                    _i = psspy.getdefaultint()
                    _f = psspy.getdefaultreal()
                    _s = psspy.getdefaultchar()
                    exec(Text)
                    psspy.fdns()                
                # Sau đó lấy mang tải và phần trăm mang tải sau công tác gộp vô bảng rồi xuất ra
                for row in range(len(data_to_export_to_excel)):
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_18h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_18h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_18h_line,2) #Làm tròn 2 chữ số
                            q_mvar= round(q_mvar_18h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_18h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_18h_after = str(p_mw) + " -j" + str(abs(q_mvar))                            
                            if q_mvar == 0 :
                                p_jq_phantu_18h_after = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 18h -Sau công tác']= p_jq_phantu_18h_after #Thêm vô bảng kết quả
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 18h -Sau công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 18h -Sau công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 18h -Sau công tác']= "0.0 +j0.0"
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_18h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_18h_line),1) # Làm tròn
                            phantram_mangtai_18h_after = str(pct_load) + "%"
                            data_to_export_to_excel.loc[row,'Mang tải 18h(%)-Sau công tác']= phantram_mangtai_18h_after   #Thêm dữ liệu mang tải vào dataframe         
                        if ierr_pct == 3:
                             data_to_export_to_excel.loc[row,'Mang tải 18h(%)-Sau công tác']= "0.0%"  # Thêm dữ liệu vào dataframe                            
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_18h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_18h = pq_mba_18h.real # Lấy phần tải thực của máy biến áp
                                q_mvar_18h = pq_mba_18h.imag #Lấy phần tải phản kháng của máy biến áp
                                p_mw = round(p_mw_18h,2)
                                q_mvar = round(q_mvar_18h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_18h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_18h_after = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_18h_after = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 18h -Sau công tác']= p_jq_phantu_18h_after
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_18h_after = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 18h(%)-Sau công tác']= phantram_mangtai_18h_after   #Thêm dữ liệu mang tải vào dataframe                              
                            if  ierr_pct ==7 :
                                data_to_export_to_excel.loc[row,'Mang tải 18h(%)-Sau công tác']= "0.0%"   #Thêm dữ liệu mang tải vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                    so_file_sav_da_chay = so_file_sav_da_chay +1
                    self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
                    QGuiApplication.processEvents() 

            #Chạy file 21h
            if self.checkBox_21h.isChecked() == 1:
                #Đoạn này để kiểm tra xem đã chọn file 21h hay chưa 
                try:
                    psse_files_path_name_21h
                #Báo chưa chọn đường dẫn đến file 
                except NameError:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Cảnh báo")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setInformativeText("Chưa chọn file 21h")
                    msg.exec()
                    return
                #Lấy tải của các đường dây/ mba trước khi có công tác
                psspy.case(psse_files_path_name_21h)
                #Đoạn này sẽ lấy mang tải các phần tử trước khi thực hiện công tác
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_21h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_21h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_21h_line,2)
                            q_mvar= round(q_mvar_21h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_21h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_21h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                            if q_mvar == 0 :
                                p_jq_phantu_21h_before = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 21h -Trước công tác']= p_jq_phantu_21h_before  #Add vô bảng kết quả                          
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 21h -Trước công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 21h -Trước công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 21h -Trước công tác']= "0.0 +j0.0"
                        
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_21h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_21h_line),1) # Làm tròn
                            phantram_mangtai_21h_before = str(pct_load) + "%" #Chuyển ra dạng chuỗi 
                            data_to_export_to_excel.loc[row,'Mang tải 21h(%)-Trước công tác']= phantram_mangtai_21h_before 
                        if ierr_pct ==3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 21h(%)-Trước công tác']= "0.0%"
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_21h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_21h = pq_mba_21h.real
                                q_mvar_21h = pq_mba_21h.imag
                                p_mw = round(p_mw_21h,2)
                                q_mvar = round(q_mvar_21h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_21h_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_21h_before = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_21h_before = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 21h -Trước công tác']= p_jq_phantu_21h_before # Thêm dữ liệu vào dataframe     

                            if ierr_p == 7:
                                data_to_export_to_excel.loc[row,'Mang tải 21h -Trước công tác']= "0.0 +j0.0"
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_21h_before = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 21h(%)-Trước công tác']= phantram_mangtai_21h_before  # Thêm dữ liệu vào dataframe                         
                            if ierr_pct ==7 : #Mba đang mở 
                                data_to_export_to_excel.loc[row,'Mang tải 21h(%)-Trước công tác']= "0.0%"  # Thêm dữ liệu vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                #Thực thi từng lệnh trong file python đã đọc 
                if self.chaydonfilepython.isChecked() == 1:
                    with open(psse_files_path_name_python) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu 

                #Thực hiện nhiều file .py đã chọn
                if self.chaydafilepython.isChecked() == 1:
                    for i in range(len(python_multiple_files_path_name)):
                        with open(python_multiple_files_path_name[i]) as f:
                            _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                            _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                            _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                            exec(f.read()) # Thực thi từng dòng trong file đã đọc
                            psspy.fdns()  # Chạy lại trào lưu   

                #Chạy trực tiếp từ file python tạo trên cửa sổ window
                if self.chaytructieptuphantu.isChecked() == 1:
                    Text = self.Python_to_run_PSSE.toPlainText()
                    _i = psspy.getdefaultint()
                    _f = psspy.getdefaultreal()
                    _s = psspy.getdefaultchar()
                    exec(Text)
                    psspy.fdns()                
                # Sau đó lấy mang tải và phần trăm mang tải sau công tác gộp vô bảng rồi xuất ra
                for row in range(len(data_to_export_to_excel)):
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_21h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_21h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_21h_line,2) #Làm tròn 2 chữ số
                            q_mvar= round(q_mvar_21h_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_21h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_21h_after = str(p_mw) + " -j" + str(abs(q_mvar))                            
                            if q_mvar == 0 :
                                p_jq_phantu_21h_after = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải 21h -Sau công tác']= p_jq_phantu_21h_after #Thêm vô bảng kết quả
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải 21h -Sau công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải 21h -Sau công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải 21h -Sau công tác']= "0.0 +j0.0"
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_21h_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_21h_line),1) # Làm tròn
                            phantram_mangtai_21h_after = str(pct_load) + "%"
                            data_to_export_to_excel.loc[row,'Mang tải 21h(%)-Sau công tác']= phantram_mangtai_21h_after   #Thêm dữ liệu mang tải vào dataframe         
                        if ierr_pct == 3:
                             data_to_export_to_excel.loc[row,'Mang tải 21h(%)-Sau công tác']= "0.0%"  # Thêm dữ liệu vào dataframe                            
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_21h = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_21h = pq_mba_21h.real # Lấy phần tải thực của máy biến áp
                                q_mvar_21h = pq_mba_21h.imag #Lấy phần tải phản kháng của máy biến áp
                                p_mw = round(p_mw_21h,2)
                                q_mvar = round(q_mvar_21h,2)
                                if q_mvar >0 :
                                    p_jq_phantu_21h_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_21h_after = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_21h_after = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải 21h -Sau công tác']= p_jq_phantu_21h_after
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_21h_after = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải 21h(%)-Sau công tác']= phantram_mangtai_21h_after   #Thêm dữ liệu mang tải vào dataframe                              
                            if  ierr_pct ==7 :
                                data_to_export_to_excel.loc[row,'Mang tải 21h(%)-Sau công tác']= "0.0%"   #Thêm dữ liệu mang tải vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                    so_file_sav_da_chay = so_file_sav_da_chay +1 
                    self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
                    QGuiApplication.processEvents() 

            #Chạy file CNmax
            if self.checkBox_CNma.isChecked() == 1:
                #Đoạn này để kiểm tra xem đã chọn file CNmax hay chưa 
                try:
                    psse_files_path_name_CNMax
                #Báo chưa chọn đường dẫn đến file 
                except NameError:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Cảnh báo")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setInformativeText("Chưa chọn file CNmax")
                    msg.exec()
                    return
                #Lấy tải của các đường dây/ mba trước khi có công tác
                psspy.case(psse_files_path_name_CNMax)
                #Đoạn này sẽ lấy mang tải các phần tử trước khi thực hiện công tác
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_CNmax_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_CNmax_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_CNmax_line,2)
                            q_mvar= round(q_mvar_CNmax_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_CNmax_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_CNmax_before = str(p_mw) + " -j" + str(abs(q_mvar))
                            if q_mvar == 0 :
                                p_jq_phantu_CNmax_before = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải CNmax -Trước công tác']= p_jq_phantu_CNmax_before  #Add vô bảng kết quả                          
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải CNmax -Trước công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải CNmax -Trước công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải CNmax -Trước công tác']= "0.0 +j0.0"
                        
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_CNmax_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_CNmax_line),1) # Làm tròn
                            phantram_mangtai_CNmax_before = str(pct_load) + "%" #Chuyển ra dạng chuỗi 
                            data_to_export_to_excel.loc[row,'Mang tải CNmax(%)-Trước công tác']= phantram_mangtai_CNmax_before 
                        if ierr_pct ==3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải CNmax(%)-Trước công tác']= "0.0%"
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_CNmax = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_CNmax = pq_mba_CNmax.real
                                q_mvar_CNmax = pq_mba_CNmax.imag
                                p_mw = round(p_mw_CNmax,2)
                                q_mvar = round(q_mvar_CNmax,2)
                                if q_mvar >0 :
                                    p_jq_phantu_CNmax_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_CNmax_before = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_CNmax_before = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải CNmax -Trước công tác']= p_jq_phantu_CNmax_before # Thêm dữ liệu vào dataframe     

                            if ierr_p == 7:
                                data_to_export_to_excel.loc[row,'Mang tải CNmax -Trước công tác']= "0.0 +j0.0"
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_CNmax_before = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải CNmax(%)-Trước công tác']= phantram_mangtai_CNmax_before  # Thêm dữ liệu vào dataframe                         
                            if ierr_pct ==7 : #Mba đang mở 
                                data_to_export_to_excel.loc[row,'Mang tải CNmax(%)-Trước công tác']= "0.0%"  # Thêm dữ liệu vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                #Thực thi từng lệnh trong file python đã đọc 
                if self.chaydonfilepython.isChecked() == 1:
                    with open(psse_files_path_name_python) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu 

                #Thực hiện nhiều file .py đã chọn
                if self.chaydafilepython.isChecked() == 1:
                    for i in range(len(python_multiple_files_path_name)):
                        with open(python_multiple_files_path_name[i]) as f:
                            _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                            _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                            _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                            exec(f.read()) # Thực thi từng dòng trong file đã đọc
                            psspy.fdns()  # Chạy lại trào lưu   

                #Chạy trực tiếp từ file python tạo trên cửa sổ window
                if self.chaytructieptuphantu.isChecked() == 1:
                    Text = self.Python_to_run_PSSE.toPlainText()
                    _i = psspy.getdefaultint()
                    _f = psspy.getdefaultreal()
                    _s = psspy.getdefaultchar()
                    exec(Text)
                    psspy.fdns()                
                # Sau đó lấy mang tải và phần trăm mang tải sau công tác gộp vô bảng rồi xuất ra
                for row in range(len(data_to_export_to_excel)):
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_CNmax_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_CNmax_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_CNmax_line,2) #Làm tròn 2 chữ số
                            q_mvar= round(q_mvar_CNmax_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_CNmax_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_CNmax_after = str(p_mw) + " -j" + str(abs(q_mvar))                            
                            if q_mvar == 0 :
                                p_jq_phantu_CNmax_after = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải CNmax -Sau công tác']= p_jq_phantu_CNmax_after #Thêm vô bảng kết quả
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải CNmax -Sau công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải CNmax -Sau công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải CNmax -Sau công tác']= "0.0 +j0.0"
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_CNmax_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_CNmax_line),1) # Làm tròn
                            phantram_mangtai_CNmax_after = str(pct_load) + "%"
                            data_to_export_to_excel.loc[row,'Mang tải CNmax(%)-Sau công tác']= phantram_mangtai_CNmax_after   #Thêm dữ liệu mang tải vào dataframe         
                        if ierr_pct == 3:
                             data_to_export_to_excel.loc[row,'Mang tải CNmax(%)-Sau công tác']= "0.0%"  # Thêm dữ liệu vào dataframe                            
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_CNmax = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_CNmax = pq_mba_CNmax.real # Lấy phần tải thực của máy biến áp
                                q_mvar_CNmax = pq_mba_CNmax.imag #Lấy phần tải phản kháng của máy biến áp
                                p_mw = round(p_mw_CNmax,2)
                                q_mvar = round(q_mvar_CNmax,2)
                                if q_mvar >0 :
                                    p_jq_phantu_CNmax_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_CNmax_after = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_CNmax_after = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải CNmax -Sau công tác']= p_jq_phantu_CNmax_after
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_CNmax_after = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải CNmax(%)-Sau công tác']= phantram_mangtai_CNmax_after   #Thêm dữ liệu mang tải vào dataframe                              
                            if  ierr_pct ==7 :
                                data_to_export_to_excel.loc[row,'Mang tải CNmax(%)-Sau công tác']= "0.0%"   #Thêm dữ liệu mang tải vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                    so_file_sav_da_chay = so_file_sav_da_chay + 1
                    self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
                    QGuiApplication.processEvents() 

            #Chạy file CNmin
            if self.checkBox_CNmi.isChecked() == 1:
                #Đoạn này để kiểm tra xem đã chọn file CNmin hay chưa 
                try:
                    psse_files_path_name_CNMin
                #Báo chưa chọn đường dẫn đến file 
                except NameError:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Cảnh báo")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setInformativeText("Chưa chọn file CNmin")
                    msg.exec()
                    return
                #Lấy tải của các đường dây/ mba trước khi có công tác
                psspy.case(psse_files_path_name_CNMin)
                #Đoạn này sẽ lấy mang tải các phần tử trước khi thực hiện công tác
                for row in range(len(data_to_export_to_excel)):
                    # Lấy các dữ liệu nút và id
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_CNmin_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_CNmin_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_CNmin_line,2)
                            q_mvar= round(q_mvar_CNmin_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_CNmin_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_CNmin_before = str(p_mw) + " -j" + str(abs(q_mvar))
                            if q_mvar == 0 :
                                p_jq_phantu_CNmin_before = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải CNmin -Trước công tác']= p_jq_phantu_CNmin_before  #Add vô bảng kết quả                          
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải CNmin -Trước công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải CNmin -Trước công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải CNmin -Trước công tác']= "0.0 +j0.0"
                        
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_CNmin_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_CNmin_line),1) # Làm tròn
                            phantram_mangtai_CNmin_before = str(pct_load) + "%" #Chuyển ra dạng chuỗi 
                            data_to_export_to_excel.loc[row,'Mang tải CNmin(%)-Trước công tác']= phantram_mangtai_CNmin_before 
                        if ierr_pct ==3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải CNmin(%)-Trước công tác']= "0.0%"
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_CNmin = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_CNmin = pq_mba_CNmin.real
                                q_mvar_CNmin = pq_mba_CNmin.imag
                                p_mw = round(p_mw_CNmin,2)
                                q_mvar = round(q_mvar_CNmin,2)
                                if q_mvar >0 :
                                    p_jq_phantu_CNmin_before = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_CNmin_before = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_CNmin_before = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải CNmin -Trước công tác']= p_jq_phantu_CNmin_before # Thêm dữ liệu vào dataframe     

                            if ierr_p == 7:
                                data_to_export_to_excel.loc[row,'Mang tải CNmin -Trước công tác']= "0.0 +j0.0"
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_CNmin_before = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải CNmin(%)-Trước công tác']= phantram_mangtai_CNmin_before  # Thêm dữ liệu vào dataframe                         
                            if ierr_pct ==7 : #Mba đang mở 
                                data_to_export_to_excel.loc[row,'Mang tải CNmin(%)-Trước công tác']= "0.0%"  # Thêm dữ liệu vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                #Thực thi từng lệnh trong file python đã đọc 
                if self.chaydonfilepython.isChecked() == 1:
                    with open(psse_files_path_name_python) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu 

                #Thực hiện nhiều file .py đã chọn
                if self.chaydafilepython.isChecked() == 1:
                    for i in range(len(python_multiple_files_path_name)):
                        with open(python_multiple_files_path_name[i]) as f:
                            _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                            _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                            _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                            exec(f.read()) # Thực thi từng dòng trong file đã đọc
                            psspy.fdns()  # Chạy lại trào lưu   

                #Chạy trực tiếp từ file python tạo trên cửa sổ window
                if self.chaytructieptuphantu.isChecked() == 1:
                    Text = self.Python_to_run_PSSE.toPlainText()
                    _i = psspy.getdefaultint()
                    _f = psspy.getdefaultreal()
                    _s = psspy.getdefaultchar()
                    exec(Text)
                    psspy.fdns()                
                # Sau đó lấy mang tải và phần trăm mang tải sau công tác gộp vô bảng rồi xuất ra
                for row in range(len(data_to_export_to_excel)):
                    item_type = data_to_export_to_excel.loc[row,"Loại"]
                    from_bus = int(data_to_export_to_excel.loc[row,"Nút đầu"])
                    to_bus = int(data_to_export_to_excel.loc[row,"Nút cuối"])
                    mid_bus = int(data_to_export_to_excel.loc[row,"Cuộn trung"])  # Cuộn trung (nếu có)
                    item_id = str(data_to_export_to_excel.loc[row,"ID"])
                    voltage = int(data_to_export_to_excel.loc[row,"Điện áp (kV)"])
                    if item_type.lower() == "đường dây":
                        # Lấy P, Q và % mang tải cho Đường dây
                        ierr_p, p_mw_CNmin_line = psspy.brnmsc(from_bus, to_bus, item_id, 'P')  # Công suất tác dụng
                        ierr_q, q_mvar_CNmin_line = psspy.brnmsc(from_bus, to_bus, item_id, 'Q')  # Công suất phản kháng
                        if ierr_p ==0 or ierr_q == 0 :
                            p_mw = round(p_mw_CNmin_line,2) #Làm tròn 2 chữ số
                            q_mvar= round(q_mvar_CNmin_line,2)
                            if q_mvar >0 :
                                p_jq_phantu_CNmin_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                            if q_mvar <0 :
                                p_jq_phantu_CNmin_after = str(p_mw) + " -j" + str(abs(q_mvar))                            
                            if q_mvar == 0 :
                                p_jq_phantu_CNmin_after = str(p_mw) + "+j0.0"
                            data_to_export_to_excel.loc[row,'Mang tải CNmin -Sau công tác']= p_jq_phantu_CNmin_after #Thêm vô bảng kết quả
                        if ierr_p ==1 or ierr_q == 1 : #Không tìm thấy nút
                            data_to_export_to_excel.loc[row,'Mang tải CNmin -Sau công tác']= "N/A"
                        if ierr_p ==2 or ierr_q == 2 : #Không tìm thấy đường dây
                            data_to_export_to_excel.loc[row,'Mang tải CNmin -Sau công tác']= "N/A"
                        if ierr_p ==3 or ierr_q == 3 : #Đường dây đang mở 
                            data_to_export_to_excel.loc[row,'Mang tải CNmin -Sau công tác']= "0.0 +j0.0"
                        else:
                            print(ierr_p)
                        ierr_pct, pct_load_CNmin_line = psspy.brnmsc(from_bus, to_bus, item_id, 'PCTRTA')  # % tải
                        if ierr_pct ==0:
                            pct_load = round((pct_load_CNmin_line),1) # Làm tròn
                            phantram_mangtai_CNmin_after = str(pct_load) + "%"
                            data_to_export_to_excel.loc[row,'Mang tải CNmin(%)-Sau công tác']= phantram_mangtai_CNmin_after   #Thêm dữ liệu mang tải vào dataframe         
                        if ierr_pct == 3:
                             data_to_export_to_excel.loc[row,'Mang tải CNmin(%)-Sau công tác']= "0.0%"  # Thêm dữ liệu vào dataframe                            
                        else:
                            print(ierr_pct)

                    elif item_type.lower() == "mba":
                        # Lấy P, Q và % mang tải cho Máy biến áp (MBA)
                        if mid_bus is not None:
                            # Nếu có Cuộn trung, sử dụng nó
                            ierr_p, pq_mba_CNmin = psspy.wnddt2(to_bus, from_bus, mid_bus, item_id, 'FLOW')
                            if ierr_p == 0:
                                p_mw_CNmin = pq_mba_CNmin.real # Lấy phần tải thực của máy biến áp
                                q_mvar_CNmin = pq_mba_CNmin.imag #Lấy phần tải phản kháng của máy biến áp
                                p_mw = round(p_mw_CNmin,2)
                                q_mvar = round(q_mvar_CNmin,2)
                                if q_mvar >0 :
                                    p_jq_phantu_CNmin_after = str(p_mw) + " +j" + str(q_mvar) # Chuyển thành dạng P+jQ dễ nhìn
                                if q_mvar <0 :
                                    p_jq_phantu_CNmin_after = str(p_mw) + " -j" + str(abs(q_mvar))
                                if q_mvar == 0 :
                                    p_jq_phantu_CNmin_after = str(p_mw) + "+j0.0"
                                data_to_export_to_excel.loc[row,'Mang tải CNmin -Sau công tác']= p_jq_phantu_CNmin_after
                            else:
                                print(ierr_p)
                            #Lấy phần trăm mang tải máy biến áp
                            ierr_pct, pct_load_mba = psspy.wnddat(to_bus, from_bus, mid_bus, item_id, 'PCTRTA')
                            if  ierr_pct ==0 :
                                pct_load = round((pct_load_mba),1) 
                                phantram_mangtai_CNmin_after = str(pct_load) + "%" 
                                data_to_export_to_excel.loc[row,'Mang tải CNmin(%)-Sau công tác']= phantram_mangtai_CNmin_after   #Thêm dữ liệu mang tải vào dataframe                              
                            if  ierr_pct ==7 :
                                data_to_export_to_excel.loc[row,'Mang tải CNmin(%)-Sau công tác']= "0.0%"   #Thêm dữ liệu mang tải vào dataframe
                        else:
                            # Nếu không có Cuộn trung
                            return

                    else:
                        # Trường hợp loại không hợp lệ
                        raise ValueError(f"Loại phần tử không hợp lệ: {item_type}")
                    so_file_sav_da_chay = so_file_sav_da_chay + 1
                    self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
                    QGuiApplication.processEvents() 
                  
            #Xuất kết quả này ra excel
            data_to_export_to_excel = data_to_export_to_excel.replace([float('inf'), float('-inf')], pd.NA)  # Thay Inf thành NaN
            data_to_export_to_excel = data_to_export_to_excel.fillna('')  # Thay NaN thành chuỗi rỗng
            self.export_to_excel_with_formatting(data_to_export_to_excel, file_excel_path) #Sử dụng hàm xuất dataframe ra excel
            movie.stop()
            QGuiApplication.processEvents()
            self.text_outputbar.append("-----------Đã lưu file tại {}------------".format(file_excel_path)) # Thêm vô outputbar 
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Đã xuất file excel")
            msg.setInformativeText("Đã lưu file tại {}".format(file_excel_path))
            msg.exec()
                              

    # ---------- Chương trình vẽ đồ thị từ thông số A0/ đồng thời so sánh phần tử được mô phỏng trong PSS/E -------------
    def ve_do_thi_tu_thong_so_A0(self):
        date_choice = self.ChongnayxemthsA0.currentText()
        try:
            scada_multiple_files
        except NameError:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Cảnh báo")
            msg.setIcon(QMessageBox.Warning)
            msg.setInformativeText("Chưa lấy các file thông số A0")
            msg.exec()
            return

        scada_multiple_files_filtered = scada_multiple_files[scada_multiple_files['Thứ'] == date_choice ]

        # Lấy dữ liệu từ các file 
        excelrawdata1 =  pd.read_excel(scada_multiple_files_filtered.iloc[0,0], sheet_name= 'Sheet', engine='xlrd')
        excelrawdata2 =  pd.read_excel(scada_multiple_files_filtered.iloc[1,0], sheet_name= 'Sheet', engine='xlrd')
        excelrawdata3 =  pd.read_excel(scada_multiple_files_filtered.iloc[2,0], sheet_name= 'Sheet', engine='xlrd')
        excelrawdata4 =  pd.read_excel(scada_multiple_files_filtered.iloc[3,0], sheet_name= 'Sheet', engine='xlrd')

        # Ghép mô tả và key để search
        List_of_substation = excelrawdata1['Mô Tả'].astype(str) + "-" + excelrawdata1['Thông Số'].astype(str)
        excelrawdata1['Key'] = List_of_substation
        List_of_substation = excelrawdata2['Mô Tả'].astype(str) + "-" + excelrawdata2['Thông Số'].astype(str)
        excelrawdata2['Key'] = List_of_substation
        List_of_substation = excelrawdata3['Mô Tả'].astype(str) + "-" + excelrawdata3['Thông Số'].astype(str)
        excelrawdata3['Key'] = List_of_substation
        List_of_substation = excelrawdata4['Mô Tả'].astype(str) + "-" + excelrawdata4['Thông Số'].astype(str)
        excelrawdata4['Key'] = List_of_substation


        #Lấy các hàng được chọn
        rows = {index.row() for index in self.bangcacphantu.selectionModel().selectedIndexes()}

        for row in rows:
            from_to_choice = self.PickFromTo.currentText()
            #Nếu người dùng chọn From thì lấy đầu From - Code tạm khi nào map xong sửa 
            if from_to_choice == "From":
                index_item_to_plot_from = self.bangcacphantu.model().index(row,11) #Map xong nhớ sửa
            if from_to_choice == "To":
                index_item_to_plot_from = self.bangcacphantu.model().index(row,12) #Map xong nhớ sửa
            item_to_plot = index_item_to_plot_from.data()
            # Vẽ công suất P 
            item_to_plot = item_to_plot +"-P"
            self.text_outputbar.append(item_to_plot)
            #Tick chọn map thông số từ PSS/E từ thông số A0
            if self.checkBox_VethgsoPSSE.isChecked() == 1:
                psspy.psseinit(500000)
                index_item_to_plot_from_type = self.bangcacphantu.model().index(row,0)
                #lấy cột đầu để xác định là đường dây hay máy biến áp 
                item_to_plot_type = index_item_to_plot_from_type.data()
                #-------------Lấy thông tin mang tải của đường dây và máy biến áp của file 2h---------------
                if self.checkBox_2h.isChecked() == 1:
                    #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                    try:
                        psse_files_path_name_2h
                    #Báo chưa chọn đường dẫn đến file 
                    except NameError:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Cảnh báo")
                        msg.setIcon(QMessageBox.Warning)
                        msg.setInformativeText("Chưa chọn file 2h")
                        msg.exec()
                        return
                    psspy.case(psse_files_path_name_2h)
                    if item_to_plot_type == "Đường dây":
                        #Lấy dữ liệu từ bảng excel trên màn hình
                        index_from_bus_number = self.bangcacphantu.model().index(row,3) 
                        index_to_bus_number = self.bangcacphantu.model().index(row,5)
                        index_id_branch_flow = self.bangcacphantu.model().index(row,9)
                        from_bus_number = int(index_from_bus_number.data())
                        to_bus_number = int(index_to_bus_number.data())
                        circuit_id_branch_flow = index_id_branch_flow.data()
                        circuit_id_branch_flow = str(circuit_id_branch_flow)
                        #Lấy thông tin mang tải đường dây lúc 2h
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất trên đường dây từ From
                            ierr, P_flow_from_of_branch_2h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'P')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return                           
                            ierr, Q_flow_from_of_branch_2h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'Q')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_2h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất trên đường dây To
                            ierr, P_flow_to_of_branch_2h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'P')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_2h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'PCTRTA')
                    if item_to_plot_type == "MBA":
                        #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                        index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                        index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                        index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                        index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                        from_bus_number = int(index_from_bus_number_1.data())
                        to_bus_number = int(index_to_bus_number_2.data())
                        third_bus_number = int(index_third_bus_number_3.data())
                        id_transformer_flow = str(index_id_transformer_flow.data())
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_2h = psspy.wnddt2(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return 
                            P_flow_from_transformer_2h = PQ_flow_from_transformer_2h.real
                            Q_flow_from_transformer_2h = PQ_flow_from_transformer_2h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_2h = psspy.wnddat(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_2h = psspy.wnddt2(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            P_flow_from_transformer_2h = PQ_flow_from_transformer_2h.real
                            Q_flow_from_transformer_2h = PQ_flow_from_transformer_2h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_2h = psspy.wnddat(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                # -------------Lấy thông tin mang tải của đường dây và máy biến áp của file 10h -------------------
                if self.checkBox_10h.isChecked() == 1:
                    #Đoạn này để kiểm tra xem đã chọn file 10h hay chưa 
                    try:
                        psse_files_path_name_10h
                    #Báo ra nếu chưa chọn file 
                    except NameError:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Cảnh báo")
                        msg.setIcon(QMessageBox.Warning)
                        msg.setInformativeText("Chưa chọn file 10h")
                        msg.exec()
                        return
                    psspy.case(psse_files_path_name_10h)
                    if item_to_plot_type == "Đường dây":
                        #Lấy dữ liệu từ bảng excel trên màn hình
                        index_from_bus_number = self.bangcacphantu.model().index(row,3) 
                        index_to_bus_number = self.bangcacphantu.model().index(row,5)
                        index_id_branch_flow = self.bangcacphantu.model().index(row,9)
                        from_bus_number = int(index_from_bus_number.data())
                        to_bus_number = int(index_to_bus_number.data())
                        circuit_id_branch_flow = index_id_branch_flow.data()
                        circuit_id_branch_flow = str(circuit_id_branch_flow)
                        #Lấy thông tin mang tải đường dây lúc 10h
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất trên đường dây từ From
                            ierr, P_flow_from_of_branch_10h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'P')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return
                            ierr, Q_flow_from_of_branch_10h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'Q')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_10h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất trên đường dây To
                            ierr, P_flow_to_of_branch_10h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'P')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_10h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'PCTRTA')
                    if item_to_plot_type == "MBA":
                        #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                        index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                        index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                        index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                        index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                        from_bus_number = int(index_from_bus_number_1.data())
                        to_bus_number = int(index_to_bus_number_2.data())
                        third_bus_number = int(index_third_bus_number_3.data())
                        id_transformer_flow = str(index_id_transformer_flow.data())
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_10h = psspy.wnddt2(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return                            
                            P_flow_from_transformer_10h = PQ_flow_from_transformer_10h.real
                            Q_flow_from_transformer_10h = PQ_flow_from_transformer_10h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_10h = psspy.wnddat(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_10h = psspy.wnddt2(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            P_flow_from_transformer_10h = PQ_flow_from_transformer_10h.real
                            Q_flow_from_transformer_10h = PQ_flow_from_transformer_10h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_10h = psspy.wnddat(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                #-------------Lấy thông tin mang tải của đường dây và máy biến áp của file 12h-------------
                if self.checkBox_12h.isChecked() == 1:
                    #Đoạn này để kiểm tra xem đã chọn file 12h hay chưa 
                    try:
                        psse_files_path_name_12h
                    #Báo ra nếu chưa chọn file 
                    except NameError:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Cảnh báo")
                        msg.setIcon(QMessageBox.Warning)
                        msg.setInformativeText("Chưa chọn file 12h")
                        msg.exec()
                        return
                    psspy.case(psse_files_path_name_12h)
                    if item_to_plot_type == "Đường dây":
                        #Lấy dữ liệu từ bảng excel trên màn hình
                        index_from_bus_number = self.bangcacphantu.model().index(row,3) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 3 từ trái sang
                        index_to_bus_number = self.bangcacphantu.model().index(row,5) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 5 từ trái sang
                        index_id_branch_flow = self.bangcacphantu.model().index(row,9) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 9 từ trái sang
                        from_bus_number = int(index_from_bus_number.data())
                        to_bus_number = int(index_to_bus_number.data())
                        circuit_id_branch_flow = index_id_branch_flow.data()
                        circuit_id_branch_flow = str(circuit_id_branch_flow)
                        #Lấy thông tin mang tải đường dây lúc 12h
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất trên đường dây từ From
                            ierr, P_flow_from_of_branch_12h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'P')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return                            
                            ierr, Q_flow_from_of_branch_12h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'Q')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_12h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất trên đường dây To
                            ierr, P_flow_to_of_branch_12h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'P')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_12h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'PCTRTA')
                    if item_to_plot_type == "MBA":
                        #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                        index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                        index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                        index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                        index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                        from_bus_number = int(index_from_bus_number_1.data())
                        to_bus_number = int(index_to_bus_number_2.data())
                        third_bus_number = int(index_third_bus_number_3.data())
                        id_transformer_flow = str(index_id_transformer_flow.data())
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_12h = psspy.wnddt2(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return                            
                            P_flow_from_transformer_12h = PQ_flow_from_transformer_12h.real
                            Q_flow_from_transformer_12h = PQ_flow_from_transformer_12h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_12h = psspy.wnddat(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_12h = psspy.wnddt2(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            P_flow_from_transformer_12h = PQ_flow_from_transformer_12h.real
                            Q_flow_from_transformer_12h = PQ_flow_from_transformer_12h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_12h = psspy.wnddat(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                #-------------Lấy thông tin mang tải của đường dây và máy biến áp của file 15h-------------
                if self.checkBox_15h.isChecked() == 1:
                    #Đoạn này để kiểm tra xem đã chọn file 12h hay chưa 
                    try:
                        psse_files_path_name_15h
                    #Báo ra nếu chưa chọn file 
                    except NameError:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Cảnh báo")
                        msg.setIcon(QMessageBox.Information)
                        msg.setInformativeText("Chưa chọn file 15h")
                        msg.exec()
                        return
                    psspy.case(psse_files_path_name_15h)
                    if item_to_plot_type == "Đường dây":
                        #Lấy dữ liệu từ bảng excel trên màn hình
                        index_from_bus_number = self.bangcacphantu.model().index(row,3) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 3 từ trái sang
                        index_to_bus_number = self.bangcacphantu.model().index(row,5) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 5 từ trái sang
                        index_id_branch_flow = self.bangcacphantu.model().index(row,9) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 9 từ trái sang
                        from_bus_number = int(index_from_bus_number.data())
                        to_bus_number = int(index_to_bus_number.data())
                        circuit_id_branch_flow = index_id_branch_flow.data()
                        circuit_id_branch_flow = str(circuit_id_branch_flow)
                        #Lấy thông tin mang tải đường dây lúc 15h
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất trên đường dây từ From
                            ierr, P_flow_from_of_branch_15h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'P')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return                              
                            ierr, Q_flow_from_of_branch_15h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'Q')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_15h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất trên đường dây To
                            ierr, P_flow_to_of_branch_15h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'P')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_15h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'PCTRTA')
                    if item_to_plot_type == "MBA":
                        #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                        index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                        index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                        index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                        index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                        from_bus_number = int(index_from_bus_number_1.data())
                        to_bus_number = int(index_to_bus_number_2.data())
                        third_bus_number = int(index_third_bus_number_3.data())
                        id_transformer_flow = str(index_id_transformer_flow.data())
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_15h = psspy.wnddt2(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return     
                            P_flow_from_transformer_15h = PQ_flow_from_transformer_15h.real
                            Q_flow_from_transformer_15h = PQ_flow_from_transformer_15h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_15h = psspy.wnddat(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_15h = psspy.wnddt2(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            P_flow_from_transformer_15h = PQ_flow_from_transformer_15h.real
                            Q_flow_from_transformer_15h = PQ_flow_from_transformer_15h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_15h = psspy.wnddat(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')

                #-------------Lấy thông tin mang tải của đường dây và máy biến áp của file 18h-------------
                if self.checkBox_18h.isChecked() == 1:
                    #Đoạn này để kiểm tra xem đã chọn file 18h hay chưa 
                    try:
                        psse_files_path_name_18h
                    #Báo ra nếu chưa chọn file 
                    except NameError:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Cảnh báo")
                        msg.setIcon(QMessageBox.Warning)
                        msg.setInformativeText("Chưa chọn file 18h")
                        msg.exec()
                        return

                    psspy.case(psse_files_path_name_18h) # Mở file .sav 18h
                    if item_to_plot_type == "Đường dây":
                        #Lấy dữ liệu từ bảng excel trên màn hình
                        index_from_bus_number = self.bangcacphantu.model().index(row,3) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 3 từ trái sang
                        index_to_bus_number = self.bangcacphantu.model().index(row,5) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 5 từ trái sang
                        index_id_branch_flow = self.bangcacphantu.model().index(row,9) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 9 từ trái sang
                        from_bus_number = int(index_from_bus_number.data())
                        to_bus_number = int(index_to_bus_number.data())
                        circuit_id_branch_flow = index_id_branch_flow.data()
                        circuit_id_branch_flow = str(circuit_id_branch_flow)
                        #Lấy thông tin mang tải đường dây lúc 18h
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất trên đường dây từ From
                            ierr, P_flow_from_of_branch_18h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'P')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return     
                            ierr, Q_flow_from_of_branch_18h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'Q')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_18h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất trên đường dây To
                            ierr, P_flow_to_of_branch_18h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'P')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_18h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'PCTRTA')
                    if item_to_plot_type == "MBA":
                        #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                        index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                        index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                        index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                        index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                        from_bus_number = int(index_from_bus_number_1.data())
                        to_bus_number = int(index_to_bus_number_2.data())
                        third_bus_number = int(index_third_bus_number_3.data())
                        id_transformer_flow = str(index_id_transformer_flow.data())
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_18h = psspy.wnddt2(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return     
                            P_flow_from_transformer_18h = PQ_flow_from_transformer_18h.real
                            Q_flow_from_transformer_18h = PQ_flow_from_transformer_18h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_18h = psspy.wnddat(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_18h = psspy.wnddt2(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            P_flow_from_transformer_18h = PQ_flow_from_transformer_18h.real
                            Q_flow_from_transformer_18h = PQ_flow_from_transformer_18h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_18h = psspy.wnddat(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                #-------------Lấy thông tin mang tải của đường dây và máy biến áp của file 21h-------------
                if self.checkBox_21h.isChecked() == 1:
                    #Đoạn này để kiểm tra xem đã chọn file 18h hay chưa 
                    try:
                        psse_files_path_name_21h
                    #Báo ra nếu chưa chọn file 
                    except NameError:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Cảnh báo")
                        msg.setIcon(QMessageBox.Information)
                        msg.setInformativeText("Chưa chọn file 21h")
                        msg.exec()
                        return
                    psspy.case(psse_files_path_name_21h) # Mở file .sav 21h 
                    if item_to_plot_type == "Đường dây":
                        #Lấy dữ liệu từ bảng excel trên màn hình
                        index_from_bus_number = self.bangcacphantu.model().index(row,3) 
                        index_to_bus_number = self.bangcacphantu.model().index(row,5)
                        index_id_branch_flow = self.bangcacphantu.model().index(row,9)
                        from_bus_number = int(index_from_bus_number.data())
                        to_bus_number = int(index_to_bus_number.data())
                        circuit_id_branch_flow = index_id_branch_flow.data()
                        circuit_id_branch_flow = str(circuit_id_branch_flow)
                        #Lấy thông tin mang tải đường dây lúc 21h
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất trên đường dây từ From
                            ierr, P_flow_from_of_branch_21h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'P')
                            ierr, Q_flow_from_of_branch_21h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'Q')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_21h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất trên đường dây To
                            ierr, P_flow_to_of_branch_21h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'P')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_21h = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'PCTRTA')
                    if item_to_plot_type == "MBA":
                        #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                        index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                        index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                        index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                        index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                        from_bus_number = int(index_from_bus_number_1.data())
                        to_bus_number = int(index_to_bus_number_2.data())
                        third_bus_number = int(index_third_bus_number_3.data())
                        id_transformer_flow = str(index_id_transformer_flow.data())
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_21h = psspy.wnddt2(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return                                
                            P_flow_from_transformer_21h = PQ_flow_from_transformer_21h.real
                            Q_flow_from_transformer_21h = PQ_flow_from_transformer_21h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_21h = psspy.wnddat(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_21h = psspy.wnddt2(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            P_flow_from_transformer_21h = PQ_flow_from_transformer_21h.real
                            Q_flow_from_transformer_21h = PQ_flow_from_transformer_21h.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_21h = psspy.wnddat(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                #-------------Lấy thông tin mang tải của đường dây và máy biến áp của file CNMax-------------
                if self.checkBox_CNma.isChecked() == 1:
                    try:
                        psse_files_path_name_CNMax
                    #Báo ra nếu chưa chọn file 
                    except NameError:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Cảnh báo")
                        msg.setIcon(QMessageBox.Information)
                        msg.setInformativeText("Chưa chọn file Chủ nhật max")
                        msg.exec()
                        return
                    psspy.case(psse_files_path_name_CNMax) # Mở file .sav CNMax 
                    if item_to_plot_type == "Đường dây":
                        #Lấy dữ liệu từ bảng excel trên màn hình
                        index_from_bus_number = self.bangcacphantu.model().index(row,3) 
                        index_to_bus_number = self.bangcacphantu.model().index(row,5)
                        index_id_branch_flow = self.bangcacphantu.model().index(row,9)
                        from_bus_number = int(index_from_bus_number.data())
                        to_bus_number = int(index_to_bus_number.data())
                        circuit_id_branch_flow = index_id_branch_flow.data()
                        circuit_id_branch_flow = str(circuit_id_branch_flow)
                        #Lấy thông tin mang tải đường dây lúc CNMaxx
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất trên đường dây từ From
                            ierr, P_flow_from_of_branch_CNMax = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'P')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return                                
                            ierr, Q_flow_from_of_branch_CNMax = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'Q')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_CNMax = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất trên đường dây To
                            ierr, P_flow_to_of_branch_CNMax = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'P')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_CNMax = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'PCTRTA')
                    if item_to_plot_type == "MBA":
                        #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                        index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                        index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                        index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                        index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                        from_bus_number = int(index_from_bus_number_1.data())
                        to_bus_number = int(index_to_bus_number_2.data())
                        third_bus_number = int(index_third_bus_number_3.data())
                        id_transformer_flow = str(index_id_transformer_flow.data())
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_CNMax = psspy.wnddt2(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return                                
                            P_flow_from_transformer_CNMax = PQ_flow_from_transformer_CNMax.real
                            Q_flow_from_transformer_CNMax = PQ_flow_from_transformer_CNMax.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_CNMax = psspy.wnddat(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_CNMax = psspy.wnddt2(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            P_flow_from_transformer_CNMax = PQ_flow_from_transformer_CNMax.real
                            Q_flow_from_transformer_CNMax = PQ_flow_from_transformer_CNMax.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_CNMax = psspy.wnddat(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                #-------------Lấy thông tin mang tải của đường dây và máy biến áp của file CNMin-------------
                if self.checkBox_CNmi.isChecked() == 1:
                    try:
                        psse_files_path_name_CNMin
                    #Báo ra nếu chưa chọn file 
                    except NameError:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Cảnh báo")
                        msg.setIcon(QMessageBox.Information)
                        msg.setInformativeText("Chưa chọn file Chủ nhật min")
                        msg.exec()
                        return
                    psspy.case(psse_files_path_name_CNMin) # Mở file .sav CNMin
                    if item_to_plot_type == "Đường dây":
                        #Lấy dữ liệu từ bảng excel trên màn hình
                        index_from_bus_number = self.bangcacphantu.model().index(row,3) 
                        index_to_bus_number = self.bangcacphantu.model().index(row,5)
                        index_id_branch_flow = self.bangcacphantu.model().index(row,9)
                        from_bus_number = int(index_from_bus_number.data())
                        to_bus_number = int(index_to_bus_number.data())
                        circuit_id_branch_flow = index_id_branch_flow.data()
                        circuit_id_branch_flow = str(circuit_id_branch_flow)
                        #Lấy thông tin mang tải đường dây lúc CNMinx
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất trên đường dây từ From
                            ierr, P_flow_from_of_branch_CNMin = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'P')
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return    
                            ierr, Q_flow_from_of_branch_CNMin = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'Q')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_CNMin = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất trên đường dây To
                            ierr, P_flow_to_of_branch_CNMin = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'P')
                            #Lấy phần trăm mang tải
                            ierr, Percent_flow_from_of_branch_CNMin = psspy.brnmsc(to_bus_number,from_bus_number,circuit_id_branch_flow,'PCTRTA')
                    if item_to_plot_type == "MBA":
                        #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                        index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                        index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                        index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                        index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                        from_bus_number = int(index_from_bus_number_1.data())
                        to_bus_number = int(index_to_bus_number_2.data())
                        third_bus_number = int(index_third_bus_number_3.data())
                        id_transformer_flow = str(index_id_transformer_flow.data())
                        if from_to_choice == "From":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_CNMin = psspy.wnddt2(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            if ierr == 1:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                                msg.exec()
                                return
                            if ierr == 2:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                                msg.exec()
                                return  
                            P_flow_from_transformer_CNMin = PQ_flow_from_transformer_CNMin.real
                            Q_flow_from_transformer_CNMin = PQ_flow_from_transformer_CNMin.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_CNMin = psspy.wnddat(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')
                        if from_to_choice == "To":
                            #Lấy trào lưu công suất từ MBA
                            ierr, PQ_flow_from_transformer_CNMin = psspy.wnddt2(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'FLOW')
                            P_flow_from_transformer_CNMin = PQ_flow_from_transformer_CNMin.real
                            Q_flow_from_transformer_CNMin = PQ_flow_from_transformer_CNMin.imag
                            #lấy phần trăm mang tải từ MBA
                            ierr, Percent_flow_from_transformer_CNMin = psspy.wnddat(to_bus_number,from_bus_number,third_bus_number,id_transformer_flow,'PCTRTA')                  

            #--------Bắt đầu tiến trình vẽ đồ thị ---------------- 
            index_of_item1 = excelrawdata1.index[(excelrawdata1['Key']== item_to_plot )].values.tolist()     
            index_of_item2 = excelrawdata2.index[(excelrawdata2['Key']== item_to_plot )].values.tolist()
            index_of_item3 = excelrawdata3.index[(excelrawdata3['Key']== item_to_plot )].values.tolist()
            index_of_item4 = excelrawdata4.index[(excelrawdata4['Key']== item_to_plot )].values.tolist()
            hour = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
                            
            #Lấy mang tải của phần tử được chọn 
            if index_of_item1:
                plot_data1 = excelrawdata1.iloc[index_of_item1[0],7:31]
            else:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Warning)
                index_name_of_the_branch =  self.bangcacphantu.model().index(row,11) # Lấy tên của đường dây
                name_of_the_branch = str(index_name_of_the_branch.data())
                msg.setInformativeText("Không tìm thấy phần tử /chưa map với thông số A0")
                msg.exec()
                return

            if index_of_item2:
                plot_data2 = excelrawdata2.iloc[index_of_item2[0],7:31]
            else:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Warning)
                index_name_of_the_branch =  self.bangcacphantu.model().index(row,11) # Lấy tên của đường dây
                name_of_the_branch = str(index_name_of_the_branch.data())
                msg.setInformativeText("Không tìm thấy phần tử /chưa map với thông số A0")
                msg.exec()
                return

            if index_of_item3:
                plot_data3 = excelrawdata3.iloc[index_of_item3[0],7:31]
            else:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Warning)
                index_name_of_the_branch =  self.bangcacphantu.model().index(row,11) # Lấy tên của đường dây
                name_of_the_branch = str(index_name_of_the_branch.data())
                msg.setInformativeText("Không tìm thấy phần tử /chưa map với thông số A0")
                msg.exec()
                return

            if index_of_item4:
                plot_data4 = excelrawdata4.iloc[index_of_item4[0],7:31]
            else:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Warning)
                index_name_of_the_branch =  self.bangcacphantu.model().index(row,11) # Lấy tên của đường dây
                name_of_the_branch = str(index_name_of_the_branch.data())
                msg.setInformativeText("Không tìm thấy phần tử /chưa map với thông số A0")
                msg.exec()
                return


            rating_of_item = round((float(excelrawdata1.iloc[index_of_item1[0],31])/1.1),0)
            rating_of_item_text = " (Định mức = "+ str(rating_of_item )+")"
            title = item_to_plot  + " " + date_choice + rating_of_item_text
            #Xóa khoảng trắng
            plot_data1 = plot_data1.fillna("0.0")
            plot_data2 = plot_data2.fillna("0.0")
            plot_data3 = plot_data3.fillna("0.0")
            plot_data4 = plot_data4.fillna("0.0")

            # Xóa dấu , trong các số 
            for j in range(len(plot_data1)):
                plot_data1[j] = plot_data1[j].replace(',','')
                plot_data1[j] = float(plot_data1[j])

            for j in range(len(plot_data2)):
                plot_data2[j] = plot_data2[j].replace(',','')
                plot_data2[j] = float(plot_data2[j])


            for j in range(len(plot_data3)):
                plot_data3[j] = plot_data3[j].replace(',','')
                plot_data3[j] = float(plot_data3[j])

            for j in range(len(plot_data4)):
                plot_data4[j] = plot_data4[j].replace(',','')
                plot_data4[j] = float(plot_data4[j])


            legend_day_1 = excelrawdata1.iloc[index_of_item1[0],6].date().isoformat()
            legend_day_2 = excelrawdata2.iloc[index_of_item2[0],6].date().isoformat()
            legend_day_3 = excelrawdata3.iloc[index_of_item3[0],6].date().isoformat()
            legend_day_4 = excelrawdata4.iloc[index_of_item4[0],6].date().isoformat()


            #Chuyến dữ liệu sang kiểu list
            plot_data1 = plot_data1.values.tolist()
            plot_data2 = plot_data2.values.tolist()
            plot_data3 = plot_data3.values.tolist()
            plot_data4 = plot_data4.values.tolist()
            
            draw_percent = self.checkBox_phantram.isChecked()
            #Vẽ đồ thị 
            
            fig, ax1 = plt.subplots(figsize=(9, 6))
            ax1.set_title(title)
            if draw_percent == 1:
                fig, ax2 = plt.subplots(figsize=(9, 6))

                plot_data1 = numpy.array(plot_data1)
                plot_data2 = numpy.array(plot_data2)
                plot_data3 = numpy.array(plot_data3)
                plot_data4 = numpy.array(plot_data4)

                rating_of_item = round(float(excelrawdata1.iloc[index_of_item1[0],31]),0)

                plot_data_percent1 = (abs(plot_data1/rating_of_item))*110
                plot_data_percent2 = (abs(plot_data2/rating_of_item))*110
                plot_data_percent3 = (abs(plot_data3/rating_of_item))*110
                plot_data_percent4 = (abs(plot_data4/rating_of_item))*110


                max_plot_data_percent =  max(max(plot_data_percent1), max(plot_data_percent2),max(plot_data_percent3),max(plot_data_percent4))
                max_plot_data_percent = "Max percent = " + str(max_plot_data_percent) + "%"

                max_hour_1_percent = numpy.argmax(plot_data_percent1)
                max_hour_2_percent = numpy.argmax(plot_data_percent2)
                max_hour_3_percent = numpy.argmax(plot_data_percent3)
                max_hour_4_percent = numpy.argmax(plot_data_percent4)

                legend_percent_1 = str(legend_day_1) + "/Max = "+ str(round(max(plot_data_percent1),2)) +"% lúc " + str(max_hour_1_percent) + " giờ"
                legend_percent_2 = str(legend_day_2) + "/Max = "+ str(round(max(plot_data_percent2),2)) +"% lúc " + str(max_hour_2_percent) + " giờ"
                legend_percent_3 = str(legend_day_3) + "/Max = "+ str(round(max(plot_data_percent3),2)) +"% lúc " + str(max_hour_3_percent) + " giờ"
                legend_percent_4 = str(legend_day_4) + "/Max = "+ str(round(max(plot_data_percent4),2)) +"% lúc " + str(max_hour_4_percent) + " giờ"
                #max_plot_data_percent= round(max(plot_data_percent),2)
                # max_plot_data_percent = "Max percent = " + str(max_plot_data_percent) + "%"
                ax2.set_ylim(0,120)
                ax2.set_ylabel("Phần trăm (%)",color = 'r')
                ax2.tick_params(axis="y", labelcolor='r')
                ax2.axvspan(6,17, color ='yellow',alpha = 0.1 )
                ax2.plot(hour, plot_data_percent1,marker= "o", color = 'blue', label = legend_percent_1)
                ax2.plot(hour, plot_data_percent2,marker= "o", color = 'green', label = legend_percent_2)
                ax2.plot(hour, plot_data_percent3,marker= "o", color = 'brown', label = legend_percent_3)
                ax2.plot(hour, plot_data_percent4,marker= "o", color = 'orange', label = legend_percent_4)
                ax2.legend()
                #Vẽ thông số phần trăm mang tải từ PSS/E lên đồ thị
                if self.checkBox_VethgsoPSSE.isChecked() == 1:
                    x1= []
                    y1 = []
                    x2 =[]
                    y2= []
                    #Khi đã có file 2h thêm P vô list y
                    if self.checkBox_2h.isChecked() == 1:
                        x1.append(2)
                        if item_to_plot_type == "Đường dây":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_of_branch_2h) #Thêm tải P của nhánh vào list y để vẽ đồ thị cột
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_of_branch_2h)
                        if item_to_plot_type == "MBA":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_transformer_2h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_transformer_2h)                            
                    if self.checkBox_10h.isChecked() == 1:
                        x1.append(10)
                        if item_to_plot_type == "Đường dây":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_of_branch_10h)
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_of_branch_10h)
                        if item_to_plot_type == "MBA":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_transformer_10h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_transformer_10h)      
                    if self.checkBox_12h.isChecked() == 1:
                        x1.append(12)
                        if item_to_plot_type == "Đường dây":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_of_branch_12h)
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_of_branch_12h)
                        if item_to_plot_type == "MBA":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_transformer_12h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_transformer_12h)      
                    if self.checkBox_15h.isChecked() == 1:
                        x1.append(15)
                        if item_to_plot_type == "Đường dây":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_of_branch_15h)
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_of_branch_15h)
                        if item_to_plot_type == "MBA":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_transformer_15h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_transformer_15h)
                    if self.checkBox_18h.isChecked() == 1:
                        x1.append(18)
                        if item_to_plot_type == "Đường dây":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_of_branch_18h)
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_of_branch_18h)
                        if item_to_plot_type == "MBA":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_transformer_18h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_transformer_18h)
                    if self.checkBox_21h.isChecked() == 1:
                        x1.append(21)
                        if item_to_plot_type == "Đường dây":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_of_branch_21h)
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_of_branch_21h)
                        if item_to_plot_type == "MBA":
                            if from_to_choice == "From":
                                y1.append(Percent_flow_from_transformer_21h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                            if from_to_choice == "To":
                                y1.append(Percent_flow_from_transformer_21h)
                    if self.checkBox_CNma.isChecked() == 1:
                        x2.append(19)
                        if item_to_plot_type == "Đường dây":
                            if from_to_choice == "From":
                                y2.append(Percent_flow_from_of_branch_CNMax)
                            if from_to_choice == "To":
                                y2.append(Percent_flow_from_of_branch_CNMax)
                        if item_to_plot_type == "MBA":
                            if from_to_choice == "From":
                                y2.append(Percent_flow_from_transformer_CNMax) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                            if from_to_choice == "To":
                                y2.append(Percent_flow_from_transformer_CNMax)
                    if self.checkBox_CNmi.isChecked() == 1:
                        x2.append(4)
                        if item_to_plot_type == "Đường dây":
                            if from_to_choice == "From":
                                y2.append(Percent_flow_from_of_branch_CNMin)
                            if from_to_choice == "To":
                                y2.append(Percent_flow_from_of_branch_CNMin)
                        if item_to_plot_type == "MBA":
                            if from_to_choice == "From":
                                y2.append(Percent_flow_from_transformer_CNMin) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                            if from_to_choice == "To":
                                y2.append(Percent_flow_from_transformer_CNMin)                                                        
                    #Vẽ đồ thị cột từ thông số PSS/E
                    ax2.bar(x1,y1,width=0.4, align='center', alpha=0.4, label='Mô phỏng trên PSS/E', zorder=1)
                    ax2.legend()
                    if self.ChongnayxemthsA0.currentText() == "Chủ Nhật":
                        ax2.bar(x2,y2,width=0.4, align='center', alpha=0.4,label='Chủ nhật PSS/E', zorder=1)
                        ax2.legend()
                        

            ax1.axvspan(6,17, color ='yellow',alpha = 0.1 )
            #Chuyển đổi sang dạng mảng 
            plot_data1 = numpy.array(plot_data1)
            plot_data2 = numpy.array(plot_data2)
            plot_data3 = numpy.array(plot_data3)
            plot_data4 = numpy.array(plot_data4)
            #Tìm cực đại của ngày đó
            max_carrying_1 = max(abs(min(plot_data1)),max(plot_data1))
            max_carrying_2 = max(abs(min(plot_data2)),max(plot_data2))
            max_carrying_3 = max(abs(min(plot_data3)),max(plot_data3))
            max_carrying_4 = max(abs(min(plot_data4)),max(plot_data4))

            #Tìm thời điểm mà phần tử này mang tải cực đại
            max_hour_1 = numpy.argmax(abs(plot_data1))
            max_hour_2 = numpy.argmax(abs(plot_data2))
            max_hour_3 = numpy.argmax(abs(plot_data3))
            max_hour_4 = numpy.argmax(abs(plot_data4)) 
              
            #Tạo biểu ký trên biểu đồ 
            legend_real_1 = str(legend_day_1) + "/Max = " + str(round(max_carrying_1,2))  +" lúc: " + str(max_hour_1) + " giờ"
            legend_real_2 = str(legend_day_2) + "/Max = " + str(round(max_carrying_2,2))  +" lúc: " + str(max_hour_2) + " giờ"
            legend_real_3 = str(legend_day_3) + "/Max = " + str(round(max_carrying_3,2))  +" lúc: " + str(max_hour_3) + " giờ"
            legend_real_4 = str(legend_day_4) + "/Max = " + str(round(max_carrying_4,2))  +" lúc: " + str(max_hour_4) + " giờ"
            
            #Vẽ đồ thị đường
            ax1.plot(hour, plot_data1,'--',marker= "o",color = 'blue', label = legend_real_1)
            ax1.plot(hour, plot_data2,'--',marker= "o",color = 'green', label = legend_real_2)
            ax1.plot(hour, plot_data3,'--',marker= "o",color = 'brown', label = legend_real_3)
            ax1.plot(hour, plot_data4,'--',marker= "o",color = 'orange', label = legend_real_4)
            #Vẽ thông số từ PSS/E lên đồ thị (số thực)
            if self.checkBox_VethgsoPSSE.isChecked() == 1:
                x1= []
                y1 = []
                x2 =[]
                y2= []
                #Khi đã có file 2h thêm P vô list y
                if self.checkBox_2h.isChecked() == 1:
                    x1.append(2)
                    if item_to_plot_type == "Đường dây":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_of_branch_2h) #Thêm tải P của nhánh vào list y để vẽ đồ thị cột
                        if from_to_choice == "To":
                            y1.append(P_flow_to_of_branch_2h)
                    if item_to_plot_type == "MBA":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_transformer_2h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                        if from_to_choice == "To":
                            y1.append(P_flow_from_transformer_2h)
                if self.checkBox_10h.isChecked() == 1:
                    x1.append(10)
                    if item_to_plot_type == "Đường dây":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_of_branch_10h)
                        if from_to_choice == "To":
                            y1.append(P_flow_to_of_branch_10h)
                    if item_to_plot_type == "MBA":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_transformer_10h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                        if from_to_choice == "To":
                            y1.append(P_flow_from_transformer_10h)
                if self.checkBox_12h.isChecked() == 1:
                    x1.append(12)
                    if item_to_plot_type == "Đường dây":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_of_branch_12h)
                        if from_to_choice == "To":
                            y1.append(P_flow_to_of_branch_12h)
                    if item_to_plot_type == "MBA":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_transformer_12h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                        if from_to_choice == "To":
                            y1.append(P_flow_from_transformer_12h)
                if self.checkBox_15h.isChecked() == 1:
                    x1.append(15)
                    if item_to_plot_type == "Đường dây":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_of_branch_15h)
                        if from_to_choice == "To":
                            y1.append(P_flow_to_of_branch_15h)
                    if item_to_plot_type == "MBA":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_transformer_15h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                        if from_to_choice == "To":
                            y1.append(P_flow_from_transformer_15h)
                if self.checkBox_18h.isChecked() == 1:
                    x1.append(18)
                    if item_to_plot_type == "Đường dây":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_of_branch_18h)
                        if from_to_choice == "To":
                            y1.append(P_flow_to_of_branch_18h)
                    if item_to_plot_type == "MBA":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_transformer_18h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                        if from_to_choice == "To":
                            y1.append(P_flow_from_transformer_18h)
                if self.checkBox_21h.isChecked() == 1:
                    x1.append(21)
                    if item_to_plot_type == "Đường dây":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_of_branch_21h)
                        if from_to_choice == "To":
                            y1.append(P_flow_to_of_branch_21h)
                    if item_to_plot_type == "MBA":
                        if from_to_choice == "From":
                            y1.append(P_flow_from_transformer_21h) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                        if from_to_choice == "To":
                            y1.append(P_flow_from_transformer_21h)
                if self.checkBox_CNma.isChecked() == 1:
                    x2.append(19)
                    if item_to_plot_type == "Đường dây":
                        if from_to_choice == "From":
                            y2.append(P_flow_from_of_branch_CNMax)
                        if from_to_choice == "To":
                            y2.append(P_flow_to_of_branch_CNMax)
                    if item_to_plot_type == "MBA":
                        if from_to_choice == "From":
                            y2.append(P_flow_from_transformer_CNMax) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                        if from_to_choice == "To":
                            y2.append(P_flow_from_transformer_CNMax)
                if self.checkBox_CNmi.isChecked() == 1:
                    x2.append(4)
                    if item_to_plot_type == "Đường dây":
                        if from_to_choice == "From":
                            y2.append(P_flow_from_of_branch_CNMin)
                        if from_to_choice == "To":
                            y2.append(P_flow_to_of_branch_CNMin)
                    if item_to_plot_type == "MBA":
                        if from_to_choice == "From":
                            y2.append(P_flow_from_transformer_CNMin) #Thêm tải P của nhánh MBA vào list y để vẽ đồ thị cột
                        if from_to_choice == "To":
                            y2.append(P_flow_from_transformer_CNMin)                                                            
                #Vẽ đồ thị cột từ thông số PSS/E
                ax1.bar(x1,y1,width=0.4, align='center', alpha=0.4, label='Mô phỏng trên PSS/E', zorder=1)
                if self.ChongnayxemthsA0.currentText() == "Chủ Nhật":
                    ax1.bar(x2,y2,width=0.4, align='center', alpha=0.4,label='Chủ nhật PSS/E', zorder=1)

            ax1.legend()
            ax1.tick_params(axis="y", labelcolor='blue')
            # ax1.legend([max_carrying],loc = 'upper left')
            ax1.set_ylabel("Giá trị thực",color = 'blue')
            ax1.set_xlabel("Giờ",color = 'black')
            ax1.set_xlim(0,23)
            
            ax1.set_xticks([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])
            ax1.grid()

            plt.title(title)
            plt.xlabel("Giờ")
            plt.xlim(0,23)
            plt.xticks([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])
            plt.grid()
            plt.show()
            ##################################

    #------------Chương trình chạy nhiều file py một lúc ------------------
    def chon_nhieu_file_py_mot_luc(self):
        global python_multiple_files_path_name
        dialog = QtWidgets.QFileDialog()
        _translate = QtCore.QCoreApplication.translate
        dialog.setNameFilter("Python file (*.py)")
        dialog.setFileMode(QtWidgets.QFileDialog.ExistingFiles)
        dialog.exec()
        python_multiple_files_path_name = dialog.selectedFiles()

        self.text_outputbar.append("------------Các file .py đã chọn-------------")
        all_the_python_file = " "
        for i in range(len(python_multiple_files_path_name)):
            python_multiple_files_path_name_string = str(python_multiple_files_path_name[i])
            python_multiple_files_name_string = str(os.path.basename(python_multiple_files_path_name[i]))
            
            all_the_python_file = all_the_python_file + ","  +python_multiple_files_name_string
            self.text_outputbar.append(python_multiple_files_path_name_string) 
        self.Loadmultiple_python.setText(all_the_python_file)

    # ---------------------Lấy dữ liệu từ excel--------------------------
    def load_data_from_excel(file_path, sheet_name):
        global data_to_search
        wb = load_workbook(file_path)
        sheet = wb[sheet_name]
        data_to_search = []
        for row in sheet.iter_rows(min_row=2, values_only=True):  # Bỏ qua hàng tiêu đề
            if row[0] is not None and row[1] is not None:  # Giả sử cột 1 và cột 2 chứa thông tin bạn cần
                data_to_search.append([str(row[0]), str(row[1])])  # Chuyển cột 1 và cột 2 thành chuỗi
        return data_to_search
    
    #----------------Chương trình chuyển định vị của đường dây/ MBA lên 1 thanh cái khác-------------
    def chuyen_dinh_vi_tren_thanh_cai(self):
        
        #Đây là class popup ra một cửa sổ để chọn nút định vị lại thanh cái
        class SearchDialog(QDialog):
        
            def __init__(self, data_to_search, parent=None):

                super().__init__()
                self.data_to_search = data_to_search
                self.filtered_data = data_to_search
                self.selected_item = None
                self.initUI()

            def initUI(self):
                layout = QVBoxLayout()

                # Tạo thanh tìm kiếm
                self.search_bar = QLineEdit(self)
                self.search_bar.setPlaceholderText('Tìm kiếm...')
                self.search_bar.textChanged.connect(self.update_list)
                layout.addWidget(self.search_bar)

                # Tạo bảng hiển thị dữ liệu
                self.table_widget = QTableWidget(self)
                self.table_widget.setColumnCount(2)
                self.table_widget.setHorizontalHeaderLabels(["Số nút ", "Tên nút"])
                self.update_list()  # Hiển thị dữ liệu ban đầu
                layout.addWidget(self.table_widget)

                # Tạo nút "Chọn"
                self.print_button = QPushButton('Chọn số nút muốn định vị', self)
                self.print_button.clicked.connect(self.print_selected_item)
                layout.addWidget(self.print_button)
                #Tạo kích thước 
                self.setLayout(layout)
                self.setWindowTitle('Tìm kiếm trong Lib_Bus')
                self.setGeometry(100, 100, 400, 300)

            def update_list(self):
                #Mỗi lần gõ thì List sẽ được rút ngắn lại
                search_term = self.search_bar.text().lower()
                self.filtered_data = [item for item in self.data_to_search if search_term in str(item[0]).lower() or search_term in str(item[1]).lower()]

                # Cập nhật bảng
                self.table_widget.setRowCount(len(self.filtered_data))
                for row_idx, row_data in enumerate(self.filtered_data):
                    self.table_widget.setItem(row_idx, 0, QTableWidgetItem(row_data[0]))
                    self.table_widget.setItem(row_idx, 1, QTableWidgetItem(row_data[1]))

            def print_selected_item(self):
                selected_row = self.table_widget.currentRow()
                if selected_row >= 0:
                    self.selected_item = self.table_widget.item(selected_row, 0).text()  # Lấy giá trị của cột đầu tiên
                    self.selected_item_name = self.table_widget.item(selected_row, 1).text()  # Lấy giá trị của cột thứ 2
                    self.accept()  # Đóng hộp thoại và trả về giá trị
                else:
                    return
        #Đoạn chương trình chính 
        UpFormat = '<span style="color:red;">{}</span>'
        file_path = 'Vietsub.xlsx'
        sheet_name = 'Lib_Bus'
        global data_to_search
        wb = load_workbook(file_path)
        sheet = wb[sheet_name]
        data_to_search = []
        for row in sheet.iter_rows(min_row=2, values_only=True):  # Bỏ qua hàng tiêu đề
            if row[0] is not None and row[1] is not None:  # Giả sử cột 1 và cột 2 chứa thông tin bạn cần
                data_to_search.append([str(row[0]), str(row[1])])  # Chuyển cột 1 và cột 2 thành chuỗi
        # Lấy các dòng được chọn
        rows = {index.row() for index in self.bangcacphantu.selectionModel().selectedIndexes()}
        output = []
        for row in rows:
            row_data = []
            # Lấy tất cả các dữ liệu của các dòng được chọn 
            for column in range(self.bangcacphantu.model().columnCount()):
                index = self.bangcacphantu.model().index(row, column)
                if index.data() == "Đường dây":
                    #Lấy nút đầu
                    index_bus_from = self.bangcacphantu.model().index(row, column+3)
                    bus_from = index_bus_from.data()
                    #Lấy nút cuối
                    index_bus_to = self.bangcacphantu.model().index(row, column+5)
                    bus_to = index_bus_to.data()
                    #Lấy số mạch
                    index_circuit_id = self.bangcacphantu.model().index(row, column+9)
                    circuit_id = index_circuit_id.data()
                    #Lấy tên nút đầu
                    index_bus_from_name = self.bangcacphantu.model().index(row, column+4)
                    bus_from_name = index_bus_from_name.data()
                    #Lấy tên nút cuối 
                    index_bus_to_name = self.bangcacphantu.model().index(row, column+6)
                    bus_to_name = index_bus_to_name.data()
                    #Đưa lên python text widget
                    self.Python_to_run_PSSE.append(UpFormat.format("#----------------------------------"))
                    
                    dialog = SearchDialog(data_to_search, self)
                    
                    if dialog.exec_() == QDialog.Accepted:
                        selected_bus = dialog.selected_item
                        selected_bus_name = dialog.selected_item_name
                    #Dòng này xuất ra cái code chuyển mạch đường dây này qua thanh cái bên kia
                        self.Python_to_run_PSSE.append("#Chuyen dinh vi cua duong day {} - {} sang thanh cai {}".format(bus_from_name,bus_to_name, selected_bus_name))
                        self.Python_to_run_PSSE.append('psspy.movebrn({},{},r"""{}""",{},r"""{}""")'.format(bus_from,bus_to,circuit_id,selected_bus,circuit_id))
                        self.Python_to_run_PSSE.append('psspy.movebrn({},{},r"""{}""",{},r"""{}""")'.format(bus_to,bus_from,circuit_id,selected_bus,circuit_id))
                    else:
                        return
                if index.data() == "MBA":
                         #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                         
                    index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                    index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                    index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                    index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                    index_name_of_transformer = self.bangcacphantu.model().index(row,2) # lấy tên MBA
                    from_bus_number = int(index_from_bus_number_1.data())
                    to_bus_number = int(index_to_bus_number_2.data())
                    third_bus_number = int(index_third_bus_number_3.data())
                    id_transformer_flow = str(index_id_transformer_flow.data())
                    name_of_transformer = str(index_name_of_transformer.data())
                    #Đưa lên python text widget
                    self.Python_to_run_PSSE.append(UpFormat.format("#----------------------------------"))
                    
                    dialog = SearchDialog(data_to_search, self)
        
                    if dialog.exec_() == QDialog.Accepted:
                        selected_bus = dialog.selected_item
                        selected_bus_name = dialog.selected_item_name
                    #Dòng này xuất ra cái code chuyển mạch đường dây này qua thanh cái bên kia
                        self.Python_to_run_PSSE.append("#Chuyen dinh vi cua MBA {} sang thanh cai {}".format(name_of_transformer, selected_bus_name))
                        self.Python_to_run_PSSE.append('psspy.move3wnd({},{},{},r"""{}""",{},r"""{}""")'.format(from_bus_number,to_bus_number,third_bus_number,id_transformer_flow, selected_bus ,id_transformer_flow))
                        self.Python_to_run_PSSE.append('psspy.dscn({})'.format(third_bus_number))
                    else:
                        return      
                        
    # -----------------Chương trình chuyển phụ tải của MBA này sang các MBA khác-------------------
    def chuyen_phu_tai_qua_mba_khac(self):
        
        #Đây là class popup ra một cửa sổ để chọn máy biến áp cần chuyển phụ tải sang
        class SearchDialog(QDialog):
        
            def __init__(self, data_to_search, parent=None):

                super().__init__()
                self.data_to_search = data_to_search
                self.filtered_data = data_to_search
                self.selected_item = None
                self.initUI()

            def initUI(self):
                layout = QVBoxLayout()

                # Tạo thanh tìm kiếm
                self.search_bar = QLineEdit(self)
                self.search_bar.setPlaceholderText('Tìm kiếm...')
                self.search_bar.textChanged.connect(self.update_list)
                layout.addWidget(self.search_bar)

                # Tạo bảng hiển thị dữ liệu
                self.table_widget = QTableWidget(self)
                self.table_widget.setColumnCount(2)
                self.table_widget.setHorizontalHeaderLabels(["Tên MBA ", "Tên nút"])
                self.update_list()  # Hiển thị dữ liệu ban đầu
                layout.addWidget(self.table_widget)

                # Tạo nút "Chọn"
                self.print_button = QPushButton('Chọn MBA cần chuyển tải đến', self)
                self.print_button.clicked.connect(self.print_selected_item)
                layout.addWidget(self.print_button)
                #Tạo kích thước 
                self.setLayout(layout)
                self.setWindowTitle('Tìm kiếm trong Load')
                self.setGeometry(100, 100, 400, 300)

            def update_list(self):
                #Mỗi lần gõ thì List sẽ được rút ngắn lại
                search_term = self.search_bar.text().lower()
                self.filtered_data = [item for item in self.data_to_search if search_term in str(item[0]).lower() or search_term in str(item[1]).lower()]

                # Cập nhật bảng
                self.table_widget.setRowCount(len(self.filtered_data))
                for row_idx, row_data in enumerate(self.filtered_data):
                    self.table_widget.setItem(row_idx, 0, QTableWidgetItem(row_data[0]))
                    self.table_widget.setItem(row_idx, 1, QTableWidgetItem(row_data[1]))

            def print_selected_item(self):
                selected_row = self.table_widget.currentRow()
                if selected_row >= 0:
                    self.selected_item = self.table_widget.item(selected_row, 0).text()  # Lấy giá trị của cột đầu tiên
                    self.selected_item_name = self.table_widget.item(selected_row, 1).text()  # Lấy giá trị của cột thứ 2
                    self.accept()  # Đóng hộp thoại và trả về giá trị
                else:
                    return
        #Đoạn chương trình chính 
        UpFormat = '<span style="color:red;">{}</span>'
        file_path = 'Vietsub.xlsx'
        sheet_name = 'Load'
        global data_to_search
        wb = load_workbook(file_path)
        sheet = wb[sheet_name]
        # Data to search chính là dữ liệu cần tìm kiếm 
        data_to_search = []
        for row in sheet.iter_rows(min_row=2, values_only=True):  # Bỏ qua hàng tiêu đề
            if row[0] is not None and row[1] is not None:  # Giả sử cột 1 và cột 2 chứa thông tin bạn cần
                data_to_search.append([str(row[0]), str(row[1])])  # Chuyển cột 1 và cột 2 thành chuỗi
        # Lấy các dòng được chọn
        rows = {index.row() for index in self.bangcacphantu.selectionModel().selectedIndexes()}
        output = []
        for row in rows:
            row_data = []
            # Lấy tất cả các dữ liệu của các dòng được chọn 
            for column in range(self.bangcacphantu.model().columnCount()):
                index = self.bangcacphantu.model().index(row, column)
                if index.data() == "Đường dây":
                    msg = QtWidgets.QMessageBox()
                    msg.setInformativeText("Đường dây mà chuyển tải cái gì ?")
                    msg.exec()
                if index.data() == "MBA":
                         #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                         
                    index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                    index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                    index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                    index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                    index_name_of_transformer = self.bangcacphantu.model().index(row,2) # lấy tên MBA
                    from_bus_number = int(index_from_bus_number_1.data())
                    to_bus_number = int(index_to_bus_number_2.data())
                    third_bus_number = int(index_third_bus_number_3.data())
                    id_transformer_flow = str(index_id_transformer_flow.data())
                    name_of_transformer = str(index_name_of_transformer.data())
                    #Đưa lên python text widget
                    self.Python_to_run_PSSE.append(UpFormat.format("#----------------------------------"))
                    
                    dialog = SearchDialog(data_to_search, self)
        
                    if dialog.exec_() == QDialog.Accepted:
                        selected_bus = dialog.selected_item
                        selected_bus_name = dialog.selected_item_name
                    #Dòng này xuất ra cái code chuyển tải từ máy biến áp này sang máy biến áp bên kia
                        self.Python_to_run_PSSE.append("#Chuyen tai cua MBA {} sang mba {}".format(name_of_transformer, selected_bus_name))
                        self.Python_to_run_PSSE.append('psspy.moveload({},r"""1""",{},r"""2""")'.format(to_bus_number, selected_bus))
                    else:
                        return      

    #----------------Chương trình scale phụ tải tại các MBA ------------------
    def scale_phu_tai_cua_mot_MBA(self):
        global data_to_scale
        #Đây là class popup ra một cửa sổ để scale tải theo yêu cầu của người sử dụng
        class SearchDialog(QDialog):
        
            def __init__(self, data_to_scale, parent=None):

                super().__init__()
                # Nạp dữ liệu từ DataFrame vào bảng
                self.data_to_scale = data_to_scale
                self.filtered_data = data_to_scale
                self.selected_item = None
                self.init_shortcuts()
                self.initUI()
            def load_data_to_table(self, data):
                """Nạp dữ liệu từ DataFrame vào QTableWidget."""
                self.table_widget.setRowCount(len(data))  # Đặt số lượng hàng
                for row_idx, (index, row) in enumerate(data.iterrows()):
                    # Cột "Tải"
                    self.table_widget.setItem(row_idx, 0, QTableWidgetItem(index))
                    # Các giá trị P hoặc Q
                    for col_idx, value in enumerate(row):
                        self.table_widget.setItem(row_idx, col_idx + 1, QTableWidgetItem(str(value)))
            def initUI(self):
                global save_case_decision
                layout = QVBoxLayout()

                # Tạo thanh tìm kiếm
                self.search_bar = QLineEdit(self)
                self.search_bar.setPlaceholderText('Tìm kiếm...')
                layout.addWidget(self.search_bar)

                # Tạo bảng hiển thị dữ liệu
                self.table_widget = QTableWidget(self)
                self.table_widget.setColumnCount(9)
                self.load_data_to_table(self.filtered_data)
                self.table_widget.setHorizontalHeaderLabels(["Tải", "Tải 2h","Tải 10h","Tải 12h","Tải 15h","Tải 18h","Tải 21h","Tải CNMax","Tải CNMin"])


                #Điều chỉnh độ rộng cột
                for column in range(self.table_widget.columnCount()):
                    if column == 0:  # Kiểm tra xem đây có phải cột đầu tiên không
                        self.table_widget.setColumnWidth(column, 150)  # Nếu là cột đầu tiên thì đặt rộng 100 pixel
                    else:
                        self.table_widget.setColumnWidth(column, 75) 
                layout.addWidget(self.table_widget)
                # Tạo nút "Scale phụ tải theo các số đã chọn"
                self.print_button = QPushButton('Scale phụ tải theo các số đã chọn (không lưu file)', self)
                self.print_button.clicked.connect(self.get_table_data_as_dataframe)
                self.print_button.clicked.connect(self.toggle_save_case_decision_false)                
                # Thêm nút nhấn này vào giao diện
                layout.addWidget(self.print_button)
                
                self.print_button_and_saved = QPushButton('Scale phụ tải theo các số đã chọn (Có lưu file -saved case)', self)
                self.print_button_and_saved.clicked.connect(self.get_table_data_as_dataframe)
                #Thay đổi trạng thái từ không lưu thành lưu
                self.print_button_and_saved.clicked.connect(self.toggle_save_case_decision_true)
                
                #Thêm nút nhấn này vào giao diện 
                layout.addWidget(self.print_button_and_saved)

                #Tạo kích thước 
                self.setLayout(layout)
                self.setWindowTitle('Scale phụ tải')
                self.setGeometry(50, 50, 800, 400)


            def toggle_save_case_decision_true(self):
                global save_case_decision
                # Thay đổi trạng thái
                save_case_decision = True
            def toggle_save_case_decision_false(self):
                global save_case_decision
                # Thay đổi trạng thái
                save_case_decision = False

            def init_shortcuts(self):
                # Phím tắt Ctrl+C để sao chép
                copy_shortcut = QShortcut(QKeySequence("Ctrl+C"), self)
                copy_shortcut.activated.connect(self.copy_selection_to_clipboard)

                # Phím tắt Ctrl+V để dán
                paste_shortcut = QShortcut(QKeySequence("Ctrl+V"), self)
                paste_shortcut.activated.connect(self.paste_from_clipboard)

            #Chương trình này dùng để copy các ô
            def copy_selection_to_clipboard(self):
                # Lấy các ô được chọn
                selected_ranges = self.table_widget.selectedRanges()
                if not selected_ranges:
                    return
                #Tạo clipboard data
                clipboard_data = []
                for selected_range in selected_ranges: #Vòng lặp để lấy dữ liệu copy
                    for row in range(selected_range.topRow(), selected_range.bottomRow() + 1):
                        row_data = []
                        for column in range(selected_range.leftColumn(), selected_range.rightColumn() + 1):
                            item = self.table_widget.item(row, column)
                            row_data.append(item.text() if item else "")
                        clipboard_data.append("\t".join(row_data))  # Sử dụng tab để phân cách các cột
                QApplication.clipboard().setText("\n".join(clipboard_data))  # Copy vào clipboard
            #Chương trình này dùng để dán các phần tử 
            def paste_from_clipboard(self):
                # Lấy dữ liệu từ clipboard
                clipboard = QApplication.clipboard()
                clipboard_data = clipboard.text()

                if not clipboard_data:
                    return

                # Chia dữ liệu theo dòng và cột
                rows = clipboard_data.split("\n")
                rows = [row.split("\t") for row in rows if row]

                # Lấy ô được chọn đầu tiên
                selected_range = self.table_widget.selectedRanges()[0] if self.table_widget.selectedRanges() else None
                start_row = selected_range.topRow() if selected_range else 0
                start_column = selected_range.leftColumn() if selected_range else 0

                # Dán dữ liệu vào bảng
                for i, row_data in enumerate(rows):
                    for j, value in enumerate(row_data):
                        row = start_row + i
                        column = start_column + j
                        if row < self.table_widget.rowCount() and column < self.table_widget.columnCount():
                            self.table_widget.setItem(row, column, QTableWidgetItem(value))


            # Chuyển cái bảng trên màn hình về lại dữ liệu (sau khi người dùng đã chỉnh sửa)
            def get_table_data_as_dataframe(self):
                """Lấy dữ liệu từ QTableWidget và chuyển thành DataFrame."""
                # Lấy số hàng và số cột
                row_count = self.table_widget.rowCount()
                column_count = self.table_widget.columnCount()

                # Tạo danh sách để lưu dữ liệu
                data = []

                # Lặp qua các hàng và cột để lấy dữ liệu
                for row in range(row_count):
                    row_data = []
                    for col in range(column_count):
                        item = self.table_widget.item(row, col)
                        row_data.append(item.text() if item else "")  # Nếu item rỗng, đặt là ""
                    data.append(row_data)

                # Tạo DataFrame
                headers = ["Tải"] + list(self.data_to_scale.columns)
                df = pd.DataFrame(data, columns=headers)

                # Cố gắng chuyển đổi các giá trị số về kiểu số nếu có thể
                for col in df.columns[1:]:  # Bỏ cột "Tải" vì nó là chỉ số
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                self.accept()
                return df

        #Đoạn chương trình chính 
        UpFormat = '<span style="color:red;">{}</span>'
        data_to_scale = []

        # Lấy các dòng được chọn
        rows = {index.row() for index in self.bangcacphantu.selectionModel().selectedIndexes()}
        output = []
        for row in rows:
            row_data = []
            # Lấy tất cả các dữ liệu của các dòng được chọn 
            for column in range(self.bangcacphantu.model().columnCount()):
                index = self.bangcacphantu.model().index(row, column)
                if index.data() == "Đường dây":
                    msg = QtWidgets.QMessageBox()
                    msg.setInformativeText("Đường dây mà scale tải cái gì ?")
                    msg.exec()
                if index.data() == "MBA":
                         #Lấy dữ liệu từ bảng excel trên màn hình với 3 nút của MBA
                    index_voltage_of_transformer = self.bangcacphantu.model().index(row,10) # lấy cấp điện áp của MBA
                    voltage_of_transformer = int(index_voltage_of_transformer.data())
                    if voltage_of_transformer == 110:
                            
                        index_from_bus_number_1 = self.bangcacphantu.model().index(row,3) #Bus cao áp
                        index_to_bus_number_2 = self.bangcacphantu.model().index(row,5)  #Bus trung áp
                        index_third_bus_number_3 = self.bangcacphantu.model().index(row,7) #Bus hạ áp
                        index_id_transformer_flow = self.bangcacphantu.model().index(row,9) #Lấy id máy biến áp
                        index_name_of_transformer = self.bangcacphantu.model().index(row,2) # lấy tên MBA
                        index_ten_cua_mba_trong_thong_so_a0_from =  self.bangcacphantu.model().index(row,11) #Tên của phần tử trong SCADA   

                        #Lấy dữ liệu các nút
                        from_bus_number = int(index_from_bus_number_1.data())
                        to_bus_number = int(index_to_bus_number_2.data())
                        third_bus_number = int(index_third_bus_number_3.data())
                        id_transformer_flow = str(index_id_transformer_flow.data())
                        #Lấy tên của máy biến áp đó
                        name_of_transformer = str(index_name_of_transformer.data())
                        #Lấy tên của MBA trong thông số A0
                        ten_cua_mba_trong_thong_so_a0_from = str(index_ten_cua_mba_trong_thong_so_a0_from.data())

                        # Lấy tải của phía 22kV các MBA 110kV
                        psspy.psseinit(500000)
                        #-------------Lấy thông tin mang tải của máy biến áp của file 2h---------------
                        if self.checkBox_2h.isChecked() == 1:
                            #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                            try:
                                psse_files_path_name_2h
                            #Báo chưa chọn đường dẫn đến file 
                            except NameError:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Chưa chọn file 2h")
                                msg.exec()
                                return
                            psspy.case(psse_files_path_name_2h)
                            P_load_MBA_2h = round(pssras.load_mw(to_bus_number, 1, actual=False),2)
                            Q_load_MBA_2h = round(pssras.load_mvar(to_bus_number, 1, actual=False),2)
                        else: 
                            P_load_MBA_2h = "_f"
                            Q_load_MBA_2h ="_f"
                        if self.checkBox_10h.isChecked() == 1:
                            #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                            try:
                                psse_files_path_name_10h
                            #Báo chưa chọn đường dẫn đến file 
                            except NameError:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Chưa chọn file 10h")
                                msg.exec()
                                return
                            psspy.case(psse_files_path_name_10h)
                            P_load_MBA_10h = round(pssras.load_mw(to_bus_number, 1, actual=False),2)
                            Q_load_MBA_10h = round(pssras.load_mvar(to_bus_number, 1, actual=False),2)
                        else: 
                            P_load_MBA_10h = "_f"
                            Q_load_MBA_10h ="_f"
                        if self.checkBox_12h.isChecked() == 1:
                            #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                            try:
                                psse_files_path_name_12h
                            #Báo chưa chọn đường dẫn đến file 
                            except NameError:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Chưa chọn file 12h")
                                msg.exec()
                                return
                            psspy.case(psse_files_path_name_12h)
                            P_load_MBA_12h = round(pssras.load_mw(to_bus_number, 1, actual=False),2)
                            Q_load_MBA_12h = round(pssras.load_mvar(to_bus_number, 1, actual=False),2)
                        else: 
                            P_load_MBA_12h = "_f"
                            Q_load_MBA_12h ="_f"
                        if self.checkBox_15h.isChecked() == 1:
                            #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                            try:
                                psse_files_path_name_15h
                            #Báo chưa chọn đường dẫn đến file 
                            except NameError:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Chưa chọn file 15h")
                                msg.exec()
                                return
                            psspy.case(psse_files_path_name_15h)
                            P_load_MBA_15h = round(pssras.load_mw(to_bus_number, 1, actual=False),2)
                            Q_load_MBA_15h = round(pssras.load_mvar(to_bus_number, 1, actual=False),2)
                        else: 
                            P_load_MBA_15h = "_f"
                            Q_load_MBA_15h ="_f"
                        if self.checkBox_18h.isChecked() == 1:
                            #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                            try:
                                psse_files_path_name_18h
                            #Báo chưa chọn đường dẫn đến file 
                            except NameError:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Chưa chọn file 18h")
                                msg.exec()
                                return
                            psspy.case(psse_files_path_name_18h)
                            P_load_MBA_18h = round(pssras.load_mw(to_bus_number, 1, actual=False),2)
                            Q_load_MBA_18h = round(pssras.load_mvar(to_bus_number, 1, actual=False),2)
                        else: 
                            P_load_MBA_18h = "_f"
                            Q_load_MBA_18h ="_f"
                        if self.checkBox_21h.isChecked() == 1:
                            #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                            try:
                                psse_files_path_name_21h
                            #Báo chưa chọn đường dẫn đến file 
                            except NameError:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Chưa chọn file 21h")
                                msg.exec()
                                return
                            psspy.case(psse_files_path_name_21h)
                            P_load_MBA_21h = round(pssras.load_mw(to_bus_number, 1, actual=False),2)
                            Q_load_MBA_21h = round(pssras.load_mvar(to_bus_number, 1, actual=False),2)                        
                        else: 
                            P_load_MBA_21h = "_f"
                            Q_load_MBA_21h ="_f"
                        if self.checkBox_CNma.isChecked() == 1:
                            #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                            try:
                                psse_files_path_name_CNMax
                            #Báo chưa chọn đường dẫn đến file 
                            except NameError:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Chưa chọn file CN Max")
                                msg.exec()
                                return
                            psspy.case(psse_files_path_name_CNMax)
                            P_load_MBA_CN_Max = round(pssras.load_mw(to_bus_number, 1, actual=False),2)
                            Q_load_MBA_CN_Max = round(pssras.load_mvar(to_bus_number, 1, actual=False),2) 
                        else: 
                            P_load_MBA_CN_Max = "_f"
                            Q_load_MBA_CN_Max ="_f"

                        if self.checkBox_CNmi.isChecked() == 1:
                            #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                            try:
                                psse_files_path_name_CNMin
                            #Báo chưa chọn đường dẫn đến file 
                            except NameError:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Chưa chọn file CN Min")
                                msg.exec()
                                return
                            psspy.case(psse_files_path_name_CNMin)
                            P_load_MBA_CN_Min = round(pssras.load_mw(to_bus_number, 1, actual=False),2)
                            Q_load_MBA_CN_Min = round(pssras.load_mvar(to_bus_number, 1, actual=False),2) 
                        else: 
                            P_load_MBA_CN_Min = "_f"
                            Q_load_MBA_CN_Min ="_f"
                            #Đoạn này lấy thông số SCADA
                        
                        #Kiểm tra giá trị có nan hay không
                        def is_nan(value):
                            try:
                                return math.isnan(float(value))
                            except (ValueError, TypeError):
                                return False
                        index_ten_cua_mba_trong_thong_so_a0_from_14 =  self.bangcacphantu.model().index(row,13)
                        ten_cua_mba_trong_thong_so_a0_from_14 = str(index_ten_cua_mba_trong_thong_so_a0_from_14.data()) 
                        #Kiểm tra xem có map với thông số A0 MBA đó chưa
                        Checking_SCADA = is_nan(ten_cua_mba_trong_thong_so_a0_from_14)

                        if Checking_SCADA is not True: 
                            date_choice = self.ChongnayxemthsA0.currentText()
                            item_to_plot = ten_cua_mba_trong_thong_so_a0_from
                            # Vẽ công suất P 
                            item_to_plot = item_to_plot +"-P"
                            try:
                                scada_multiple_files
                            except NameError:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Cảnh báo")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setInformativeText("Chưa lấy các file thông số A0")
                                msg.exec()
                                return

                            scada_multiple_files_filtered = scada_multiple_files[scada_multiple_files['Thứ'] == date_choice ]

                            # Lấy dữ liệu từ các file 
                            excelrawdata1 =  pd.read_excel(scada_multiple_files_filtered.iloc[0,0], sheet_name= 'Sheet', engine='xlrd')
                            excelrawdata2 =  pd.read_excel(scada_multiple_files_filtered.iloc[1,0], sheet_name= 'Sheet', engine='xlrd')
                            excelrawdata3 =  pd.read_excel(scada_multiple_files_filtered.iloc[2,0], sheet_name= 'Sheet', engine='xlrd')
                            excelrawdata4 =  pd.read_excel(scada_multiple_files_filtered.iloc[3,0], sheet_name= 'Sheet', engine='xlrd')

                            # Ghép mô tả và key để search
                            List_of_substation = excelrawdata1['Mô Tả'].astype(str) + "-" + excelrawdata1['Thông Số'].astype(str)
                            excelrawdata1['Key'] = List_of_substation
                            List_of_substation = excelrawdata2['Mô Tả'].astype(str) + "-" + excelrawdata2['Thông Số'].astype(str)
                            excelrawdata2['Key'] = List_of_substation
                            List_of_substation = excelrawdata3['Mô Tả'].astype(str) + "-" + excelrawdata3['Thông Số'].astype(str)
                            excelrawdata3['Key'] = List_of_substation
                            List_of_substation = excelrawdata4['Mô Tả'].astype(str) + "-" + excelrawdata4['Thông Số'].astype(str)
                            excelrawdata4['Key'] = List_of_substation   
                            #--------Bắt đầu tiến trình vẽ đồ thị ---------------- 
                            index_of_item1 = excelrawdata1.index[(excelrawdata1['Key']== item_to_plot )].values.tolist()     
                            index_of_item2 = excelrawdata2.index[(excelrawdata2['Key']== item_to_plot )].values.tolist()
                            index_of_item3 = excelrawdata3.index[(excelrawdata3['Key']== item_to_plot )].values.tolist()
                            index_of_item4 = excelrawdata4.index[(excelrawdata4['Key']== item_to_plot )].values.tolist()
                            hour = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]                            
                            #-----------Lấy dữ liệu P SCADA ngày thứ nhất---------------------
                            # Nếu không tìm thấy giá trị
                            if not index_of_item1:
                                scada_data_2h_1 = '_f'  # Hoặc giá trị mặc định
                                scada_data_10h_1 = '_f'
                                scada_data_12h_1 = '_f'
                                scada_data_15h_1 = '_f'
                                scada_data_18h_1 = '_f'
                                scada_data_21h_1 = '_f'                                
                            else:
                                scada_data_2h_1 = excelrawdata1.iloc[index_of_item1[0], 9] # Lấy giá tị P từ file SCADA excel
                                scada_data_10h_1 = excelrawdata1.iloc[index_of_item1[0],17]
                                scada_data_12h_1 = excelrawdata1.iloc[index_of_item1[0],19]
                                scada_data_15h_1 = excelrawdata1.iloc[index_of_item1[0],22]
                                scada_data_18h_1 = excelrawdata1.iloc[index_of_item1[0],25]
                                scada_data_21h_1 = excelrawdata1.iloc[index_of_item1[0],28]
                            scada_data_CN_Max_1 = "_f"
                            scada_data_CN_Min_1 = "_f"
                            
                            #-----------Lấy dữ liệu P SCADA ngày thứ hai---------------------
                            if not index_of_item2:
                                scada_data_2h_2 = '_f'  # Hoặc giá trị mặc định
                                scada_data_10h_2 = '_f'
                                scada_data_12h_2 = '_f'
                                scada_data_15h_2 = '_f'
                                scada_data_18h_2 = '_f'
                                scada_data_21h_2 = '_f'
                            else:
                                scada_data_2h_2 = excelrawdata2.iloc[index_of_item2[0],9]
                                scada_data_10h_2 = excelrawdata2.iloc[index_of_item2[0],17]
                                scada_data_12h_2 = excelrawdata2.iloc[index_of_item2[0],19]
                                scada_data_15h_2 = excelrawdata2.iloc[index_of_item2[0],22]
                                scada_data_18h_2 = excelrawdata2.iloc[index_of_item2[0],25]
                                scada_data_21h_2 = excelrawdata2.iloc[index_of_item2[0],28]                            
                            scada_data_CN_Max_2 = "_f"
                            scada_data_CN_Min_2 = "_f"
                            #-----------Lấy dữ liệu P SCADA ngày thứ ba---------------------
                            if not index_of_item3:
                                scada_data_2h_3 = '_f'  # Hoặc giá trị mặc định
                                scada_data_10h_3 = '_f'
                                scada_data_12h_3 = '_f'
                                scada_data_15h_3 = '_f'
                                scada_data_18h_3 = '_f'
                                scada_data_21h_3 = '_f'
                            else:
                                scada_data_2h_3 = excelrawdata3.iloc[index_of_item3[0],9]
                                scada_data_10h_3 = excelrawdata3.iloc[index_of_item3[0],17]
                                scada_data_12h_3 = excelrawdata3.iloc[index_of_item3[0],19]
                                scada_data_15h_3 = excelrawdata3.iloc[index_of_item3[0],22]
                                scada_data_18h_3 = excelrawdata3.iloc[index_of_item3[0],25]
                                scada_data_21h_3 = excelrawdata3.iloc[index_of_item3[0],28]                            
                            scada_data_CN_Max_3 = "_f"
                            scada_data_CN_Min_3 = "_f"
                            #-----------Lấy dữ liệu P SCADA ngày thứ tư---------------------
                            if not index_of_item4:
                                scada_data_2h_4 = '_f'  # Hoặc giá trị mặc định
                                scada_data_10h_4 = '_f'
                                scada_data_12h_4 = '_f'
                                scada_data_15h_4 = '_f'
                                scada_data_18h_4 = '_f'
                                scada_data_21h_4 = '_f'
                            else:
                                scada_data_2h_4 = excelrawdata4.iloc[index_of_item4[0],9]
                                scada_data_10h_4 = excelrawdata4.iloc[index_of_item4[0],17]
                                scada_data_12h_4 = excelrawdata4.iloc[index_of_item4[0],19]
                                scada_data_15h_4 = excelrawdata4.iloc[index_of_item4[0],22]
                                scada_data_18h_4 = excelrawdata4.iloc[index_of_item4[0],25]
                                scada_data_21h_4 = excelrawdata4.iloc[index_of_item4[0],28]                            
                            scada_data_CN_Max_4 = "_f"
                            scada_data_CN_Min_4 = "_f"
                            #------------Lấy ngày từ dữ liệu SCADA------------------
                            legend_day_1 = excelrawdata1.iloc[index_of_item1[0],6].date().isoformat()
                            legend_day_2 = excelrawdata2.iloc[index_of_item2[0],6].date().isoformat()
                            legend_day_3 = excelrawdata3.iloc[index_of_item3[0],6].date().isoformat()
                            legend_day_4 = excelrawdata4.iloc[index_of_item4[0],6].date().isoformat()
                        #Đưa lên python text widget
                        self.Python_to_run_PSSE.append(UpFormat.format("#-------------------------------------------------"))
                        self.Python_to_run_PSSE.append(UpFormat.format("#----SCALE TẢI CHO MBA {}-------".format(name_of_transformer)))
                        #Nếu chưa map với SCADA thì 
                        if Checking_SCADA is True: 
                            data_to_scale = pd.DataFrame(
                                [
                                    [P_load_MBA_2h, P_load_MBA_10h, P_load_MBA_12h, P_load_MBA_15h, P_load_MBA_18h, P_load_MBA_21h, P_load_MBA_CN_Max, P_load_MBA_CN_Min],  # P (công suất tác dụng)
                                    [Q_load_MBA_2h, Q_load_MBA_10h, Q_load_MBA_12h, Q_load_MBA_15h, Q_load_MBA_18h, Q_load_MBA_21h, Q_load_MBA_CN_Max, Q_load_MBA_CN_Min],  # Q (công suất phản kháng)
                                ],
                                columns=["2h", "10h", "12h", "15h", "18h", "21h", "CNMax", "CNMin"],
                                index=['P_{}'.format(name_of_transformer), "Q_{}".format(name_of_transformer)]
                            )
                            data_to_scale.T                        
                        #Nếu đã map với SCADA thì 
                        if Checking_SCADA is not True:
                            # Tạo DataFrame ban đầu
                            data_to_scale = pd.DataFrame(
                                [
                                    [P_load_MBA_2h, P_load_MBA_10h, P_load_MBA_12h, P_load_MBA_15h, P_load_MBA_18h, P_load_MBA_21h, P_load_MBA_CN_Max, P_load_MBA_CN_Min],  # P (công suất tác dụng)
                                    [Q_load_MBA_2h, Q_load_MBA_10h, Q_load_MBA_12h, Q_load_MBA_15h, Q_load_MBA_18h, Q_load_MBA_21h, Q_load_MBA_CN_Max, Q_load_MBA_CN_Min],  # Q (công suất phản kháng)
                                    [scada_data_2h_1, scada_data_10h_1, scada_data_12h_1, scada_data_15h_1, scada_data_18h_1, scada_data_21h_1, scada_data_CN_Max_1, scada_data_CN_Min_1],
                                    [scada_data_2h_2, scada_data_10h_2, scada_data_12h_2, scada_data_15h_2, scada_data_18h_2, scada_data_21h_2, scada_data_CN_Max_2, scada_data_CN_Min_2],
                                    [scada_data_2h_3, scada_data_10h_3, scada_data_12h_3, scada_data_15h_3, scada_data_18h_3, scada_data_21h_3, scada_data_CN_Max_3, scada_data_CN_Min_3],
                                    [scada_data_2h_4, scada_data_10h_4, scada_data_12h_4, scada_data_15h_4, scada_data_18h_4, scada_data_21h_4, scada_data_CN_Max_4, scada_data_CN_Min_4],
                                ],
                                columns=["2h", "10h", "12h", "15h", "18h", "21h", "CNMax", "CNMin"],
                                index=[
                                    f'P_{name_of_transformer}', 
                                    f"Q_{name_of_transformer}",
                                    f'P_SCADA_{legend_day_1}',
                                    f'P_SCADA_{legend_day_2}',
                                    f'P_SCADA_{legend_day_3}',
                                    f'P_SCADA_{legend_day_4}',
                                ]
                            )
                            # Xử lý dữ liệu SCADA
                            scada_data_only = data_to_scale.iloc[2:]  # Lấy chỉ dữ liệu SCADA (bỏ P và Q)
                            # Hàm xử lý để loại bỏ '_f' khỏi dữ liệu
                            def process_scada_values(value):
                                try:
                                    return float(value)  # Chuyển sang số nếu có thể
                                except ValueError:
                                    return np.nan  # Trả về None nếu không chuyển được (gặp '_f')
                            # Áp dụng xử lý các giá trị SCADA
                            scada_data_processed = scada_data_only.applymap(process_scada_values)
                            # Tính trung bình, bỏ qua các giá trị None
                            mean_row = round(scada_data_processed.mean(axis=0, skipna=True),2)
                            # Tính giá trị lớn nhất, bỏ qua các giá trị None
                            max_row = round(scada_data_processed.max(axis=0, skipna=True),2)
                            # Thêm hàng trung bình và max vào DataFrame
                            data_to_scale.loc[f"SCADA_Trung bình"] = mean_row
                            data_to_scale.loc[f"SCADA_Cực đại"] = max_row
                            data_to_scale.T 
                        #Nạp dữ liệu đọc được từ PSS/E lên bảng để coi
                        dialog = SearchDialog(data_to_scale, self)  
                        #Đoạn chương trình này xuất ra cái code scale tải           
                        if dialog.exec_() == QDialog.Accepted:
                            if save_case_decision == False: 
                                data_tai_new = dialog.get_table_data_as_dataframe()
                                self.Python_to_run_PSSE.append('import os')
                                self.Python_to_run_PSSE.append('import psspy')
                                self.Python_to_run_PSSE.append('file_name = os.path.basename(psspy.sfiles()[0]).upper()')
                                self.Python_to_run_PSSE.append('if "_2H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,1]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,1]))                 
                                self.Python_to_run_PSSE.append('if "_10H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,2]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,2]))                           
                                self.Python_to_run_PSSE.append('if "_12H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,3]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,3]))  
                                self.Python_to_run_PSSE.append('if "_15H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,4]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,4]))
                                self.Python_to_run_PSSE.append('if "_18H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,5]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,5]))
                                self.Python_to_run_PSSE.append('if "_21H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,6]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,6]))
                                self.Python_to_run_PSSE.append('if "_CNMAX_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,7]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,7]))
                                self.Python_to_run_PSSE.append('if "_CNMIN_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,8]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,8]))
                            if save_case_decision == True:
                                data_tai_new = dialog.get_table_data_as_dataframe()
                                self.Python_to_run_PSSE.append('import os')
                                self.Python_to_run_PSSE.append('import psspy')
                                # Dòng này để lấy tên File
                                self.Python_to_run_PSSE.append('file_name = os.path.basename(psspy.sfiles()[0]).upper()')
                                self.Python_to_run_PSSE.append('if "_2H_" in file_name: ')
                                #Các dòng này SCALE tải theo bảng 
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,1]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,1]))
                                #Thêm một dòng để lưu file 
                                self.Python_to_run_PSSE.append('    psspy.fdns()  # Chạy lại trào lưu') 
                                self.Python_to_run_PSSE.append('    psspy.save(r"""{}""")'.format(psse_files_path_name_2h))
                                #Scale tải file 10h                                   
                                self.Python_to_run_PSSE.append('if "_10H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,2]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,2])) 
                                #Thêm một dòng để lưu file 
                                self.Python_to_run_PSSE.append('    psspy.fdns()  # Chạy lại trào lưu') 
                                self.Python_to_run_PSSE.append('    psspy.save(r"""{}""")'.format(psse_files_path_name_10h))                          
                                #Scale tải File 12h  
                                self.Python_to_run_PSSE.append('if "_12H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,3]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,3]))
                                #Thêm một dòng để lưu file                                
                                self.Python_to_run_PSSE.append('    psspy.fdns()  # Chạy lại trào lưu') 
                                self.Python_to_run_PSSE.append('    psspy.save(r"""{}""")'.format(psse_files_path_name_12h))       
                                #Scale tải File 15h                            
                                self.Python_to_run_PSSE.append('if "_15H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,4]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,4]))
                                #Thêm một dòng để lưu file 
                                self.Python_to_run_PSSE.append('    psspy.fdns()  # Chạy lại trào lưu') 
                                self.Python_to_run_PSSE.append('    psspy.save(r"""{}""")'.format(psse_files_path_name_15h))                                   
                                #Scale tải File 18h
                                self.Python_to_run_PSSE.append('if "_18H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,5]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,5]))
                                #Thêm một dòng để lưu file 
                                self.Python_to_run_PSSE.append('    psspy.fdns()  # Chạy lại trào lưu')  
                                self.Python_to_run_PSSE.append('    psspy.save(r"""{}""")'.format(psse_files_path_name_18h))                                    
                                #Scale tải File 21h
                                self.Python_to_run_PSSE.append('if "_21H_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,6]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,6]))
                                #Thêm một dòng để lưu file 
                                self.Python_to_run_PSSE.append('    psspy.fdns()  # Chạy lại trào lưu')  
                                self.Python_to_run_PSSE.append('    psspy.save(r"""{}""")'.format(psse_files_path_name_21h))       
                                #Scale tải File CN_Max
                                self.Python_to_run_PSSE.append('if "_CNMAX_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,7]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,7]))
                                #Thêm một dòng để lưu file 
                                self.Python_to_run_PSSE.append('    psspy.fdns()  # Chạy lại trào lưu')  
                                self.Python_to_run_PSSE.append('    psspy.save(r"""{}""") # Lưu file'.format(psse_files_path_name_CNMax)) 
                                #Scale tải File CN_Min
                                self.Python_to_run_PSSE.append('if "_CNMIN_" in file_name: ')
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[{},_f,_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[0,8]))     
                                self.Python_to_run_PSSE.append('    psspy.load_chng_6({},r"""1""",[_i,_i,_i,_i,_i,_i,_i],[_f,{},_f,_f,_f,_f,_f,_f],"")'.format(to_bus_number,data_tai_new.iloc[1,8])) 
                                #Thêm một dòng để lưu file và chạy lại trào lưu công suất
                                self.Python_to_run_PSSE.append('    psspy.fdns()  # Chạy lại trào lưu')  
                                self.Python_to_run_PSSE.append('    psspy.save(r"""{}""")'.format(psse_files_path_name_CNMin))                                 
                        else:
                            return     
                    else:
                        msg = QtWidgets.QMessageBox()
                        msg.setInformativeText("Chưa Scale được tải MBA 500-220")
                        msg.exec()                  
        

    #------------------------*****-----CHƯƠNG TRÌNH CHÍNH CHẠY FILE PYTHON LÊN TẤT CẢ CÁC FILE SAV ĐÃ CHỌN -----$$$$$--------------------
    def chayfile_python_trentatcacfile_sav(self):
        #Sử dụng biến này để xuất các kết quả tính toán (tăng/giảm + tổn thất + )
        global excel_result_dataframe 
        #Load biểu tượng quay vòng tròn
        self.RunPythontoPSSE.setStyleSheet("background-color : yellow")
        movie = QMovie("Loading.gif")
        self.loading.setMovie(movie)
        movie.start()
        QGuiApplication.processEvents()            

        #Hàm này tra tên tiếng việt của nút rồi trả về tiếng việt của nút đó
        def vlookup(lookup_value, lookup_table, old_value):
            """Optimized VLOOKUP using a dictionary."""
            # Tra cứu trực tiếp trong dictionary
            return lookup_table.get(lookup_value, old_value)
                
        psspy.psseinit(500000)
        _translate = QtCore.QCoreApplication.translate
        #For mat các chữ này 
        headerformat  = '<span style="font-weight: bold;">{}</span>'
        warningFormat = '<span style="color:purple;">{}</span>'
        UpFormat = '<span style="color:red;">{}</span>'
        DownFormat = '<span style="color:green;">{}</span>'
        self.text_tonthat_tlcs.append(_translate("MainWindow",headerformat.format("-------------ĐỘ TĂNG/ GIẢM TỔN THẤT ----------")))
        #Xóa các text trên các thanh kết quả 
        self.text_cacphantu_daytai.clear()
        self.text_dotanggiam_tlcs.clear()
        self.text_tonthat_tlcs.clear()
        self.text_outputbar.clear()
        self.text_voltage_warning.clear()
        #Đếm số file sav cần chạy và số file sav đã chạy 
        so_file_sav_can_chay= self.checkBox_2h.isChecked() + self.checkBox_10h.isChecked() + self.checkBox_12h.isChecked() +self.checkBox_15h.isChecked() +self.checkBox_18h.isChecked() +self.checkBox_21h.isChecked() +self.checkBox_CNma.isChecked() + self.checkBox_CNmi.isChecked()
        so_file_sav_da_chay = 0
        #Trả thanh progress về giá trị 0
        self.progressBar.setValue(0)
        #Đọc và việt sub các nút
        if self.checkBox_vietsub.isChecked() == 1:
            vietsub_bus = pd.read_excel("Vietsub.xlsx",sheet_name="Lib_Bus")
            vietsub_bus = dict(zip(vietsub_bus['BUSNUMBER'], vietsub_bus['VIETSUB']))
        
        #Function Vlookup 
        vlookup_func = lambda x: vlookup(x, vietsub_bus, x)
        #Timer bắt đầu đếm 
        tic = time.perf_counter()
    #-------------------------------Chạy file 2h-------------------------
        
        if self.checkBox_2h.isChecked() == 1:
            try:
                psse_files_path_name_2h 
                #Báo ra nếu chưa chọn file 
            except NameError:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Information)
                msg.setInformativeText("Chưa chọn file 2h, vui lòng chọn lại file 2h")
                msg.exec()
                return
            #Đọc file PSS/E sav lúc 2h sáng
            psspy.case(psse_files_path_name_2h)
            #Tăng số file sav đã chạy lên 1
            so_file_sav_da_chay = so_file_sav_da_chay + 1
            self.text_dotanggiam_tlcs.append(_translate("MainWindow",headerformat.format("-------------ĐỘ TĂNG/ GIẢM MANG TẢI CHẾ ĐỘ 2h-----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow",headerformat.format("-------------CÁC PHẦN TỬ ĐẦY QUÁ TẢI MỚI CHẾ ĐỘ 2h----------")))
            self.text_voltage_warning.append(_translate("MainWindow",headerformat.format("-------------CÁC NÚT CAO/THẤP ÁP CHẾ ĐỘ 2h----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow"," "))
            #Tính toán tổn thất trước khi thực hiện file .py
            PQ_Loss_of_2h_before = psspy.ardat(20,'LOSS')
            P_Loss_of_2h_before = PQ_Loss_of_2h_before[1].real
            Q_Loss_of_2h_before = PQ_Loss_of_2h_before[1].imag

            #Lấy dữ liệu mang tải đường dây trước khi chạy file 
            sid = -1; owner = 1; ties = 3;  flag = 2 ; entry = 1                                             
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q']) #Lấy % mang tải và P,Q của đường dây 
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])
            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_before = pd.DataFrame(branch_combine_array).T
            branch_dataframe_before.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            #Lấy dữ liệu điện áp các nút 220-110kV sau trước khi chạy file
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_before =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_before.columns = ['NAME','NUMBER','PU','KV','BASE']

            #Lấy dữ liệu mang tải máy biến áp trước khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus + trans_PQ
            transformer_dataframe_before = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_before.columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]
            #Vlookup vietsub các nút 
            if self.checkBox_vietsub.isChecked() == 1:
                transformer_dataframe_before['XFRNAME']= transformer_dataframe_before['WIND1NUMBER'].map(vlookup_func)
                branch_dataframe_before['FROMNAME']= branch_dataframe_before['FROMNUMBER'].map(vlookup_func)
                branch_dataframe_before['TONAME']= branch_dataframe_before['TONUMBER'].map(vlookup_func)
                if self.checkBox_Canhbaodienap.isChecked() == 1:
                    bus_data_dataframe_before['NAME']= bus_data_dataframe_before['NUMBER'].map(vlookup_func)

            #Thực thi từng lệnh trong file python đã đọc

            #Thực hiện file .py ở ngoài
            if self.chaydonfilepython.isChecked() == 1:
                with open(psse_files_path_name_python) as f:
                    _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                    _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                    _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                    exec(f.read()) # Thực thi từng dòng trong file đã đọc
                    psspy.fdns()  # Chạy lại trào lưu 
            
            #Thực hiện nhiều file .py đã chọn
            if self.chaydafilepython.isChecked() == 1:
                for i in range(len(python_multiple_files_path_name)):
                    with open(python_multiple_files_path_name[i]) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                          # Chạy lại trào lưu                       
                psspy.fdns()
            #Thực hiện trực tiếp các lệnh python trên cửa sổ 
            if self.chaytructieptuphantu.isChecked() == 1:
                Text = self.Python_to_run_PSSE.toPlainText()
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                exec(Text)
                psspy.fdns()


            #Kiểm tra xem file có hội tụ hay không
            check_converge = psspy.solved()
            so_vong_lap_tinhtoan = psspy.iterat()

            if check_converge == 1:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 2h mất hội tụ ")
                self.text_outputbar.append(warningFormat.format("File 2h mất hội tụ"))
                msg.exec()
            if check_converge == 0:
                self.text_outputbar.append(DownFormat.format("File 2h hội tụ sau {} vòng lặp".format(so_vong_lap_tinhtoan)))
             
            #Kiểm tra xem nút nào bị tách đảo
            islandbuslist = [j for i in psspy.treedat(999)['island_busnum'] for j in i]
            if len(islandbuslist) > 0:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 2h bị tách đảo")
                self.text_outputbar.append(warningFormat.format("File 2h bị tách đảo"))
                msg.exec()
                self.text_outputbar.append("Số nút bị tách đảo trong file 2h")
                islandbuslist_string = ' '.join(str(e)for e in islandbuslist)
                self.text_outputbar.append(islandbuslist_string)
            if len(islandbuslist) == 0:
                self.text_outputbar.append("File 2h không bị tách đảo")

            #Lấy dữ liệu mang tải đường dây sau khi chạy file 
            sid = -1;  owner = 1; ties = 3; flag = 2; entry = 1                                                
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q'])
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])

            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_after = pd.DataFrame(branch_combine_array).T
            branch_dataframe_after.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            #Lấy dữ liệu mang tải máy biến áp sau khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus  + trans_PQ
            transformer_dataframe_after = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_after .columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            #Lấy dữ liệu điện áp các nút 220-110kV sau khi chạy file
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_after =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_after.columns = ['NAME','NUMBER','PU','KV','BASE']


            #So sánh và xuất ra sự khác biệt giữa các đường dây
            for i in range(len(branch_dataframe_after)):
                #Làm tròn đến 1 chữ số
                branch_dataframe_before.loc[i,"PCTRATE1"] = round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                branch_dataframe_after.loc[i,"PCTRATE1"]= round(branch_dataframe_after.loc[i,"PCTRATE1"],1)
                branch_dataframe_before.loc[i,"P"] = round(branch_dataframe_before.loc[i,"P"],0)  
                branch_dataframe_before.loc[i,"Q"] = round(branch_dataframe_before.loc[i,"Q"],0)
                branch_dataframe_after.loc[i,"P"] = round(branch_dataframe_after.loc[i,"P"],0)
                branch_dataframe_after.loc[i,"Q"] = round(branch_dataframe_after.loc[i,"Q"],0)
                #So sánh trào lưu công suất của các nhánh đường dây trước và sau khi chạy file .py
                Delta_loading_change =  round(branch_dataframe_after.loc[i,"PCTRATE1"],1) -round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                delta_mw_change = round(branch_dataframe_after.loc[i,"P"],1) - round(branch_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 

                if branch_dataframe_after.loc[i,"PCTRATE1"] > 80 and branch_dataframe_before.loc[i,"PCTRATE1"] < 80 and branch_dataframe_after.loc[i,"PCTRATE1"] < 90:
                    result = "Đường dây đầy tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - " + str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 90 and branch_dataframe_before.loc[i,"PCTRATE1"] < 90 and branch_dataframe_after.loc[i,"PCTRATE1"] < 100:
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 100 and branch_dataframe_before.loc[i,"PCTRATE1"] < 100 :
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                QGuiApplication.processEvents() 
                                   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các đường dây tăng % mang tải
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        QGuiApplication.processEvents() 
                        if branch_dataframe_after.loc[i,"PCTRATE1"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if branch_dataframe_after.loc[i,"PCTRATE1"] < 80:
                            self.text_dotanggiam_tlcs.append(result)                         
                        QGuiApplication.processEvents() 
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các đường dây giảm % mang tải 
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+  " giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " xuống "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents()    
            QGuiApplication.processEvents()
            #--------------------So sánh và xuất ra sự khác biệt giữa các MBA------------------------
            for i in range(len(transformer_dataframe_after)):
                #Làm tròn đến 1 chữ số
                transformer_dataframe_before.loc[i,"PCTMVARATEA"] = round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_after.loc[i,"PCTMVARATEA"]= round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_before.loc[i,"P"] = round(transformer_dataframe_before.loc[i,"P"],0)
                transformer_dataframe_before.loc[i,"Q"] = round(transformer_dataframe_before.loc[i,"Q"],0)
                transformer_dataframe_after.loc[i,"P"] = round(transformer_dataframe_after.loc[i,"P"],0)
                transformer_dataframe_after.loc[i,"Q"] = round(transformer_dataframe_after.loc[i,"Q"],0)
                #So sánh 
                Delta_loading_change = round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1) - round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1) 
                delta_mw_change = round(transformer_dataframe_after.loc[i,"P"],1) - round(transformer_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên ---------
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 80 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 90 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 90 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 90 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 100 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 100 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 100  :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                
                #--------------------Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài-------------------------      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các MBA tăng % mang tải
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 80:
                            self.text_dotanggiam_tlcs.append(result)   
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents()
                    if Delta_loading_change < 0:
                        #Xuất các MBA giảm % mang tải 
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + "giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " giảm "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents()
        
            #  ------------------Cảnh báo điện áp cao, điện áp thấp ---------------------------------------
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                for i in range(len(bus_data_dataframe_after)):
                    Delta_voltage_change =  round(bus_data_dataframe_after.loc[i,"KV"],2) - round(bus_data_dataframe_before.loc[i,"KV"],2)
                    bus_data_dataframe_after.loc[i,"PU"] = round(bus_data_dataframe_after.loc[i,"PU"],2)
                    bus_data_dataframe_before.loc[i,"PU"] = round(bus_data_dataframe_before.loc[i,"PU"],2)
                    bus_data_dataframe_after.loc[i,"KV"] = round(bus_data_dataframe_after.loc[i,"KV"],2)
                    bus_data_dataframe_before.loc[i,"KV"] = round(bus_data_dataframe_before.loc[i,"KV"],2)                
                    if bus_data_dataframe_after.loc[i,"KV"] > 75.0:
                    #Tìm các nút điện áp cao trồi lên
                        if bus_data_dataframe_after.loc[i,"PU"] > 1.1 and bus_data_dataframe_before.loc[i,"PU"] < 1.1 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " tăng cao ↑ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " lên "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(UpFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
                        #Tìm các nút điện áp thấp sụt xuống
                        if bus_data_dataframe_after.loc[i,"PU"] < 0.95 and bus_data_dataframe_before.loc[i,"PU"] > 0.95 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " giảm thấp ↓ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " xuống "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(DownFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
            QGuiApplication.processEvents() 
            #Tính toán tổn thất sau khi chạy file 
            PQ_Loss_of_2h_after = psspy.ardat(20,'LOSS')
            P_Loss_of_2h_after = PQ_Loss_of_2h_after[1].real
            Q_Loss_of_2h_after = PQ_Loss_of_2h_after[1].imag
            delta_P_loss = round(P_Loss_of_2h_before - P_Loss_of_2h_after,5)
            delta_Q_loss = Q_Loss_of_2h_before - Q_Loss_of_2h_after
            if delta_P_loss <= 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 2h tăng: ↑ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(UpFormat.format(delta_P_loss_result))
            if delta_P_loss > 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 2h giảm: ↓ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(DownFormat.format(delta_P_loss_result))
                
            self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
            QGuiApplication.processEvents() 


        #------------------10H--------------------
        if self.checkBox_10h.isChecked() == 1:
            try:
                psse_files_path_name_10h 
                #Báo ra nếu chưa chọn file 
            except NameError:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Information)
                msg.setInformativeText("Chưa chọn file 10h, vui lòng chọn lại file 10h")
                msg.exec()
                return
            psspy.case(psse_files_path_name_10h)
            so_file_sav_da_chay = so_file_sav_da_chay + 1
            self.text_dotanggiam_tlcs.append(_translate("MainWindow",headerformat.format("-------------ĐỘ TĂNG/ GIẢM MANG TẢI CHẾ ĐỘ 10h-----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow",headerformat.format("-------------CÁC PHẦN TỬ ĐẦY QUÁ TẢI MỚI CHẾ ĐỘ 10h----------")))
            self.text_voltage_warning.append(_translate("MainWindow",headerformat.format("-------------CÁC NÚT CAO/THẤP ÁP CHẾ ĐỘ 10h----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow"," "))
            #Tính toán tổn thất trước khi thực hiện file .py
            PQ_Loss_of_10h_before = psspy.ardat(20,'LOSS')
            P_Loss_of_10h_before = PQ_Loss_of_10h_before[1].real
            Q_Loss_of_10h_before = PQ_Loss_of_10h_before[1].imag            
            #Lấy dữ liệu mang tải đường dây trước khi chạy file 
            sid = -1; owner = 1; ties = 3;  flag = 2 ; entry = 1                                             
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q']) #Lấy % mang tải và P,Q của đường dây 
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])
            #Tổng hợp các mảng này lại và tạo dataframe
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_before = pd.DataFrame(branch_combine_array).T
            branch_dataframe_before.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV sau trước khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_before =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_before.columns = ['NAME','NUMBER','PU','KV','BASE']

            #Lấy dữ liệu mang tải máy biến áp trước khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus + trans_PQ
            transformer_dataframe_before = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_before.columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            #Vlookup vietsub
            if self.checkBox_vietsub.isChecked() == 1:
                transformer_dataframe_before['XFRNAME']= transformer_dataframe_before['WIND1NUMBER'].map(vlookup_func)
                branch_dataframe_before['FROMNAME']= branch_dataframe_before['FROMNUMBER'].map(vlookup_func)
                branch_dataframe_before['TONAME']= branch_dataframe_before['TONUMBER'].map(vlookup_func)
                if self.checkBox_Canhbaodienap.isChecked() == 1:
                    bus_data_dataframe_before['NAME']= bus_data_dataframe_before['NUMBER'].map(vlookup_func)

            #Thực thi từng lệnh trong file python đã đọc 
            if self.chaydonfilepython.isChecked() == 1:
                with open(psse_files_path_name_python) as f:
                    _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                    _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                    _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                    exec(f.read()) # Thực thi từng dòng trong file đã đọc
                    psspy.fdns()  # Chạy lại trào lưu 

            #Thực hiện nhiều file .py đã chọn
            if self.chaydafilepython.isChecked() == 1:
                for i in range(len(python_multiple_files_path_name)):
                    with open(python_multiple_files_path_name[i]) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu   

            #Thực hiện trực tiếp các lệnh python trên cửa sổ 
            if self.chaytructieptuphantu.isChecked() == 1:
                Text = self.Python_to_run_PSSE.toPlainText()
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                exec(Text)
                psspy.fdns()

            #Kiểm tra xem file có hội tụ hay không
            check_converge = psspy.solved()
            so_vong_lap_tinhtoan = psspy.iterat()
            if check_converge == 1:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 10h mất hội tụ ")
                self.text_outputbar.append(warningFormat.format("File 10h mất hội tụ"))
                msg.exec()
            if check_converge == 0:
                self.text_outputbar.append(DownFormat.format("File 10h hội tụ sau {} vòng lặp".format(so_vong_lap_tinhtoan)))
             
            #Kiểm tra xem nút nào bị tách đảo
            islandbuslist = [j for i in psspy.treedat(999)['island_busnum'] for j in i]
            if len(islandbuslist) > 0:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 10h bị tách đảo")
                self.text_outputbar.append(warningFormat.format("File 10h bị tách đảo"))
                msg.exec()
                self.text_outputbar.append("Số nút bị tách đảo trong file 10h")
                islandbuslist_string = ' '.join(str(e)for e in islandbuslist)
                self.text_outputbar.append(islandbuslist_string)
            if len(islandbuslist) == 0:
                self.text_outputbar.append("File 10h không bị tách đảo")

            #Lấy dữ liệu mang tải đường dây sau khi chạy file 
            sid = -1;  owner = 1; ties = 3; flag = 2; entry = 1                                                
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q'])
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])

            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_after = pd.DataFrame(branch_combine_array).T
            branch_dataframe_after.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            #Lấy dữ liệu mang tải máy biến áp sau khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus  + trans_PQ
            transformer_dataframe_after = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_after .columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV sau khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_after =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_after.columns = ['NAME','NUMBER','PU','KV','BASE']

            #So sánh và xuất ra sự khác biệt giữa các đường dây
            for i in range(len(branch_dataframe_after)):
                #Làm tròn đến 1 chữ số
                branch_dataframe_before.loc[i,"PCTRATE1"] = round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                branch_dataframe_after.loc[i,"PCTRATE1"]= round(branch_dataframe_after.loc[i,"PCTRATE1"],1)
                branch_dataframe_before.loc[i,"P"] = round(branch_dataframe_before.loc[i,"P"],0)
                branch_dataframe_before.loc[i,"Q"] = round(branch_dataframe_before.loc[i,"Q"],0)
                branch_dataframe_after.loc[i,"P"] = round(branch_dataframe_after.loc[i,"P"],0)
                branch_dataframe_after.loc[i,"Q"] = round(branch_dataframe_after.loc[i,"Q"],0)
                
                Delta_loading_change =  round(branch_dataframe_after.loc[i,"PCTRATE1"],1) -round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                delta_mw_change = round(branch_dataframe_after.loc[i,"P"],1) - round(branch_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 80 and branch_dataframe_before.loc[i,"PCTRATE1"] < 80 and branch_dataframe_after.loc[i,"PCTRATE1"] < 90:
                    result = "Đường dây đầy tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - " + str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 90 and branch_dataframe_before.loc[i,"PCTRATE1"] < 90 and branch_dataframe_after.loc[i,"PCTRATE1"] < 100:
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 100 and branch_dataframe_before.loc[i,"PCTRATE1"] < 100 :
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                                   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các đường dây tăng % mang tải
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        QGuiApplication.processEvents() 
                        if branch_dataframe_after.loc[i,"PCTRATE1"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if branch_dataframe_after.loc[i,"PCTRATE1"] < 80:
                            self.text_dotanggiam_tlcs.append(result)                         
                        QGuiApplication.processEvents() 
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các đường dây giảm % mang tải 
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+  " giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " xuống "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
            QGuiApplication.processEvents() 
            #-So sánh và xuất ra sự khác biệt giữa các MBA
            for i in range(len(transformer_dataframe_after)):
                #Làm tròn đến 1 chữ số
                transformer_dataframe_before.loc[i,"PCTMVARATEA"] = round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_after.loc[i,"PCTMVARATEA"]= round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_before.loc[i,"P"] = round(transformer_dataframe_before.loc[i,"P"],0)
                transformer_dataframe_before.loc[i,"Q"] = round(transformer_dataframe_before.loc[i,"Q"],0)
                transformer_dataframe_after.loc[i,"P"] = round(transformer_dataframe_after.loc[i,"P"],0)
                transformer_dataframe_after.loc[i,"Q"] = round(transformer_dataframe_after.loc[i,"Q"],0)
                #So sánh 
                Delta_loading_change = round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1) - round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1) 
                delta_mw_change = round(transformer_dataframe_after.loc[i,"P"],1) - round(transformer_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 80 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 90 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 90 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 90 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 100 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()   
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 100 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 100  :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các MBA tăng % mang tải
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 80:
                            self.text_dotanggiam_tlcs.append(result)   
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
                    if Delta_loading_change < 0:
                        #Xuất các MBA giảm % mang tải 
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + "giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " giảm "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
            #Cảnh báo điện áp cao/điện áp thấp
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                for i in range(len(bus_data_dataframe_after)):
                    Delta_voltage_change =  round(bus_data_dataframe_after.loc[i,"KV"],2) - round(bus_data_dataframe_before.loc[i,"KV"],2)
                    bus_data_dataframe_after.loc[i,"PU"] = round(bus_data_dataframe_after.loc[i,"PU"],2)
                    bus_data_dataframe_before.loc[i,"PU"] = round(bus_data_dataframe_before.loc[i,"PU"],2)
                    bus_data_dataframe_after.loc[i,"KV"] = round(bus_data_dataframe_after.loc[i,"KV"],2)
                    bus_data_dataframe_before.loc[i,"KV"] = round(bus_data_dataframe_before.loc[i,"KV"],2)                
                    if bus_data_dataframe_after.loc[i,"KV"] > 75.0:
                    #Tìm các nút điện áp cao trồi lên
                        if bus_data_dataframe_after.loc[i,"PU"] > 1.1 and bus_data_dataframe_before.loc[i,"PU"] < 1.1 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " tăng cao ↑ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " lên "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(UpFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
                        #Tìm các nút điện áp thấp sụt xuống
                        if bus_data_dataframe_after.loc[i,"PU"] < 0.95 and bus_data_dataframe_before.loc[i,"PU"] > 0.95 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " giảm thấp ↓ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " xuống "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(DownFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 

            QGuiApplication.processEvents() 
            #Tính toán tổn thất sau khi chạy file 
            PQ_Loss_of_10h_after = psspy.ardat(20,'LOSS')
            P_Loss_of_10h_after = PQ_Loss_of_10h_after[1].real
            Q_Loss_of_10h_after = PQ_Loss_of_10h_after[1].imag
            delta_P_loss = round(P_Loss_of_10h_before - P_Loss_of_10h_after,5)
            delta_Q_loss = Q_Loss_of_10h_before - Q_Loss_of_10h_after
            if delta_P_loss <= 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 10h tăng: ↑ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(UpFormat.format(delta_P_loss_result))
            if delta_P_loss > 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 10h giảm: ↓ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(DownFormat.format(delta_P_loss_result))
                
            self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
            QGuiApplication.processEvents() 


        #------------------12H--------------------
        if self.checkBox_12h.isChecked() == 1:
            try:
                psse_files_path_name_12h 
                #Báo ra nếu chưa chọn file 
            except NameError:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Information)
                msg.setInformativeText("Chưa chọn file 12h, vui lòng chọn lại file 12h")
                msg.exec()
                return
            psspy.case(psse_files_path_name_12h)
            so_file_sav_da_chay = so_file_sav_da_chay + 1
            self.text_dotanggiam_tlcs.append(_translate("MainWindow",headerformat.format("-------------ĐỘ TĂNG/ GIẢM MANG TẢI CHẾ ĐỘ 12h-----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow",headerformat.format("-------------CÁC PHẦN TỬ ĐẦY QUÁ TẢI MỚI CHẾ ĐỘ 12h----------")))
            self.text_voltage_warning.append(_translate("MainWindow",headerformat.format("-------------CÁC NÚT CAO/THẤP ÁP CHẾ ĐỘ 12h----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow"," "))
            #Tính toán tổn thất trước khi thực hiện file .py
            PQ_Loss_of_12h_before = psspy.ardat(20,'LOSS')
            P_Loss_of_12h_before = PQ_Loss_of_12h_before[1].real
            Q_Loss_of_12h_before = PQ_Loss_of_12h_before[1].imag            
            #Lấy dữ liệu mang tải đường dây trước khi chạy file 
            sid = -1; owner = 1; ties = 3;  flag = 2 ; entry = 1                                             
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q']) #Lấy % mang tải và P,Q của đường dây 
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])
            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_before = pd.DataFrame(branch_combine_array).T
            branch_dataframe_before.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV trước khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_before =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_before.columns = ['NAME','NUMBER','PU','KV','BASE']

            #Lấy dữ liệu mang tải máy biến áp trước khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus + trans_PQ
            transformer_dataframe_before = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_before.columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]
            #Vlookup vietsub
            if self.checkBox_vietsub.isChecked() == 1:
                transformer_dataframe_before['XFRNAME']= transformer_dataframe_before['WIND1NUMBER'].map(vlookup_func)
                branch_dataframe_before['FROMNAME']= branch_dataframe_before['FROMNUMBER'].map(vlookup_func)
                branch_dataframe_before['TONAME']= branch_dataframe_before['TONUMBER'].map(vlookup_func)
                if self.checkBox_Canhbaodienap.isChecked() == 1:
                    bus_data_dataframe_before['NAME']= bus_data_dataframe_before['NUMBER'].map(vlookup_func)
            #Thực thi từng lệnh trong file python đã đọc
            if self.chaydonfilepython.isChecked() == 1: 
                with open(psse_files_path_name_python) as f:
                    _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                    _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                    _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                    exec(f.read()) # Thực thi từng dòng trong file đã đọc
                    psspy.fdns()  # Chạy lại trào lưu 

            #Thực hiện nhiều file .py đã chọn
            if self.chaydafilepython.isChecked() == 1:
                for i in range(len(python_multiple_files_path_name)):
                    with open(python_multiple_files_path_name[i]) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu   

            #Thực hiện trực tiếp các lệnh python trên cửa sổ 
            if self.chaytructieptuphantu.isChecked() == 1:
                Text = self.Python_to_run_PSSE.toPlainText()
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                exec(Text)
                psspy.fdns()

            #Kiểm tra xem file có hội tụ hay không
            check_converge = psspy.solved()
            so_vong_lap_tinhtoan = psspy.iterat()
            if check_converge == 1:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 12h mất hội tụ ")
                self.text_outputbar.append(warningFormat.format("File 12h mất hội tụ"))
                msg.exec()
            if check_converge == 0:
                self.text_outputbar.append(DownFormat.format("File 12h hội tụ sau {} vòng lặp".format(so_vong_lap_tinhtoan)))
        
            #Kiểm tra xem nút nào bị tách đảo
            islandbuslist = [j for i in psspy.treedat(999)['island_busnum'] for j in i]
            if len(islandbuslist) > 0:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 12h bị tách đảo")
                self.text_outputbar.append(warningFormat.format("File 12h bị tách đảo"))
                msg.exec()
                self.text_outputbar.append("Số nút bị tách đảo trong file 12h")
                islandbuslist_string = ' '.join(str(e)for e in islandbuslist)
                self.text_outputbar.append(islandbuslist_string)
            if len(islandbuslist) == 0:
                self.text_outputbar.append("File 12h không bị tách đảo")

            #Lấy dữ liệu mang tải đường dây sau khi chạy file 
            sid = -1;  owner = 1; ties = 3; flag = 2; entry = 1                                                
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q'])
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])

            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_after = pd.DataFrame(branch_combine_array).T
            branch_dataframe_after.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            #Lấy dữ liệu mang tải máy biến áp sau khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus  + trans_PQ
            transformer_dataframe_after = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_after .columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV sau khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_after =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_after.columns = ['NAME','NUMBER','PU','KV','BASE']


            #So sánh và xuất ra sự khác biệt giữa các đường dây
            for i in range(len(branch_dataframe_after)):
                #Làm tròn đến 1 chữ số
                branch_dataframe_before.loc[i,"PCTRATE1"] = round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                branch_dataframe_after.loc[i,"PCTRATE1"]= round(branch_dataframe_after.loc[i,"PCTRATE1"],1)
                branch_dataframe_before.loc[i,"P"] = round(branch_dataframe_before.loc[i,"P"],0)
                branch_dataframe_before.loc[i,"Q"] = round(branch_dataframe_before.loc[i,"Q"],0)
                branch_dataframe_after.loc[i,"P"] = round(branch_dataframe_after.loc[i,"P"],0)
                branch_dataframe_after.loc[i,"Q"] = round(branch_dataframe_after.loc[i,"Q"],0)
                
                Delta_loading_change =  round(branch_dataframe_after.loc[i,"PCTRATE1"],1) -round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                delta_mw_change = round(branch_dataframe_after.loc[i,"P"],1) - round(branch_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 80 and branch_dataframe_before.loc[i,"PCTRATE1"] < 80 and branch_dataframe_after.loc[i,"PCTRATE1"] < 90:
                    result = "Đường dây đầy tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - " + str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 90 and branch_dataframe_before.loc[i,"PCTRATE1"] < 90 and branch_dataframe_after.loc[i,"PCTRATE1"] < 100:
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 100 and branch_dataframe_before.loc[i,"PCTRATE1"] < 100 :
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                                   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các đường dây tăng % mang tải
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        QGuiApplication.processEvents() 
                        if branch_dataframe_after.loc[i,"PCTRATE1"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if branch_dataframe_after.loc[i,"PCTRATE1"] < 80:
                            self.text_dotanggiam_tlcs.append(result)                         
                        QGuiApplication.processEvents() 
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các đường dây giảm % mang tải 
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+  " giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " xuống "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
            QGuiApplication.processEvents() 
            #-So sánh và xuất ra sự khác biệt giữa các MBA
            for i in range(len(transformer_dataframe_after)):
                #Làm tròn đến 1 chữ số
                transformer_dataframe_before.loc[i,"PCTMVARATEA"] = round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_after.loc[i,"PCTMVARATEA"]= round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_before.loc[i,"P"] = round(transformer_dataframe_before.loc[i,"P"],0)
                transformer_dataframe_before.loc[i,"Q"] = round(transformer_dataframe_before.loc[i,"Q"],0)
                transformer_dataframe_after.loc[i,"P"] = round(transformer_dataframe_after.loc[i,"P"],0)
                transformer_dataframe_after.loc[i,"Q"] = round(transformer_dataframe_after.loc[i,"Q"],0)

                #So sánh 
                Delta_loading_change = round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1) - round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1) 
                delta_mw_change = round(transformer_dataframe_after.loc[i,"P"],1) - round(transformer_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 80 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 90 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 90 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 90 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 100 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()   
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 100 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 100  :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các MBA tăng % mang tải
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 80:
                            self.text_dotanggiam_tlcs.append(result)   
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
                    if Delta_loading_change < 0:
                        #Xuất các MBA giảm % mang tải 
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + "giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " giảm "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 

            #  ------------------Cảnh báo điện áp cao, điện áp thấp ---------------------------------------
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                for i in range(len(bus_data_dataframe_after)):
                    Delta_voltage_change =  round(bus_data_dataframe_after.loc[i,"KV"],2) - round(bus_data_dataframe_before.loc[i,"KV"],2)
                    bus_data_dataframe_after.loc[i,"PU"] = round(bus_data_dataframe_after.loc[i,"PU"],2)
                    bus_data_dataframe_before.loc[i,"PU"] = round(bus_data_dataframe_before.loc[i,"PU"],2)
                    bus_data_dataframe_after.loc[i,"KV"] = round(bus_data_dataframe_after.loc[i,"KV"],2)
                    bus_data_dataframe_before.loc[i,"KV"] = round(bus_data_dataframe_before.loc[i,"KV"],2)                
                    if bus_data_dataframe_after.loc[i,"KV"] > 75.0:
                    #Tìm các nút điện áp cao trồi lên
                        if bus_data_dataframe_after.loc[i,"PU"] > 1.1 and bus_data_dataframe_before.loc[i,"PU"] < 1.1 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " tăng cao ↑ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " lên "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(UpFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
                        #Tìm các nút điện áp thấp sụt xuống
                        if bus_data_dataframe_after.loc[i,"PU"] < 0.95 and bus_data_dataframe_before.loc[i,"PU"] > 0.95 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " giảm thấp ↓ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " xuống "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(DownFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 

            QGuiApplication.processEvents() 
            #Tính toán tổn thất sau khi chạy file 
            PQ_Loss_of_12h_after = psspy.ardat(20,'LOSS')
            P_Loss_of_12h_after = PQ_Loss_of_12h_after[1].real
            Q_Loss_of_12h_after = PQ_Loss_of_12h_after[1].imag
            delta_P_loss = round(P_Loss_of_12h_before - P_Loss_of_12h_after,5)
            delta_Q_loss = Q_Loss_of_12h_before - Q_Loss_of_12h_after
            if delta_P_loss <= 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 12h tăng: ↑ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(UpFormat.format(delta_P_loss_result))
            if delta_P_loss > 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 12h giảm: ↓ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(DownFormat.format(delta_P_loss_result))
                
            self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
            QGuiApplication.processEvents() 

        #------------------15H--------------------
        if self.checkBox_15h.isChecked() == 1:
            try:
                psse_files_path_name_15h 
                #Báo ra nếu chưa chọn file 
            except NameError:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Information)
                msg.setInformativeText("Chưa chọn file 15h, vui lòng chọn lại file 15h")
                msg.exec()
                return
            psspy.case(psse_files_path_name_15h)
            so_file_sav_da_chay = so_file_sav_da_chay + 1
            self.text_dotanggiam_tlcs.append(_translate("MainWindow",headerformat.format("-------------ĐỘ TĂNG/ GIẢM MANG TẢI CHẾ ĐỘ 15h-----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow",headerformat.format("-------------CÁC PHẦN TỬ ĐẦY QUÁ TẢI MỚI CHẾ ĐỘ 15h----------")))
            self.text_voltage_warning.append(_translate("MainWindow",headerformat.format("-------------CÁC NÚT CAO/THẤP ÁP CHẾ ĐỘ 15h----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow"," "))
            #Tính toán tổn thất trước khi thực hiện file .py
            PQ_Loss_of_15h_before = psspy.ardat(20,'LOSS')
            P_Loss_of_15h_before = PQ_Loss_of_15h_before[1].real
            Q_Loss_of_15h_before = PQ_Loss_of_15h_before[1].imag            
            #Lấy dữ liệu mang tải đường dây trước khi chạy file 
            sid = -1; owner = 1; ties = 3;  flag = 2 ; entry = 1                                             
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q']) #Lấy % mang tải và P,Q của đường dây 
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])
            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_before = pd.DataFrame(branch_combine_array).T
            branch_dataframe_before.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV sau trước khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_before =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_before.columns = ['NAME','NUMBER','PU','KV','BASE']

            #Lấy dữ liệu mang tải máy biến áp trước khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus + trans_PQ
            transformer_dataframe_before = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_before.columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            #Vlookup vietsub
            if self.checkBox_vietsub.isChecked() == 1:
                transformer_dataframe_before['XFRNAME']= transformer_dataframe_before['WIND1NUMBER'].map(vlookup_func)
                branch_dataframe_before['FROMNAME']= branch_dataframe_before['FROMNUMBER'].map(vlookup_func)
                branch_dataframe_before['TONAME']= branch_dataframe_before['TONUMBER'].map(vlookup_func)
                if self.checkBox_Canhbaodienap.isChecked() == 1:
                    bus_data_dataframe_before['NAME']= bus_data_dataframe_before['NUMBER'].map(vlookup_func)

            #Thực thi từng lệnh trong file python đã đọc 
            if self.chaydonfilepython.isChecked() == 1:
                with open(psse_files_path_name_python) as f:
                    _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                    _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                    _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                    exec(f.read()) # Thực thi từng dòng trong file đã đọc
                    psspy.fdns()  # Chạy lại trào lưu 

            #Thực hiện nhiều file .py đã chọn
            if self.chaydafilepython.isChecked() == 1:
                for i in range(len(python_multiple_files_path_name)):
                    with open(python_multiple_files_path_name[i]) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu   

            #Chạy trực tiếp từ file python tạo trên cửa sổ window
            if self.chaytructieptuphantu.isChecked() == 1:
                Text = self.Python_to_run_PSSE.toPlainText()
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                exec(Text)
                psspy.fdns()
            #Kiểm tra xem file có hội tụ hay không
            check_converge = psspy.solved()
            so_vong_lap_tinhtoan = psspy.iterat()

            if check_converge == 1:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 15h mất hội tụ ")
                self.text_outputbar.append(warningFormat.format("File 15h mất hội tụ"))
                msg.exec()
            if check_converge == 0:
                self.text_outputbar.append(DownFormat.format("File 15h hội tụ sau {} vòng lặp".format(so_vong_lap_tinhtoan)))
             
            #Kiểm tra xem nút nào bị tách đảo
            islandbuslist = [j for i in psspy.treedat(999)['island_busnum'] for j in i]
            if len(islandbuslist) > 0:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 15h bị tách đảo")
                self.text_outputbar.append(warningFormat.format("File 15h bị tách đảo"))
                msg.exec()
                self.text_outputbar.append("Số nút bị tách đảo trong file 15h")
                islandbuslist_string = ' '.join(str(e)for e in islandbuslist)
                self.text_outputbar.append(islandbuslist_string)
            if len(islandbuslist) == 0:
                self.text_outputbar.append("File 15h không bị tách đảo")

            #Lấy dữ liệu mang tải đường dây sau khi chạy file 
            sid = -1;  owner = 1; ties = 3; flag = 2; entry = 1                                                
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q'])
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])

            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_after = pd.DataFrame(branch_combine_array).T
            branch_dataframe_after.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            #Lấy dữ liệu mang tải máy biến áp sau khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus  + trans_PQ
            transformer_dataframe_after = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_after .columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV sau khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_after =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_after.columns = ['NAME','NUMBER','PU','KV','BASE']

            #So sánh và xuất ra sự khác biệt giữa các đường dây
            for i in range(len(branch_dataframe_after)):
                #Làm tròn đến 1 chữ số
                branch_dataframe_before.loc[i,"PCTRATE1"] = round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                branch_dataframe_after.loc[i,"PCTRATE1"]= round(branch_dataframe_after.loc[i,"PCTRATE1"],1)
                branch_dataframe_before.loc[i,"P"] = round(branch_dataframe_before.loc[i,"P"],0)
                branch_dataframe_before.loc[i,"Q"] = round(branch_dataframe_before.loc[i,"Q"],0)
                branch_dataframe_after.loc[i,"P"] = round(branch_dataframe_after.loc[i,"P"],0)
                branch_dataframe_after.loc[i,"Q"] = round(branch_dataframe_after.loc[i,"Q"],0)
                
                Delta_loading_change =  round(branch_dataframe_after.loc[i,"PCTRATE1"],1) -round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                delta_mw_change = round(branch_dataframe_after.loc[i,"P"],1) - round(branch_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 80 and branch_dataframe_before.loc[i,"PCTRATE1"] < 80 and branch_dataframe_after.loc[i,"PCTRATE1"] < 90:
                    result = "Đường dây đầy tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - " + str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 90 and branch_dataframe_before.loc[i,"PCTRATE1"] < 90 and branch_dataframe_after.loc[i,"PCTRATE1"] < 100:
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 100 and branch_dataframe_before.loc[i,"PCTRATE1"] < 100 :
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                                   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các đường dây tăng % mang tải
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        QGuiApplication.processEvents() 
                        if branch_dataframe_after.loc[i,"PCTRATE1"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if branch_dataframe_after.loc[i,"PCTRATE1"] < 80:
                            self.text_dotanggiam_tlcs.append(result)                         
                        QGuiApplication.processEvents() 
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các đường dây giảm % mang tải 
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+  " giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " xuống "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
            QGuiApplication.processEvents() 
            #-So sánh và xuất ra sự khác biệt giữa các MBA
            for i in range(len(transformer_dataframe_after)):
                #Làm tròn đến 1 chữ số
                transformer_dataframe_before.loc[i,"PCTMVARATEA"] = round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_after.loc[i,"PCTMVARATEA"]= round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_before.loc[i,"P"] = round(transformer_dataframe_before.loc[i,"P"],0)
                transformer_dataframe_before.loc[i,"Q"] = round(transformer_dataframe_before.loc[i,"Q"],0)
                transformer_dataframe_after.loc[i,"P"] = round(transformer_dataframe_after.loc[i,"P"],0)
                transformer_dataframe_after.loc[i,"Q"] = round(transformer_dataframe_after.loc[i,"Q"],0)

                #So sánh 
                Delta_loading_change = round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1) - round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1) 
                delta_mw_change = round(transformer_dataframe_after.loc[i,"P"],1) - round(transformer_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 80 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 90 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 90 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 90 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 100 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()   
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 100 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 100  :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................") 
                    QGuiApplication.processEvents()  
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các MBA tăng % mang tải
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 80:
                            self.text_dotanggiam_tlcs.append(result)   
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
                    if Delta_loading_change < 0:
                        #Xuất các MBA giảm % mang tải 
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + "giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " giảm "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
            
            #  ------------------Cảnh báo điện áp cao, điện áp thấp ---------------------------------------
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                for i in range(len(bus_data_dataframe_after)):
                    Delta_voltage_change =  round(bus_data_dataframe_after.loc[i,"KV"],2) - round(bus_data_dataframe_before.loc[i,"KV"],2)
                    bus_data_dataframe_after.loc[i,"PU"] = round(bus_data_dataframe_after.loc[i,"PU"],2)
                    bus_data_dataframe_before.loc[i,"PU"] = round(bus_data_dataframe_before.loc[i,"PU"],2)
                    bus_data_dataframe_after.loc[i,"KV"] = round(bus_data_dataframe_after.loc[i,"KV"],2)
                    bus_data_dataframe_before.loc[i,"KV"] = round(bus_data_dataframe_before.loc[i,"KV"],2)                
                    if bus_data_dataframe_after.loc[i,"KV"] > 75.0:
                    #Tìm các nút điện áp cao trồi lên
                        if bus_data_dataframe_after.loc[i,"PU"] > 1.1 and bus_data_dataframe_before.loc[i,"PU"] < 1.1 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " tăng cao ↑ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " lên "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(UpFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
                        #Tìm các nút điện áp thấp sụt xuống
                        if bus_data_dataframe_after.loc[i,"PU"] < 0.95 and bus_data_dataframe_before.loc[i,"PU"] > 0.95 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " giảm thấp ↓ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " xuống "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(DownFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
            
            QGuiApplication.processEvents() 
            #Tính toán tổn thất sau khi chạy file 
            PQ_Loss_of_15h_after = psspy.ardat(20,'LOSS')
            P_Loss_of_15h_after = PQ_Loss_of_15h_after[1].real
            Q_Loss_of_15h_after = PQ_Loss_of_15h_after[1].imag
            delta_P_loss = round(P_Loss_of_15h_before - P_Loss_of_15h_after,5)
            delta_Q_loss = Q_Loss_of_15h_before - Q_Loss_of_15h_after
            if delta_P_loss <= 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 15h tăng: ↑ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(UpFormat.format(delta_P_loss_result))
            if delta_P_loss > 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 15h giảm: ↓ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(DownFormat.format(delta_P_loss_result))
                
            self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
            QGuiApplication.processEvents() 

        #------------------18H--------------------
        if self.checkBox_18h.isChecked() == 1:
            try:
                psse_files_path_name_18h 
                #Báo ra nếu chưa chọn file 
            except NameError:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Information)
                msg.setInformativeText("Chưa chọn file 18h, vui lòng chọn lại file 18h")
                msg.exec()
                return
            psspy.case(psse_files_path_name_18h)
            so_file_sav_da_chay = so_file_sav_da_chay + 1
            self.text_dotanggiam_tlcs.append(_translate("MainWindow",headerformat.format("-------------ĐỘ TĂNG/ GIẢM MANG TẢI CHẾ ĐỘ 18h-----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow",headerformat.format("-------------CÁC PHẦN TỬ ĐẦY QUÁ TẢI MỚI CHẾ ĐỘ 18h----------")))
            self.text_voltage_warning.append(_translate("MainWindow",headerformat.format("-------------CÁC NÚT CAO/THẤP ÁP CHẾ ĐỘ 18h----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow"," "))
            #Tính toán tổn thất trước khi thực hiện file .py
            PQ_Loss_of_18h_before = psspy.ardat(20,'LOSS')
            P_Loss_of_18h_before = PQ_Loss_of_18h_before[1].real
            Q_Loss_of_18h_before = PQ_Loss_of_18h_before[1].imag            
            #Lấy dữ liệu mang tải đường dây trước khi chạy file 
            sid = -1; owner = 1; ties = 3;  flag = 2 ; entry = 1                                             
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q']) #Lấy % mang tải và P,Q của đường dây 
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])
            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_before = pd.DataFrame(branch_combine_array).T
            branch_dataframe_before.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV trước khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_before =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_before.columns = ['NAME','NUMBER','PU','KV','BASE']

            #Lấy dữ liệu mang tải máy biến áp trước khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus + trans_PQ
            transformer_dataframe_before = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_before.columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            #Vlookup vietsub
            if self.checkBox_vietsub.isChecked() == 1:
                transformer_dataframe_before['XFRNAME']= transformer_dataframe_before['WIND1NUMBER'].map(vlookup_func)
                branch_dataframe_before['FROMNAME']= branch_dataframe_before['FROMNUMBER'].map(vlookup_func)
                branch_dataframe_before['TONAME']= branch_dataframe_before['TONUMBER'].map(vlookup_func)
                if self.checkBox_Canhbaodienap.isChecked() == 1:
                    bus_data_dataframe_before['NAME']= bus_data_dataframe_before['NUMBER'].map(vlookup_func)

            #Thực thi từng lệnh trong file python đã đọc 
            if self.chaydonfilepython.isChecked() == 1:
                with open(psse_files_path_name_python) as f:
                    _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                    _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                    _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                    exec(f.read()) # Thực thi từng dòng trong file đã đọc
                    psspy.fdns()  # Chạy lại trào lưu 

            #Thực hiện nhiều file .py đã chọn
            if self.chaydafilepython.isChecked() == 1:
                for i in range(len(python_multiple_files_path_name)):
                    with open(python_multiple_files_path_name[i]) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu   

            #Chạy trực tiếp từ file python tạo trên cửa sổ window
            if self.chaytructieptuphantu.isChecked() == 1:
                Text = self.Python_to_run_PSSE.toPlainText()
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                exec(Text)
                psspy.fdns()

            #Kiểm tra xem file có hội tụ hay không
            check_converge = psspy.solved()
            so_vong_lap_tinhtoan = psspy.iterat()

            if check_converge == 1:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 18h mất hội tụ ")
                self.text_outputbar.append(warningFormat.format("File 18h mất hội tụ"))
                msg.exec()
            if check_converge == 0:
                self.text_outputbar.append(DownFormat.format("File 18h hội tụ sau {} vòng lặp".format(so_vong_lap_tinhtoan)))
             
            #Kiểm tra xem nút nào bị tách đảo
            islandbuslist = [j for i in psspy.treedat(999)['island_busnum'] for j in i]
            if len(islandbuslist) > 0:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 18h bị tách đảo")
                self.text_outputbar.append(warningFormat.format("File 18h bị tách đảo"))
                msg.exec()
                self.text_outputbar.append("Số nút bị tách đảo trong file 18h")
                islandbuslist_string = ' '.join(str(e)for e in islandbuslist)
                self.text_outputbar.append(islandbuslist_string)
            if len(islandbuslist) == 0:
                self.text_outputbar.append("File 18h không bị tách đảo")

            #Lấy dữ liệu mang tải đường dây sau khi chạy file 
            sid = -1;  owner = 1; ties = 3; flag = 2; entry = 1                                                
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q'])
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])

            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_after = pd.DataFrame(branch_combine_array).T
            branch_dataframe_after.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]
            
            #Lấy dữ liệu mang tải máy biến áp sau khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus  + trans_PQ
            transformer_dataframe_after = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_after .columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV sau khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_after =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_after.columns = ['NAME','NUMBER','PU','KV','BASE']

            #So sánh và xuất ra sự khác biệt giữa các đường dây
            for i in range(len(branch_dataframe_after)):
                #Làm tròn đến 1 chữ số
                branch_dataframe_before.loc[i,"PCTRATE1"] = round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                branch_dataframe_after.loc[i,"PCTRATE1"]= round(branch_dataframe_after.loc[i,"PCTRATE1"],1)
                branch_dataframe_before.loc[i,"P"] = round(branch_dataframe_before.loc[i,"P"],0)
                branch_dataframe_before.loc[i,"Q"] = round(branch_dataframe_before.loc[i,"Q"],0)
                branch_dataframe_after.loc[i,"P"] = round(branch_dataframe_after.loc[i,"P"],0)
                branch_dataframe_after.loc[i,"Q"] = round(branch_dataframe_after.loc[i,"Q"],0)
                
                Delta_loading_change =  round(branch_dataframe_after.loc[i,"PCTRATE1"],1) -round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                delta_mw_change = round(branch_dataframe_after.loc[i,"P"],1) - round(branch_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 80 and branch_dataframe_before.loc[i,"PCTRATE1"] < 80 and branch_dataframe_after.loc[i,"PCTRATE1"] < 90:
                    result = "Đường dây đầy tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - " + str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 90 and branch_dataframe_before.loc[i,"PCTRATE1"] < 90 and branch_dataframe_after.loc[i,"PCTRATE1"] < 100:
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 100 and branch_dataframe_before.loc[i,"PCTRATE1"] < 100 :
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()
                                   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các đường dây tăng % mang tải
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        QGuiApplication.processEvents() 
                        if branch_dataframe_after.loc[i,"PCTRATE1"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if branch_dataframe_after.loc[i,"PCTRATE1"] < 80:
                            self.text_dotanggiam_tlcs.append(result)                         
                        QGuiApplication.processEvents() 
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các đường dây giảm % mang tải 
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+  " giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " xuống "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
            QGuiApplication.processEvents() 
            #-So sánh và xuất ra sự khác biệt giữa các MBA
            for i in range(len(transformer_dataframe_after)):
                #Làm tròn đến 1 chữ số
                transformer_dataframe_before.loc[i,"PCTMVARATEA"] = round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_after.loc[i,"PCTMVARATEA"]= round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_before.loc[i,"P"] = round(transformer_dataframe_before.loc[i,"P"],0)
                transformer_dataframe_before.loc[i,"Q"] = round(transformer_dataframe_before.loc[i,"Q"],0)
                transformer_dataframe_after.loc[i,"P"] = round(transformer_dataframe_after.loc[i,"P"],0)
                transformer_dataframe_after.loc[i,"Q"] = round(transformer_dataframe_after.loc[i,"Q"],0)

                #So sánh 
                Delta_loading_change = round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1) - round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1) 
                delta_mw_change = round(transformer_dataframe_after.loc[i,"P"],1) - round(transformer_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 80 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 90 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 90 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 90 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 100 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 100 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 100  :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các MBA tăng % mang tải
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 80:
                            self.text_dotanggiam_tlcs.append(result)   
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các MBA giảm % mang tải 
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + "giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " giảm "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
            
            #  Cảnh báo điện áp cao, điện áp thấp
            if self.checkBox_Canhbaodienap.isChecked() == 1: 
                for i in range(len(bus_data_dataframe_after)):
                    Delta_voltage_change =  round(bus_data_dataframe_after.loc[i,"KV"],2) - round(bus_data_dataframe_before.loc[i,"KV"],2)
                    bus_data_dataframe_after.loc[i,"PU"] = round(bus_data_dataframe_after.loc[i,"PU"],2)
                    bus_data_dataframe_before.loc[i,"PU"] = round(bus_data_dataframe_before.loc[i,"PU"],2)
                    bus_data_dataframe_after.loc[i,"KV"] = round(bus_data_dataframe_after.loc[i,"KV"],2)
                    bus_data_dataframe_before.loc[i,"KV"] = round(bus_data_dataframe_before.loc[i,"KV"],2)                
                    if bus_data_dataframe_after.loc[i,"KV"] > 75.0:
                    #Tìm các nút điện áp cao trồi lên
                        if bus_data_dataframe_after.loc[i,"PU"] > 1.1 and bus_data_dataframe_before.loc[i,"PU"] < 1.1 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " tăng cao ↑ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " lên "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(UpFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
                        #Tìm các nút điện áp thấp sụt xuống
                        if bus_data_dataframe_after.loc[i,"PU"] < 0.95 and bus_data_dataframe_before.loc[i,"PU"] > 0.95 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " giảm thấp ↓ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " xuống "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(DownFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents()             

            QGuiApplication.processEvents() 
            #Tính toán tổn thất sau khi chạy file 
            PQ_Loss_of_18h_after = psspy.ardat(20,'LOSS')
            P_Loss_of_18h_after = PQ_Loss_of_18h_after[1].real
            Q_Loss_of_18h_after = PQ_Loss_of_18h_after[1].imag
            delta_P_loss = round(P_Loss_of_18h_before - P_Loss_of_18h_after,5)
            delta_Q_loss = Q_Loss_of_18h_before - Q_Loss_of_18h_after
            if delta_P_loss <= 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 18h tăng: ↑ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(UpFormat.format(delta_P_loss_result))
            if delta_P_loss > 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 18h giảm: ↓ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(DownFormat.format(delta_P_loss_result))
                
            self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
            QGuiApplication.processEvents() 

    #------------------21H---------------------------------------------

        if self.checkBox_21h.isChecked() == 1:
            try:
                psse_files_path_name_21h 
                #Báo ra nếu chưa chọn file 
            except NameError:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Information)
                msg.setInformativeText("Chưa chọn file 21h, vui lòng chọn lại file 21h")
                msg.exec()
                return
            psspy.case(psse_files_path_name_21h)
            so_file_sav_da_chay = so_file_sav_da_chay + 1
            self.text_dotanggiam_tlcs.append(_translate("MainWindow",headerformat.format("-------------ĐỘ TĂNG/ GIẢM MANG TẢI CHẾ ĐỘ 21h-----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow",headerformat.format("-------------CÁC PHẦN TỬ ĐẦY QUÁ TẢI MỚI CHẾ ĐỘ 21h----------")))
            self.text_voltage_warning.append(_translate("MainWindow",headerformat.format("-------------CÁC NÚT CAO/THẤP ÁP CHẾ ĐỘ 21h----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow"," "))
            #Tính toán tổn thất trước khi thực hiện file .py
            PQ_Loss_of_21h_before = psspy.ardat(20,'LOSS')
            P_Loss_of_21h_before = PQ_Loss_of_21h_before[1].real
            Q_Loss_of_21h_before = PQ_Loss_of_21h_before[1].imag            
            #Lấy dữ liệu mang tải đường dây trước khi chạy file 
            sid = -1; owner = 1; ties = 3;  flag = 2 ; entry = 1                                             
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q']) #Lấy % mang tải và P,Q của đường dây 
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])
            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_before = pd.DataFrame(branch_combine_array).T
            branch_dataframe_before.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV trước khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_before =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_before.columns = ['NAME','NUMBER','PU','KV','BASE']

            #Lấy dữ liệu mang tải máy biến áp trước khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus + trans_PQ
            transformer_dataframe_before = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_before.columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]
            #Vlookup vietsub
            if self.checkBox_vietsub.isChecked() == 1:
                transformer_dataframe_before['XFRNAME']= transformer_dataframe_before['WIND1NUMBER'].map(vlookup_func)
                branch_dataframe_before['FROMNAME']= branch_dataframe_before['FROMNUMBER'].map(vlookup_func)
                branch_dataframe_before['TONAME']= branch_dataframe_before['TONUMBER'].map(vlookup_func)
                if self.checkBox_Canhbaodienap.isChecked() == 1:
                    bus_data_dataframe_before['NAME']= bus_data_dataframe_before['NUMBER'].map(vlookup_func)


            #Thực thi từng lệnh trong file python đã đọc 
            if self.chaydonfilepython.isChecked() == 1:
                with open(psse_files_path_name_python) as f:
                    _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                    _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                    _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                    exec(f.read()) # Thực thi từng dòng trong file đã đọc
                    psspy.fdns()  # Chạy lại trào lưu 

            #Thực hiện nhiều file .py đã chọn
            if self.chaydafilepython.isChecked() == 1:
                for i in range(len(python_multiple_files_path_name)):
                    with open(python_multiple_files_path_name[i]) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu   

            #Chạy trực tiếp từ file python tạo trên cửa sổ window
            if self.chaytructieptuphantu.isChecked() == 1:
                Text = self.Python_to_run_PSSE.toPlainText()
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                exec(Text)
                psspy.fdns()


            #Kiểm tra xem file có hội tụ hay không
            check_converge = psspy.solved()
            so_vong_lap_tinhtoan = psspy.iterat()

            if check_converge == 1:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 21h mất hội tụ ")
                self.text_outputbar.append(warningFormat.format("File 21h mất hội tụ"))
                msg.exec()
            if check_converge == 0:
                self.text_outputbar.append(DownFormat.format("File 21h hội tụ sau {} vòng lặp".format(so_vong_lap_tinhtoan)))
             
            #Kiểm tra xem nút nào bị tách đảo
            islandbuslist = [j for i in psspy.treedat(999)['island_busnum'] for j in i]
            if len(islandbuslist) > 0:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav 21h bị tách đảo")
                self.text_outputbar.append(warningFormat.format("File 21h bị tách đảo"))
                msg.exec()
                self.text_outputbar.append("Số nút bị tách đảo trong file 21h")
                islandbuslist_string = ' '.join(str(e)for e in islandbuslist)
                self.text_outputbar.append(islandbuslist_string)
            if len(islandbuslist) == 0:
                self.text_outputbar.append("File 21h không bị tách đảo")

            #Lấy dữ liệu mang tải đường dây sau khi chạy file 
            sid = -1;  owner = 1; ties = 3; flag = 2; entry = 1                                                
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q'])
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])

            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_after = pd.DataFrame(branch_combine_array).T
            branch_dataframe_after.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            #Lấy dữ liệu mang tải máy biến áp sau khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus  + trans_PQ
            transformer_dataframe_after = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_after .columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV sau khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_after =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_after.columns = ['NAME','NUMBER','PU','KV','BASE']

            #So sánh và xuất ra sự khác biệt giữa các đường dây
            for i in range(len(branch_dataframe_after)):
                #Làm tròn đến 1 chữ số
                branch_dataframe_before.loc[i,"PCTRATE1"] = round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                branch_dataframe_after.loc[i,"PCTRATE1"]= round(branch_dataframe_after.loc[i,"PCTRATE1"],1)
                branch_dataframe_before.loc[i,"P"] = round(branch_dataframe_before.loc[i,"P"],0)
                branch_dataframe_before.loc[i,"Q"] = round(branch_dataframe_before.loc[i,"Q"],0)
                branch_dataframe_after.loc[i,"P"] = round(branch_dataframe_after.loc[i,"P"],0)
                branch_dataframe_after.loc[i,"Q"] = round(branch_dataframe_after.loc[i,"Q"],0)
                
                Delta_loading_change =  round(branch_dataframe_after.loc[i,"PCTRATE1"],1) -round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                delta_mw_change = round(branch_dataframe_after.loc[i,"P"],1) - round(branch_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 80 and branch_dataframe_before.loc[i,"PCTRATE1"] < 80 and branch_dataframe_after.loc[i,"PCTRATE1"] < 90:
                    result = "Đường dây đầy tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - " + str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 90 and branch_dataframe_before.loc[i,"PCTRATE1"] < 90 and branch_dataframe_after.loc[i,"PCTRATE1"] < 100:
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 100 and branch_dataframe_before.loc[i,"PCTRATE1"] < 100 :
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                                   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các đường dây tăng % mang tải
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        QGuiApplication.processEvents() 
                        if branch_dataframe_after.loc[i,"PCTRATE1"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if branch_dataframe_after.loc[i,"PCTRATE1"] < 80:
                            self.text_dotanggiam_tlcs.append(result)                         
                        QGuiApplication.processEvents() 
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các đường dây giảm % mang tải 
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+  " giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " xuống "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
            QGuiApplication.processEvents() 
            #-So sánh và xuất ra sự khác biệt giữa các MBA
            for i in range(len(transformer_dataframe_after)):
                #Làm tròn đến 1 chữ số
                transformer_dataframe_before.loc[i,"PCTMVARATEA"] = round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_after.loc[i,"PCTMVARATEA"]= round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_before.loc[i,"P"] = round(transformer_dataframe_before.loc[i,"P"],0)
                transformer_dataframe_before.loc[i,"Q"] = round(transformer_dataframe_before.loc[i,"Q"],0)
                transformer_dataframe_after.loc[i,"P"] = round(transformer_dataframe_after.loc[i,"P"],0)
                transformer_dataframe_after.loc[i,"Q"] = round(transformer_dataframe_after.loc[i,"Q"],0)

                #So sánh 
                Delta_loading_change = round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1) - round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1) 
                delta_mw_change = round(transformer_dataframe_after.loc[i,"P"],1) - round(transformer_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 80 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 90 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 90 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 90 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 100 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 100 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 100  :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các MBA tăng % mang tải
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 80:
                            self.text_dotanggiam_tlcs.append(result)   
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các MBA giảm % mang tải 
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + "giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " giảm "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
            #Cảnh báo điện áp cao, điện áp thấp 
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                for i in range(len(bus_data_dataframe_after)):
                    Delta_voltage_change =  round(bus_data_dataframe_after.loc[i,"KV"],2) - round(bus_data_dataframe_before.loc[i,"KV"],2)
                    bus_data_dataframe_after.loc[i,"PU"] = round(bus_data_dataframe_after.loc[i,"PU"],2)
                    bus_data_dataframe_before.loc[i,"PU"] = round(bus_data_dataframe_before.loc[i,"PU"],2)
                    bus_data_dataframe_after.loc[i,"KV"] = round(bus_data_dataframe_after.loc[i,"KV"],2)
                    bus_data_dataframe_before.loc[i,"KV"] = round(bus_data_dataframe_before.loc[i,"KV"],2)                
                    if bus_data_dataframe_after.loc[i,"KV"] > 75.0:
                    #Tìm các nút điện áp cao trồi lên
                        if bus_data_dataframe_after.loc[i,"PU"] > 1.1 and bus_data_dataframe_before.loc[i,"PU"] < 1.1 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " tăng cao ↑ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " lên "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(UpFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
                        #Tìm các nút điện áp thấp sụt xuống
                        if bus_data_dataframe_after.loc[i,"PU"] < 0.95 and bus_data_dataframe_before.loc[i,"PU"] > 0.95 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " giảm thấp ↓ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " xuống "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(DownFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 

            QGuiApplication.processEvents() 
            #Tính toán tổn thất sau khi chạy file 
            PQ_Loss_of_21h_after = psspy.ardat(20,'LOSS')
            P_Loss_of_21h_after = PQ_Loss_of_21h_after[1].real
            Q_Loss_of_21h_after = PQ_Loss_of_21h_after[1].imag
            delta_P_loss = round(P_Loss_of_21h_before - P_Loss_of_21h_after,5)
            delta_Q_loss = Q_Loss_of_21h_before - Q_Loss_of_21h_after
            if delta_P_loss <= 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 21h tăng: ↑ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(UpFormat.format(delta_P_loss_result))
            if delta_P_loss > 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc 21h giảm: ↓ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(DownFormat.format(delta_P_loss_result))
                
            self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
            QGuiApplication.processEvents() 
        #------------------CNMax--------------------
        if self.checkBox_CNma.isChecked() == 1:
            try:
                psse_files_path_name_CNMax 
                #Báo ra nếu chưa chọn file 
            except NameError:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Information)
                msg.setInformativeText("Chưa chọn file CN Max, vui lòng chọn lại file CN Max,")
                msg.exec()
                return
            psspy.case(psse_files_path_name_CNMax)
            so_file_sav_da_chay = so_file_sav_da_chay + 1
            self.text_dotanggiam_tlcs.append(_translate("MainWindow",headerformat.format("-------------ĐỘ TĂNG/ GIẢM MANG TẢI CHẾ ĐỘ CNMax-----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow",headerformat.format("-------------CÁC PHẦN TỬ ĐẦY QUÁ TẢI MỚI CHẾ ĐỘ CNMax----------")))
            self.text_voltage_warning.append(_translate("MainWindow",headerformat.format("-------------CÁC NÚT CAO/THẤP ÁP CHẾ ĐỘ CNMax----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow"," "))
            #Tính toán tổn thất trước khi thực hiện file .py
            PQ_Loss_of_CNMax_before = psspy.ardat(20,'LOSS')
            P_Loss_of_CNMax_before = PQ_Loss_of_CNMax_before[1].real
            Q_Loss_of_CNMax_before = PQ_Loss_of_CNMax_before[1].imag            
            #Lấy dữ liệu mang tải đường dây trước khi chạy file 
            sid = -1; owner = 1; ties = 3;  flag = 2 ; entry = 1                                             
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q']) #Lấy % mang tải và P,Q của đường dây 
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])
            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_before = pd.DataFrame(branch_combine_array).T #Tạo ra dataframe từ mảng này 
            branch_dataframe_before.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

           #Lấy dữ liệu điện áp các nút 220-110kV trước khi chạy file
            psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
            sid = -1 ; flag = 2
            ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
            ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
            ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
            bus_data_combine_array = bus_name + bus_number + bus_voltage
            bus_data_dataframe_before =  pd.DataFrame(bus_data_combine_array).T
            bus_data_dataframe_before.columns = ['NAME','NUMBER','PU','KV','BASE']


            #Lấy dữ liệu mang tải máy biến áp trước khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus + trans_PQ
            transformer_dataframe_before = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_before.columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            #Vlookup vietsub
            if self.checkBox_vietsub.isChecked() == 1:
                transformer_dataframe_before['XFRNAME']= transformer_dataframe_before['WIND1NUMBER'].map(vlookup_func)
                branch_dataframe_before['FROMNAME']= branch_dataframe_before['FROMNUMBER'].map(vlookup_func)
                branch_dataframe_before['TONAME']= branch_dataframe_before['TONUMBER'].map(vlookup_func)
                if self.checkBox_Canhbaodienap.isChecked() == 1:
                    bus_data_dataframe_before['NAME']= bus_data_dataframe_before['NUMBER'].map(vlookup_func)

            #Thực thi từng lệnh trong file python đã đọc 
            if self.chaydonfilepython.isChecked() == 1:
                with open(psse_files_path_name_python) as f:
                    _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                    _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                    _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                    exec(f.read()) # Thực thi từng dòng trong file đã đọc
                    psspy.fdns()  # Chạy lại trào lưu 

            #Thực hiện nhiều file .py đã chọn
            if self.chaydafilepython.isChecked() == 1:
                for i in range(len(python_multiple_files_path_name)):
                    with open(python_multiple_files_path_name[i]) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu   

            #Chạy trực tiếp từ file python tạo trên cửa sổ window
            if self.chaytructieptuphantu.isChecked() == 1:
                Text = self.Python_to_run_PSSE.toPlainText()
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                exec(Text)
                psspy.fdns()

            #Kiểm tra xem file có hội tụ hay không
            check_converge = psspy.solved()
            so_vong_lap_tinhtoan = psspy.iterat()

            if check_converge == 1:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav CNmax mất hội tụ ")  # Thông báo file bị mất hội tụ lên màn hình 
                self.text_outputbar.append(warningFormat.format("File CNmax mất hội tụ"))
                msg.exec()
            if check_converge == 0:
                self.text_outputbar.append(DownFormat.format("File CNmax hội tụ sau {} vòng lặp".format(so_vong_lap_tinhtoan)))
             
            #Kiểm tra xem nút nào bị tách đảo
            islandbuslist = [j for i in psspy.treedat(999)['island_busnum'] for j in i]
            if len(islandbuslist) > 0:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav CNmax bị tách đảo")
                self.text_outputbar.append(warningFormat.format("File CNmax bị tách đảo"))
                msg.exec()
                self.text_outputbar.append("Số nút bị tách đảo trong file CNmax")
                islandbuslist_string = ' '.join(str(e)for e in islandbuslist)
                self.text_outputbar.append(islandbuslist_string)
            if len(islandbuslist) == 0:
                self.text_outputbar.append("File CNmax không bị tách đảo")

            #Lấy dữ liệu mang tải đường dây sau khi chạy file 
            sid = -1;  owner = 1; ties = 3; flag = 2; entry = 1                                                
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q'])
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])

            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_after = pd.DataFrame(branch_combine_array).T
            branch_dataframe_after.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]
            #Vlookup vietsub
            branch_dataframe_before['FROMNAME']= branch_dataframe_before['FROMNUMBER'].map(vlookup_func)
            branch_dataframe_before['TONAME']= branch_dataframe_before['TONUMBER'].map(vlookup_func)

            #Lấy dữ liệu mang tải máy biến áp sau khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus  + trans_PQ
            transformer_dataframe_after = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_after .columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV sau khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_after =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_after.columns = ['NAME','NUMBER','PU','KV','BASE']

            #So sánh và xuất ra sự khác biệt giữa các đường dây
            for i in range(len(branch_dataframe_after)):
                #Làm tròn đến 1 chữ số
                branch_dataframe_before.loc[i,"PCTRATE1"] = round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                branch_dataframe_after.loc[i,"PCTRATE1"]= round(branch_dataframe_after.loc[i,"PCTRATE1"],1)
                branch_dataframe_before.loc[i,"P"] = round(branch_dataframe_before.loc[i,"P"],0)
                branch_dataframe_before.loc[i,"Q"] = round(branch_dataframe_before.loc[i,"Q"],0)
                branch_dataframe_after.loc[i,"P"] = round(branch_dataframe_after.loc[i,"P"],0)
                branch_dataframe_after.loc[i,"Q"] = round(branch_dataframe_after.loc[i,"Q"],0)
                
                Delta_loading_change =  round(branch_dataframe_after.loc[i,"PCTRATE1"],1) -round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                delta_mw_change = round(branch_dataframe_after.loc[i,"P"],1) - round(branch_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 80 and branch_dataframe_before.loc[i,"PCTRATE1"] < 80 and branch_dataframe_after.loc[i,"PCTRATE1"] < 90:
                    result = "Đường dây đầy tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - " + str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 90 and branch_dataframe_before.loc[i,"PCTRATE1"] < 90 and branch_dataframe_after.loc[i,"PCTRATE1"] < 100:
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 100 and branch_dataframe_before.loc[i,"PCTRATE1"] < 100 :
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents() 
                                   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các đường dây tăng % mang tải
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        QGuiApplication.processEvents() 
                        if branch_dataframe_after.loc[i,"PCTRATE1"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if branch_dataframe_after.loc[i,"PCTRATE1"] < 80:
                            self.text_dotanggiam_tlcs.append(result)                         
                        QGuiApplication.processEvents() 
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các đường dây giảm % mang tải 
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+  " giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " xuống "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
            QGuiApplication.processEvents() 
            #-So sánh và xuất ra sự khác biệt giữa các MBA
            for i in range(len(transformer_dataframe_after)):
                #Làm tròn đến 1 chữ số
                transformer_dataframe_before.loc[i,"PCTMVARATEA"] = round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_after.loc[i,"PCTMVARATEA"]= round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_before.loc[i,"P"] = round(transformer_dataframe_before.loc[i,"P"],0)
                transformer_dataframe_before.loc[i,"Q"] = round(transformer_dataframe_before.loc[i,"Q"],0)
                transformer_dataframe_after.loc[i,"P"] = round(transformer_dataframe_after.loc[i,"P"],0)
                transformer_dataframe_after.loc[i,"Q"] = round(transformer_dataframe_after.loc[i,"Q"],0)

                #So sánh 
                Delta_loading_change = round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1) - round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1) 
                delta_mw_change = round(transformer_dataframe_after.loc[i,"P"],1) - round(transformer_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 80 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 90 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 90 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 90 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 100 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 100 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 100  :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các MBA tăng % mang tải
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 80:
                            self.text_dotanggiam_tlcs.append(result)   
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các MBA giảm % mang tải 
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + "giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " giảm "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
            
            #  Cảnh báo điện áp cao, điện áp thấp 
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                for i in range(len(bus_data_dataframe_after)):
                    Delta_voltage_change =  round(bus_data_dataframe_after.loc[i,"KV"],2) - round(bus_data_dataframe_before.loc[i,"KV"],2)
                    bus_data_dataframe_after.loc[i,"PU"] = round(bus_data_dataframe_after.loc[i,"PU"],2)
                    bus_data_dataframe_before.loc[i,"PU"] = round(bus_data_dataframe_before.loc[i,"PU"],2)
                    bus_data_dataframe_after.loc[i,"KV"] = round(bus_data_dataframe_after.loc[i,"KV"],2)
                    bus_data_dataframe_before.loc[i,"KV"] = round(bus_data_dataframe_before.loc[i,"KV"],2)                
                    if bus_data_dataframe_after.loc[i,"KV"] > 75.0:
                    #Tìm các nút điện áp cao trồi lên
                        if bus_data_dataframe_after.loc[i,"PU"] > 1.1 and bus_data_dataframe_before.loc[i,"PU"] < 1.1 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " tăng cao ↑ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " lên "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(UpFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
                        #Tìm các nút điện áp thấp sụt xuống
                        if bus_data_dataframe_after.loc[i,"PU"] < 0.95 and bus_data_dataframe_before.loc[i,"PU"] > 0.95 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " giảm thấp ↓ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " xuống "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(DownFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents()             

            QGuiApplication.processEvents() 
            #Tính toán tổn thất sau khi chạy file 
            PQ_Loss_of_CNMax_after = psspy.ardat(20,'LOSS')
            P_Loss_of_CNMax_after = PQ_Loss_of_CNMax_after[1].real
            Q_Loss_of_CNMax_after = PQ_Loss_of_CNMax_after[1].imag
            delta_P_loss = round(P_Loss_of_CNMax_before - P_Loss_of_CNMax_after,5)
            delta_Q_loss = Q_Loss_of_CNMax_before - Q_Loss_of_CNMax_after
            if delta_P_loss <= 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc CNMax tăng: ↑ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(UpFormat.format(delta_P_loss_result))
            if delta_P_loss > 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc CNMax giảm: ↓ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(DownFormat.format(delta_P_loss_result))
                
            self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
            QGuiApplication.processEvents() 

        #------------------CNMin--------------------
        if self.checkBox_CNmi.isChecked() == 1:
            try:
                psse_files_path_name_CNMin 
                #Báo ra nếu chưa chọn file 
            except NameError:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Cảnh báo")
                msg.setIcon(QMessageBox.Information)
                msg.setInformativeText("Chưa chọn file CN Min, vui lòng chọn lại file CN Min,")
                msg.exec()
                return
            psspy.case(psse_files_path_name_CNMin)
            so_file_sav_da_chay = so_file_sav_da_chay + 1
            self.text_dotanggiam_tlcs.append(_translate("MainWindow",headerformat.format("-------------ĐỘ TĂNG/ GIẢM MANG TẢI CHẾ ĐỘ CNMin-----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow",headerformat.format("-------------CÁC PHẦN TỬ ĐẦY QUÁ TẢI MỚI CHẾ ĐỘ CNMin----------")))
            self.text_voltage_warning.append(_translate("MainWindow",headerformat.format("-------------CÁC NÚT CAO/THẤP ÁP CHẾ ĐỘ CNMin----------")))
            self.text_cacphantu_daytai.append(_translate("MainWindow"," "))
            #Tính toán tổn thất trước khi thực hiện file .py
            PQ_Loss_of_CNMin_before = psspy.ardat(20,'LOSS')
            P_Loss_of_CNMin_before = PQ_Loss_of_CNMin_before[1].real
            Q_Loss_of_CNMin_before = PQ_Loss_of_CNMin_before[1].imag            
            #Lấy dữ liệu mang tải đường dây trước khi chạy file 
            sid = -1; owner = 1; ties = 3;  flag = 2 ; entry = 1                                             
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q']) #Lấy % mang tải và P,Q của đường dây 
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])
            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_before = pd.DataFrame(branch_combine_array).T
            branch_dataframe_before.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV trước khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_before =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_before.columns = ['NAME','NUMBER','PU','KV','BASE']

            #Lấy dữ liệu mang tải máy biến áp trước khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus + trans_PQ
            transformer_dataframe_before = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_before.columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            #Vlookup vietsub
            if self.checkBox_vietsub.isChecked() == 1:
                transformer_dataframe_before['XFRNAME']= transformer_dataframe_before['WIND1NUMBER'].map(vlookup_func)
                branch_dataframe_before['FROMNAME']= branch_dataframe_before['FROMNUMBER'].map(vlookup_func)
                branch_dataframe_before['TONAME']= branch_dataframe_before['TONUMBER'].map(vlookup_func)
                if self.checkBox_Canhbaodienap.isChecked() == 1:
                    bus_data_dataframe_before['NAME']= bus_data_dataframe_before['NUMBER'].map(vlookup_func)

            #Thực thi từng lệnh trong file python đã đọc 
            if self.chaydonfilepython.isChecked() == 1:
                with open(psse_files_path_name_python) as f:
                    _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                    _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                    _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                    exec(f.read()) # Thực thi từng dòng trong file đã đọc
                    psspy.fdns()  # Chạy lại trào lưu 

            #Thực hiện nhiều file .py đã chọn
            if self.chaydafilepython.isChecked() == 1:
                for i in range(len(python_multiple_files_path_name)):
                    with open(python_multiple_files_path_name[i]) as f:
                        _i = psspy.getdefaultint()   #Thay _i trong file python bằng giá trị mặc định trong file 
                        _f = psspy.getdefaultreal()  #Thay _f trong file python bằng giá trị mặc định trong file 
                        _s = psspy.getdefaultchar()  #Thay _s trong file python bằng giá trị mặc định trong file 
                        exec(f.read()) # Thực thi từng dòng trong file đã đọc
                        psspy.fdns()  # Chạy lại trào lưu   

            #Chạy trực tiếp từ file python tạo trên cửa sổ window
            if self.chaytructieptuphantu.isChecked() == 1:
                Text = self.Python_to_run_PSSE.toPlainText()
                _i = psspy.getdefaultint()
                _f = psspy.getdefaultreal()
                _s = psspy.getdefaultchar()
                exec(Text)
                psspy.fdns()

            #Kiểm tra xem file có hội tụ hay không
            check_converge = psspy.solved()
            so_vong_lap_tinhtoan = psspy.iterat()

            if check_converge == 1:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav CNMin mất hội tụ ")
                self.text_outputbar.append(warningFormat.format("File CNMin mất hội tụ"))
                msg.exec()
            if check_converge == 0:
                self.text_outputbar.append(DownFormat.format("File CNMin hội tụ sau {} vòng lặp".format(so_vong_lap_tinhtoan)))
             
            #Kiểm tra xem nút nào bị tách đảo
            islandbuslist = [j for i in psspy.treedat(999)['island_busnum'] for j in i]
            if len(islandbuslist) > 0:
                msg = QtWidgets.QMessageBox()
                msg.setInformativeText("File .sav CNMin bị tách đảo")
                self.text_outputbar.append(warningFormat.format("File CNMin bị tách đảo"))
                msg.exec()
                self.text_outputbar.append("Số nút bị tách đảo trong file CNMin")
                islandbuslist_string = ' '.join(str(e)for e in islandbuslist)
                self.text_outputbar.append(islandbuslist_string)
            if len(islandbuslist) == 0:
                self.text_outputbar.append("File CNMin không bị tách đảo")

            #Lấy dữ liệu mang tải đường dây sau khi chạy file 
            sid = -1;  owner = 1; ties = 3; flag = 2; entry = 1                                                
            ierr,fromnum_tonum =  psspy.abrnint(sid, owner, ties, flag,entry, ["FROMNUMBER","TONUMBER"]) #Lay ket qua frombus-tobus tu PSSE
            ierr,ckt = psspy.abrnchar(sid, owner, ties, flag,entry, "ID")
            ierr, rate = psspy.abrnreal(sid, owner, ties, flag, entry, ["PCTRATE1",'P','Q'])
            ierr, frombus_tobus = psspy.abrnchar(sid, owner, ties, flag, entry, ['FROMNAME','TONAME'])

            #Tổng hợp các mảng này lại
            branch_combine_array = fromnum_tonum + frombus_tobus+ ckt + rate
            branch_dataframe_after = pd.DataFrame(branch_combine_array).T
            branch_dataframe_after.columns = ['FROMNUMBER','TONUMBER','FROMNAME','TONAME',"ID","PCTRATE1","P","Q"]

            #Lấy dữ liệu mang tải máy biến áp sau khi chạy file 
            sid = -1; owner = 1; ties = 3; flag = 3; entry = 1
            ierr,trans_name =  psspy.awndchar(sid, owner, ties, flag,entry, ['XFRNAME','ID']) #Xuất tên MBA
            ierr, trans_rate = psspy.awndreal(sid, owner, ties, flag, entry, ['PCTMVARATEA','P','Q']) #Lấy mang tải MBA
            ierr, trans_bus = psspy.awndint(sid, owner, ties, flag, entry, 'WIND1NUMBER')  #Lấy nút phía cao của MBA
            ierr, trans_PQ = psspy.awndcplx(sid, owner, ties, flag, entry, 'PQ') #Lấy PQ của MBA
            transformer_combine_array = trans_name + trans_rate + trans_bus  + trans_PQ
            transformer_dataframe_after = pd.DataFrame(transformer_combine_array).T
            transformer_dataframe_after .columns = ['XFRNAME','ID','PCTMVARATEA','P','Q','WIND1NUMBER',"PQ"]

            if self.checkBox_Canhbaodienap.isChecked() == 1:
                #Lấy dữ liệu điện áp các nút 220-110kV sau khi chạy file
                psspy.bsys(sid=1,usekv=1,basekv=[220,110],numarea=2,areas=[20,30])
                sid = -1 ; flag = 2
                ierr, bus_voltage = psspy.abusreal(sid, flag ,['PU','KV','BASE'])
                ierr, bus_name = psspy.abuschar(sid, flag,['NAME'])
                ierr, bus_number = psspy.abusint(sid, flag,['NUMBER'])
                bus_data_combine_array = bus_name + bus_number + bus_voltage
                bus_data_dataframe_after =  pd.DataFrame(bus_data_combine_array).T
                bus_data_dataframe_after.columns = ['NAME','NUMBER','PU','KV','BASE']
            
            #So sánh và xuất ra sự khác biệt giữa các đường dây
            for i in range(len(branch_dataframe_after)):
                #Làm tròn đến 1 chữ số
                branch_dataframe_before.loc[i,"PCTRATE1"] = round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                branch_dataframe_after.loc[i,"PCTRATE1"]= round(branch_dataframe_after.loc[i,"PCTRATE1"],1)
                branch_dataframe_before.loc[i,"P"] = round(branch_dataframe_before.loc[i,"P"],0)
                branch_dataframe_before.loc[i,"Q"] = round(branch_dataframe_before.loc[i,"Q"],0)
                branch_dataframe_after.loc[i,"P"] = round(branch_dataframe_after.loc[i,"P"],0)
                branch_dataframe_after.loc[i,"Q"] = round(branch_dataframe_after.loc[i,"Q"],0)
                
                Delta_loading_change =  round(branch_dataframe_after.loc[i,"PCTRATE1"],1) -round(branch_dataframe_before.loc[i,"PCTRATE1"],1)
                delta_mw_change = round(branch_dataframe_after.loc[i,"P"],1) - round(branch_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 80 and branch_dataframe_before.loc[i,"PCTRATE1"] < 80 and branch_dataframe_after.loc[i,"PCTRATE1"] < 90: #Nếu phần tử mang tải >80 sau khi chạy công tác 
                    result = "Đường dây đầy tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - " + str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 90 and branch_dataframe_before.loc[i,"PCTRATE1"] < 90 and branch_dataframe_after.loc[i,"PCTRATE1"] < 100:
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()
                if branch_dataframe_after.loc[i,"PCTRATE1"] > 100 and branch_dataframe_before.loc[i,"PCTRATE1"] < 100 :
                    result = "Đường dây quá tải "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " - "+str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                    QGuiApplication.processEvents()
                                   
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các đường dây tăng % mang tải
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+" " + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " lên "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        QGuiApplication.processEvents() 
                        if branch_dataframe_after.loc[i,"PCTRATE1"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if branch_dataframe_after.loc[i,"PCTRATE1"] < 80:
                            self.text_dotanggiam_tlcs.append(result)                         
                        QGuiApplication.processEvents() 
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các đường dây giảm % mang tải 
                        result = "Đường dây "+ str(branch_dataframe_before.loc[i,"FROMNAME"])+ " đi " +  str(branch_dataframe_before.loc[i,"TONAME"]) + "#" + str(branch_dataframe_before.loc[i,"ID"])+  " giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(branch_dataframe_before.loc[i,"PCTRATE1"]) + "%" + " xuống "+ str(branch_dataframe_after.loc[i,"PCTRATE1"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(branch_dataframe_before.loc[i,"P"])+ " MW "+ str(branch_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(branch_dataframe_after.loc[i,"P"])+" MW "+ str(branch_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
                        QGuiApplication.processEvents() 
            QGuiApplication.processEvents() 
            #-So sánh và xuất ra sự khác biệt giữa các MBA
            for i in range(len(transformer_dataframe_after)):
                #Làm tròn đến 1 chữ số
                transformer_dataframe_before.loc[i,"PCTMVARATEA"] = round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_after.loc[i,"PCTMVARATEA"]= round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1)
                transformer_dataframe_before.loc[i,"P"] = round(transformer_dataframe_before.loc[i,"P"],0)
                transformer_dataframe_before.loc[i,"Q"] = round(transformer_dataframe_before.loc[i,"Q"],0)
                transformer_dataframe_after.loc[i,"P"] = round(transformer_dataframe_after.loc[i,"P"],0)
                transformer_dataframe_after.loc[i,"Q"] = round(transformer_dataframe_after.loc[i,"Q"],0)

                #So sánh 
                Delta_loading_change = round(transformer_dataframe_after.loc[i,"PCTMVARATEA"],1) - round(transformer_dataframe_before.loc[i,"PCTMVARATEA"],1) 
                delta_mw_change = round(transformer_dataframe_after.loc[i,"P"],1) - round(transformer_dataframe_before.loc[i,"P"],1) 
                delta_mw_change = round(delta_mw_change,1)
                #Tìm các thành phần đầy/ quá tải trồi lên 
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 80 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 90 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result))
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 90 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 90 and transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 100 :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 100 and transformer_dataframe_before.loc[i,"PCTMVARATEA"] < 100  :
                    result = "MBA AT" +  str(transformer_dataframe_before.loc[i,"ID"]) +" "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ " đầy tải/ tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                    self.text_cacphantu_daytai.append(warningFormat.format(result)) 
                    result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                    self.text_cacphantu_daytai.append(result)
                    self.text_cacphantu_daytai.append("........................................................................")  
                #Nếu độ tăng giảm phần trăm mang tải lớn hơn độ nhạy xuất ra ngoài      
                if abs(Delta_loading_change) > self.do_nhay_tanggiam.value(): 
                    if Delta_loading_change > 0:
                        #Xuất các MBA tăng % mang tải
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + " tăng khoảng ↑ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " lên "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(UpFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi " +str(delta_mw_change) +" MW"
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] > 80:
                            self.text_dotanggiam_tlcs.append(warningFormat.format(result))
                        if transformer_dataframe_after.loc[i,"PCTMVARATEA"] < 80:
                            self.text_dotanggiam_tlcs.append(result)   
                        self.text_dotanggiam_tlcs.append("........................................................................")
                    if Delta_loading_change < 0:
                        #Xuất các MBA giảm % mang tải 
                        result = "MBA "+ str(transformer_dataframe_before.loc[i,"XFRNAME"])+ "#"+  str(transformer_dataframe_before.loc[i,"ID"]) + "giảm khoảng ↓ "+ str(round(Delta_loading_change,1)) +" %"+" (từ "+ str(transformer_dataframe_before.loc[i,"PCTMVARATEA"]) + "%" + " giảm "+ str(transformer_dataframe_after.loc[i,"PCTMVARATEA"]) + "%)" 
                        self.text_dotanggiam_tlcs.append(DownFormat.format(result))
                        result = "Trước " + str(transformer_dataframe_before.loc[i,"P"])+ " MW "+ str(transformer_dataframe_before.loc[i,"Q"]) + " MVAR ==>>> " +"Sau :"+  str(transformer_dataframe_after.loc[i,"P"])+" MW "+ str(transformer_dataframe_after.loc[i,"Q"])+" MVAR " + "thay đổi "  + str(delta_mw_change) +" MW"
                        self.text_dotanggiam_tlcs.append(result)
                        self.text_dotanggiam_tlcs.append("........................................................................")
            

            #  ------------------Cảnh báo điện áp cao, điện áp thấp ---------------------------------------
            if self.checkBox_Canhbaodienap.isChecked() == 1:
                for i in range(len(bus_data_dataframe_after)):
                    Delta_voltage_change =  round(bus_data_dataframe_after.loc[i,"KV"],2) - round(bus_data_dataframe_before.loc[i,"KV"],2)
                    bus_data_dataframe_after.loc[i,"PU"] = round(bus_data_dataframe_after.loc[i,"PU"],2)
                    bus_data_dataframe_before.loc[i,"PU"] = round(bus_data_dataframe_before.loc[i,"PU"],2)
                    bus_data_dataframe_after.loc[i,"KV"] = round(bus_data_dataframe_after.loc[i,"KV"],2)
                    bus_data_dataframe_before.loc[i,"KV"] = round(bus_data_dataframe_before.loc[i,"KV"],2)                
                    if bus_data_dataframe_after.loc[i,"KV"] > 75.0:
                    #Tìm các nút điện áp cao trồi lên
                        if bus_data_dataframe_after.loc[i,"PU"] > 1.1 and bus_data_dataframe_before.loc[i,"PU"] < 1.1 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " tăng cao ↑ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " lên "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(UpFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents() 
                        #Tìm các nút điện áp thấp sụt xuống
                        if bus_data_dataframe_after.loc[i,"PU"] < 0.95 and bus_data_dataframe_before.loc[i,"PU"] > 0.95 :
                            result = "Điện áp tại nút " +  str(bus_data_dataframe_before.loc[i,"NAME"]) + " giảm thấp ↓ khoảng "+ str(round(Delta_voltage_change,1)) +" kV"+" (từ "+ str(bus_data_dataframe_before.loc[i,"PU"]) + " pu" + " xuống "+ str(bus_data_dataframe_after.loc[i,"PU"]) + "pu)" 
                            self.text_voltage_warning.append(DownFormat.format(result))
                            result = "Trước " + str(bus_data_dataframe_before.loc[i,"KV"])+ " kV " + " ==>>> " +"Sau :"+  str(bus_data_dataframe_after.loc[i,"KV"])+" kV "
                            self.text_voltage_warning.append(result)
                            self.text_voltage_warning.append("........................................................................")
                            QGuiApplication.processEvents()             

            QGuiApplication.processEvents() 
            #Tính toán tổn thất sau khi chạy file 
            PQ_Loss_of_CNMin_after = psspy.ardat(20,'LOSS')
            P_Loss_of_CNMin_after = PQ_Loss_of_CNMin_after[1].real
            Q_Loss_of_CNMin_after = PQ_Loss_of_CNMin_after[1].imag
            delta_P_loss = round(P_Loss_of_CNMin_before - P_Loss_of_CNMin_after,5)
            delta_Q_loss = Q_Loss_of_CNMin_before - Q_Loss_of_CNMin_after
            if delta_P_loss <= 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc CNMin tăng: ↑ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(UpFormat.format(delta_P_loss_result))
            if delta_P_loss > 0:
                delta_P_loss_result = "Tổn thất hệ thống điện miền nam lúc CNMin giảm: ↓ " + str(abs(delta_P_loss)) +" MW"
                self.text_tonthat_tlcs.append(DownFormat.format(delta_P_loss_result))
                
            self.progressBar.setValue((so_file_sav_da_chay/so_file_sav_can_chay)*100)
            QGuiApplication.processEvents() 
        toc = time.perf_counter()
        movie.stop()
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Hoàn thành")
        msg.setInformativeText(f"-Hoàn thành chạy file .py trong {toc - tic:0.1f} giây ")
        msg.exec()
        self.loading.clear()
        self.RunPythontoPSSE.setStyleSheet("background-color : light gray")

    #-------------------------------Chạy tính toán tổn thất trên tất cả các file-------------------------
    def tinh_toan_ton_that(self):

        _translate = QtCore.QCoreApplication.translate  # Đưa ra màn hình 
        psspy.psseinit(500000) # Khởi động PSS/E 
        self.text_tonthat_tlcs.append(_translate("MainWindow","-------------TÍNH TOÁN TỔN THẤT----------")) #Tạo headline
        self.text_tonthat_tlcs.append(_translate("MainWindow"," "))
        if self.checkBox_2h.isChecked() == 1: # Kiểm tra xem hộp thoại của file 2h có được tick không ?
            psspy.case(psse_files_path_name_2h)  # Đọc file .sav lúc 2h của hệ thống 
            PQ_Loss_of_2h = psspy.ardat(20,'LOSS')  #Lệnh này lấy tổn thất P+ jQ
            P_Loss_of_2h = round(PQ_Loss_of_2h[1].real,1)  # Tách tổn thất P 
            Q_Loss_of_2h = round(PQ_Loss_of_2h[1].imag,1) # Tách tổn thất Q 
            result = "Tổn thất hệ thống điện Miền nam lúc 2h: "+ str(P_Loss_of_2h)+" MW /"+ str(Q_Loss_of_2h)+ " MVAR" + "(" + psse_files_name_2h +")" #Kết quả ghi ra
            self.text_tonthat_tlcs.append(_translate("MainWindow",result)) #In lên text widget của pyqt
            self.text_tonthat_tlcs.append(_translate("MainWindow","-----------------------------------")) #Tạo khoảng cách
        #------------------10H--------------------
        if self.checkBox_10h.isChecked() == 1:
            psspy.case(psse_files_path_name_10h)
            PQ_Loss_of_10h = psspy.ardat(20,'LOSS')
            P_Loss_of_10h = round(PQ_Loss_of_10h[1].real,1)
            Q_Loss_of_10h = round(PQ_Loss_of_10h[1].imag,1)
            result = "Tổn thất hệ thống điện Miền nam lúc 10h: "+ str(P_Loss_of_10h)+" MW /"+ str(Q_Loss_of_10h)+ " MVAR"+ "(" + psse_files_name_10h +")"
            self.text_tonthat_tlcs.append(_translate("MainWindow",result))
            self.text_tonthat_tlcs.append(_translate("MainWindow","-----------------------------------"))
        #------------------12H--------------------
        if self.checkBox_12h.isChecked() == 1:
            psspy.case(psse_files_path_name_12h)
            PQ_Loss_of_12h = psspy.ardat(20,'LOSS')
            P_Loss_of_12h = round(PQ_Loss_of_12h[1].real,1)
            Q_Loss_of_12h = round(PQ_Loss_of_12h[1].imag,1)
            result = "Tổn thất hệ thống điện Miền nam lúc 12h: "+ str(P_Loss_of_12h)+" MW /"+ str(Q_Loss_of_12h)+ " MVAR"+ "(" + psse_files_name_12h +")"
            self.text_tonthat_tlcs.append(_translate("MainWindow",result))
            self.text_tonthat_tlcs.append(_translate("MainWindow","-----------------------------------"))
        #------------------15H--------------------
        if self.checkBox_15h.isChecked() == 1:
            psspy.case(psse_files_path_name_15h)
            PQ_Loss_of_15h = psspy.ardat(20,'LOSS')
            P_Loss_of_15h = round(PQ_Loss_of_15h[1].real,1)
            Q_Loss_of_15h = round(PQ_Loss_of_15h[1].imag,1)
            result = "Tổn thất hệ thống điện Miền nam lúc 15h: "+ str(P_Loss_of_15h)+" MW /"+ str(Q_Loss_of_15h)+ " MVAR"+ "(" + psse_files_name_15h +")"
            self.text_tonthat_tlcs.append(_translate("MainWindow",result))
            self.text_tonthat_tlcs.append(_translate("MainWindow","-----------------------------------"))    
        #------------------18H--------------------
        if self.checkBox_18h.isChecked() == 1:
            psspy.case(psse_files_path_name_18h)
            PQ_Loss_of_18h = psspy.ardat(20,'LOSS')
            P_Loss_of_18h = round(PQ_Loss_of_18h[1].real,1)
            Q_Loss_of_18h = round(PQ_Loss_of_18h[1].imag,1)
            result = "Tổn thất hệ thống điện Miền nam lúc 18h: "+ str(P_Loss_of_18h)+" MW /"+ str(Q_Loss_of_18h)+ " MVAR"+ "(" + psse_files_name_18h +")"
            self.text_tonthat_tlcs.append(_translate("MainWindow",result))
            self.text_tonthat_tlcs.append(_translate("MainWindow","-----------------------------------"))    
        #------------------21H--------------------
        if self.checkBox_21h.isChecked() == 1:
            psspy.case(psse_files_path_name_21h)
            PQ_Loss_of_21h = psspy.ardat(20,'LOSS')
            P_Loss_of_21h = round(PQ_Loss_of_21h[1].real,1)
            Q_Loss_of_21h = round(PQ_Loss_of_21h[1].imag,1)
            result = "Tổn thất hệ thống điện Miền nam lúc 21h: "+ str(P_Loss_of_21h)+" MW /"+ str(Q_Loss_of_21h)+ " MVAR"+ "(" + psse_files_name_21h +")"
            self.text_tonthat_tlcs.append(_translate("MainWindow",result))
            self.text_tonthat_tlcs.append(_translate("MainWindow","-----------------------------------"))    
        #------------------CNMax--------------------
        if self.checkBox_CNma.isChecked() == 1:
            psspy.case(psse_files_path_name_CNMax)
            PQ_Loss_of_CNMax = psspy.ardat(20,'LOSS')
            P_Loss_of_CNMax = round(PQ_Loss_of_CNMax[1].real,1)
            Q_Loss_of_CNMax = round(PQ_Loss_of_CNMax[1].imag,1)
            result = "Tổn thất hệ thống điện Miền nam lúc CN Max: "+ str(P_Loss_of_CNMax)+" MW /"+ str(Q_Loss_of_CNMax)+ " MVAR"+ "(" + psse_files_name_CNMax +")"
            self.text_tonthat_tlcs.append(_translate("MainWindow",result))
            self.text_tonthat_tlcs.append(_translate("MainWindow","-----------------------------------"))    
        #------------------CNMin--------------------
        if self.checkBox_CNmi.isChecked() == 1:
            psspy.case(psse_files_path_name_CNMin)
            PQ_Loss_of_CNMin = psspy.ardat(20,'LOSS')
            P_Loss_of_CNMin = round(PQ_Loss_of_CNMin[1].real,1)
            Q_Loss_of_CNMin = round(PQ_Loss_of_CNMin[1].imag,1)
            result = "Tổn thất hệ thống điện Miền nam lúc CN Min: "+ str(P_Loss_of_CNMin)+" MW /"+ str(Q_Loss_of_CNMin)+ " MVAR"+ "(" + psse_files_name_CNMin +")"
            self.text_tonthat_tlcs.append(_translate("MainWindow",result))
            self.text_tonthat_tlcs.append(_translate("MainWindow","-----------------------------------"))  
        
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setInformativeText("-Hoàn thành tính toán tổn thất")
        msg.exec()

    #-------Version của tool--------------------------------------------------
    def version_of_the_tool(self):
        msg = QtWidgets.QMessageBox()
        msg.setInformativeText("-Version 1.0--10/2024 - Dev only by Tran Huu Phuc")
        msg.setMinimumHeight(200)
        msg.setMinimumWidth(500)
        msg.exec()

    #------Chương trình chọn phần tử đóng lại 
    def Chon_phantu_donglai(self):

        # Lấy các dòng được chọn
        rows = {index.row() for index in self.bangcacphantu.selectionModel().selectedIndexes()}
        output = []
        for row in rows:
            row_data = []
            # Lấy tất cả các dữ liệu của các dòng được chọn 
            for column in range(self.bangcacphantu.model().columnCount()):
                index = self.bangcacphantu.model().index(row, column)
                if index.data() == "Đường dây":
                    #Lấy nút đầu
                    index_bus_from = self.bangcacphantu.model().index(row, column+3)
                    bus_from = index_bus_from.data()
                    #Lấy nút cuối
                    index_bus_to = self.bangcacphantu.model().index(row, column+5)
                    bus_to = index_bus_to.data()
                    #Lấy số mạch
                    index_circuit_id = self.bangcacphantu.model().index(row, column+9)
                    circuit_id = index_circuit_id.data()
                    #Lấy tên nút đầu
                    index_bus_from_name = self.bangcacphantu.model().index(row, column+4)
                    bus_from_name = index_bus_from_name.data()
                    #Lấy tên nút cuối 
                    index_bus_to_name = self.bangcacphantu.model().index(row, column+6)
                    bus_to_name = index_bus_to_name.data()
                    #Đưa lên python text widget
                    self.Python_to_run_PSSE.append("#Dong lai duong day {} - {}".format(bus_from_name,bus_to_name))
                    self.Python_to_run_PSSE.append('psspy.branch_chng_3({},{},r"""{}""",[1,_i,_i,_i,_i,_i],[_f,_f,_f,_f,_f,_f,_f,_f,_f,_f,_f,_f],[_f,_f,_f,_f,_f,_f,_f,_f,_f,_f,_f,_f],_s)'.format(bus_from,bus_to,circuit_id))
                if index.data() == "MBA":
                    #Tên MBA
                    index_transformer_name = self.bangcacphantu.model().index(row, column+1)
                    transformer_name = index_transformer_name.data()
                    #Lấy nút cuối
                    index_bus_to = self.bangcacphantu.model().index(row, column+7)
                    bus_to = int(index_bus_to.data())

                    self.Python_to_run_PSSE.append("#Dong lai phan tu {}".format(transformer_name))
                    self.Python_to_run_PSSE.append('psspy.recn({})'.format(bus_to))

    def Xuat__thanh_file_py(self):
        # S_File will get the directory path and extension.
        S__File = QtWidgets.QFileDialog.getSaveFileName(None,'SavePyFile','/', "Python file (*.py)")
        
        # This will let you access the test in your QTextEdit
        Text = self.Python_to_run_PSSE.toPlainText()
        
        # This will prevent you from an error if pressed cancel on file dialog.
        if S__File[0]: 
            # Finally this will Save your file to the path selected.
            with open(S__File[0], 'w') as file:
                file.write(Text)
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Hoàn thành")
        msg.setIcon(QMessageBox.Information)
        msg.setInformativeText("Đã lưu file .py")
        msg.exec()
        

    def Chon_phantu_cat(self):
        UpFormat = '<span style="color:red;">{}</span>'

        # Lấy các dòng được chọn
        rows = {index.row() for index in self.bangcacphantu.selectionModel().selectedIndexes()}
        output = []
        for row in rows:
            row_data = []
            # Lấy tất cả các dữ liệu của các dòng được chọn 
            for column in range(self.bangcacphantu.model().columnCount()):
                index = self.bangcacphantu.model().index(row, column)
                if index.data() == "Đường dây":
                    #Lấy nút đầu
                    index_bus_from = self.bangcacphantu.model().index(row, column+3)
                    bus_from = index_bus_from.data()
                    #Lấy nút cuối
                    index_bus_to = self.bangcacphantu.model().index(row, column+5)
                    bus_to = index_bus_to.data()
                    #Lấy số mạch
                    index_circuit_id = self.bangcacphantu.model().index(row, column+9)
                    circuit_id = index_circuit_id.data()
                    #Lấy tên nút đầu
                    index_bus_from_name = self.bangcacphantu.model().index(row, column+4)
                    bus_from_name = index_bus_from_name.data()
                    #Lấy tên nút cuối 
                    index_bus_to_name = self.bangcacphantu.model().index(row, column+6)
                    bus_to_name = index_bus_to_name.data()
                    #Đưa lên python text widget
                    self.Python_to_run_PSSE.append(UpFormat.format("#----------------------------------"))
                    self.Python_to_run_PSSE.append("#Mo duong day {} - {}".format(bus_from_name,bus_to_name))
                    self.Python_to_run_PSSE.append('psspy.branch_chng_3({},{},r"""{}""",[0,_i,_i,_i,_i,_i],[_f,_f,_f,_f,_f,_f,_f,_f,_f,_f,_f,_f],[_f,_f,_f,_f,_f,_f,_f,_f,_f,_f,_f,_f],_s)'.format(bus_from,bus_to,circuit_id))
                if index.data() == "MBA":
                    #Tên MBA
                    index_transformer_name = self.bangcacphantu.model().index(row, column+1)
                    transformer_name = index_transformer_name.data()
                    #Lấy nút cuối
                    index_bus_to = self.bangcacphantu.model().index(row, column+7)
                    bus_to = int(index_bus_to.data())
                    self.Python_to_run_PSSE.append(UpFormat.format("#----------------------------------"))
                    self.Python_to_run_PSSE.append("#Mo phan tu {}".format(transformer_name))
                    self.Python_to_run_PSSE.append('psspy.dscn({})'.format(bus_to))

    # Hàm này sẽ kiểm tra đóng/mở/tồn tại của phần tử được chọn 
    def Kiemtra_dong_mo_cua_phantu_duoc_chon(self):
        headerformat  = '<span style="font-weight: bold;">{}</span>'
        UpFormat = '<span style="color:red;">{}</span>'
        DownFormat = '<span style="color:green;">{}</span>'
        psspy.psseinit(500000)

        # Lấy các dòng được chọn
        rows = {index.row() for index in self.bangcacphantu.selectionModel().selectedIndexes()}
        output = []
        for row in rows:
            row_data = []
            # Lấy tất cả các dữ liệu của các dòng được chọn 
            for column in range(self.bangcacphantu.model().columnCount()):
                index = self.bangcacphantu.model().index(row, column)
                if index.data() == "Đường dây":
                    index_from_bus_number = self.bangcacphantu.model().index(row,3) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 3 từ trái sang
                    index_to_bus_number = self.bangcacphantu.model().index(row,5) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 5 từ trái sang
                    index_id_branch_flow = self.bangcacphantu.model().index(row,9) #Lấy từ bảng trên màn hình với dòng đã chọn và cột thứ 9 từ trái sang
                    index_name_of_the_branch =  self.bangcacphantu.model().index(row,11) # Lấy tên của đường dây
                    from_bus_number = index_from_bus_number.data()
                    to_bus_number = index_to_bus_number.data()
                    circuit_id_branch_flow = index_id_branch_flow.data()  # Lấy dữ liệu 
                    name_of_the_branch = index_name_of_the_branch.data()
                    circuit_id_branch_flow = str(circuit_id_branch_flow)
                    self.text_outputbar.append(headerformat.format("----------KIỂM TRA ĐÓNG/MỞ + MANG TẢI-------------"))
                    #Kiểm tra xem check box đã tick hay chưa 
                    if self.checkBox_2h.isChecked() == 1:
                        #Đoạn này để kiểm tra xem đã chọn file 2h hay chưa 
                        try:
                            psse_files_path_name_2h
                        #Báo ra nếu chưa chọn file 
                        except NameError:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Chưa chọn file 2h")
                            msg.exec()
                            return
                        psspy.case(psse_files_path_name_2h)

                        ierr, Percent_flow_from_of_branch_2h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                        if ierr == 1:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                            msg.exec()
                            return
                        if ierr == 2:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                            msg.exec()
                            return    
                        if ierr == 3:
                            result = str(name_of_the_branch) + " đang mở trong chế độ 2h"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(UpFormat.format(result))
                        if ierr == 0:
                            result = str(name_of_the_branch) + " đang đóng trong chế độ 2h và mang tải " + str(round(Percent_flow_from_of_branch_2h,2)) + "%"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(DownFormat.format(result))
                        QGuiApplication.processEvents()                        
                    #------------------------------------------------------------------------------------------
                    if self.checkBox_10h.isChecked() == 1:
                        #Đoạn này để kiểm tra xem đã chọn file 10h hay chưa 
                        try:
                            psse_files_path_name_10h
                        #Báo ra nếu chưa chọn file 
                        except NameError:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Chưa chọn file 10h")
                            msg.exec()
                            return
                        psspy.case(psse_files_path_name_10h)

                        ierr, Percent_flow_from_of_branch_10h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                        if ierr == 1:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                            msg.exec()
                            return
                        if ierr == 2:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                            msg.exec()
                            return    
                        if ierr == 3:
                            result = str(name_of_the_branch) + " đang mở trong chế độ 10h"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(UpFormat.format(result))
                        if ierr == 0:
                            result = str(name_of_the_branch) + " đang đóng trong chế độ 10h và mang tải " + str(round(Percent_flow_from_of_branch_10h,2)) + "%"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(DownFormat.format(result))
                        QGuiApplication.processEvents() 
                    #------------------------------------------------------------------------------------------
                    if self.checkBox_12h.isChecked() == 1:
                        #Đoạn này để kiểm tra xem đã chọn file 10h hay chưa 
                        try:
                            psse_files_path_name_12h
                        #Báo ra nếu chưa chọn file 
                        except NameError:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Chưa chọn file 12h")
                            msg.exec()
                            return
                        psspy.case(psse_files_path_name_12h)

                        ierr, Percent_flow_from_of_branch_12h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                        if ierr == 1:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                            msg.exec()
                            return
                        if ierr == 2:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                            msg.exec()
                            return    
                        if ierr == 3:
                            result = str(name_of_the_branch) + " đang mở trong chế độ 12h"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(UpFormat.format(result))
                        if ierr == 0:
                            result = str(name_of_the_branch) + " đang đóng trong chế độ 12h và mang tải " + str(round(Percent_flow_from_of_branch_12h,2)) + "%"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(DownFormat.format(result)) 
                        QGuiApplication.processEvents()
                    #------------------------------------------------------------------------------------------
                    if self.checkBox_15h.isChecked() == 1:
                        #Đoạn này để kiểm tra xem đã chọn file 10h hay chưa 
                        try:
                            psse_files_path_name_15h
                        #Báo ra nếu chưa chọn file 
                        except NameError:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Chưa chọn file 15h")
                            msg.exec()
                            return
                        psspy.case(psse_files_path_name_15h)

                        ierr, Percent_flow_from_of_branch_15h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                        if ierr == 1:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                            msg.exec()
                            return
                        if ierr == 2:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                            msg.exec()
                            return    
                        if ierr == 3:
                            result = str(name_of_the_branch) + " đang mở trong chế độ 15h"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(UpFormat.format(result))
                        if ierr == 0:
                            result = str(name_of_the_branch) + " đang đóng trong chế độ 15h và mang tải " + str(round(Percent_flow_from_of_branch_15h,2)) + "%"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(DownFormat.format(result))
                        QGuiApplication.processEvents() 
                    #------------------------------------------------------------------------------------------
                    if self.checkBox_18h.isChecked() == 1:
                        #Đoạn này để kiểm tra xem đã chọn file 18h hay chưa 
                        try:
                            psse_files_path_name_18h
                        #Báo ra nếu chưa chọn file 
                        except NameError:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Chưa chọn file 18h")
                            msg.exec()
                            return
                        psspy.case(psse_files_path_name_18h)

                        ierr, Percent_flow_from_of_branch_18h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                        if ierr == 1:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                            msg.exec()
                            return
                        if ierr == 2:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                            msg.exec()
                            return    
                        if ierr == 3:
                            result = str(name_of_the_branch) + " đang mở trong chế độ 18h"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(UpFormat.format(result))
                        if ierr == 0:
                            result = str(name_of_the_branch) + " đang đóng trong chế độ 18h và mang tải " + str(round(Percent_flow_from_of_branch_18h,2)) + "%"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(DownFormat.format(result))
                        QGuiApplication.processEvents()
                    #------------------------------------------------------------------------------------------
                    if self.checkBox_21h.isChecked() == 1:
                        #Đoạn này để kiểm tra xem đã chọn file 18h hay chưa 
                        try:
                            psse_files_path_name_21h
                        #Báo ra nếu chưa chọn file 
                        except NameError:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Chưa chọn file 21h")
                            msg.exec()
                            return
                        psspy.case(psse_files_path_name_21h)

                        ierr, Percent_flow_from_of_branch_21h = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                        if ierr == 1:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                            msg.exec()
                            return
                        if ierr == 2:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                            msg.exec()
                            return    
                        if ierr == 3:
                            result = str(name_of_the_branch) + " đang mở trong chế độ 21h"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(UpFormat.format(result))
                        if ierr == 0:
                            result = str(name_of_the_branch) + " đang đóng trong chế độ 21h và mang tải " + str(round(Percent_flow_from_of_branch_21h,2)) + "%"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(DownFormat.format(result)) 
                        QGuiApplication.processEvents()            

                    #------------------------------------------------------------------------------------------
                    if self.checkBox_CNma.isChecked() == 1:
                        #Đoạn này để kiểm tra xem đã chọn file CNMax hay chưa 
                        try:
                            psse_files_path_name_CNMax
                        #Báo ra nếu chưa chọn file 
                        except NameError:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Chưa chọn file 21h")
                            msg.exec()
                            return
                        psspy.case(psse_files_path_name_CNMax)

                        ierr, Percent_flow_from_of_branch_CNMax = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                        if ierr == 1:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                            msg.exec()
                            return
                        if ierr == 2:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                            msg.exec()
                            return    
                        if ierr == 3:
                            result = str(name_of_the_branch) + " đang mở trong chế độ chủ nhật Max"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(UpFormat.format(result))
                        if ierr == 0:
                            result = str(name_of_the_branch) + " đang đóng trong chế độ chủ nhật Max và mang tải " + str(round(Percent_flow_from_of_branch_CNMax,2)) + "%"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(DownFormat.format(result))
                        QGuiApplication.processEvents()  
                    #------------------------------------------------------------------------------------------
                    if self.checkBox_CNmi.isChecked() == 1:
                        #Đoạn này để kiểm tra xem đã chọn file CNMax hay chưa 
                        try:
                            psse_files_path_name_CNMin
                        #Báo ra nếu chưa chọn file 
                        except NameError:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Chưa chọn file 21h")
                            msg.exec()
                            return
                        psspy.case(psse_files_path_name_CNMin)

                        ierr, Percent_flow_from_of_branch_CNMin = psspy.brnmsc(from_bus_number,to_bus_number,circuit_id_branch_flow,'PCTRTA')
                            #Cảnh báo nếu không tìm thấy trong PSS/E
                        if ierr == 1:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setInformativeText("Không tìm thấy nút trong PSS/E")
                            msg.exec()
                            return
                        if ierr == 2:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Cảnh báo")
                            msg.setIcon(QMessageBox.Information)
                            msg.setInformativeText("Không tìm thấy ĐZ/MBA trong PSS/E")
                            msg.exec()
                            return    
                        if ierr == 3:
                            result = str(name_of_the_branch) + " đang mở trong chế độ chủ nhật Min"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(UpFormat.format(result))
                        if ierr == 0:
                            result = str(name_of_the_branch) + " đang đóng trong chế độ chủ nhật Min và mang tải " + str(round(Percent_flow_from_of_branch_CNMin,2)) + "%"
                            self.text_outputbar.append("-------------------------------------------------")
                            self.text_outputbar.append(DownFormat.format(result))
                        QGuiApplication.processEvents()  


# Đoạn này thực thi giao diện app tại đâys
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    sys.exit(app.exec_())
